53:1-53:4::die :: "forall a. {v : [Char] | false} -> a"
53:5-53:8::msg :: "{v : [Char] | false}"
53:11-53:16::_ :: "[Char] -> a"
53:17-53:20::msg :: "{v : [Char] | false}"
75:22-75:27::spDim :: "forall a. (Sparse a) -> Int"
76:22-76:29::spElems :: "forall a. (Sparse a) -> [(Int, a)]"
129:1-129:5::okSP :: "(Sparse [Char])"
129:8-129:10::_ :: "x1:{v : Int | v >= 0}\n-> x2:[({v : Int | v < x1 && 0 <= v}, [Char])]\n-> {v : (Sparse [Char]) | spDim v == x1 && spElems v == x2}"
129:11-129:12::lq_anf__d3jx :: "{v : Int | v == (5  :  int)}"
129:15-129:25::lq_anf__d3jA :: "({v : Int | v == 0}, [Char])"
129:16-129:17::lq_anf__d3jy :: "{v : Int | v == (0  :  int)}"
129:19-129:24::lq_anf__d3jz :: "{v : [Char] | len v >= 0}"
130:15-130:25::lq_anf__d3jD :: "({v : Int | v > 0}, [Char])"
130:16-130:17::lq_anf__d3jB :: "{v : Int | v == (3  :  int)}"
130:19-130:24::lq_anf__d3jC :: "{v : [Char] | len v >= 0}"
137:1-137:6::badSP :: "(Sparse [Char])"
137:9-137:11::_ :: "x1:{v : Int | v >= 0}\n-> x2:[({v : Int | v < x1 && 0 <= v}, [Char])]\n-> {v : (Sparse [Char]) | spDim v == x1 && spElems v == x2}"
137:12-137:13::lq_anf__d3jn :: "{v : Int | v == (5  :  int)}"
137:16-137:26::lq_anf__d3jq :: "({v : Int | v == 0}, [Char])"
137:17-137:18::lq_anf__d3jo :: "{v : Int | v == (0  :  int)}"
137:20-137:25::lq_anf__d3jp :: "{v : [Char] | len v >= 0}"
138:16-138:26::lq_anf__d3jt :: "({v : Int | v > 0}, [Char])"
138:17-138:18::lq_anf__d3jr :: "{v : Int | v == (6  :  int)}"
138:20-138:25::lq_anf__d3js :: "{v : [Char] | len v >= 0}"
155:1-155:8::dotProd :: "x1:(Vector Int) -> {v : (Sparse Int) | spDim v == vlen x1} -> Int"
155:9-155:10::x :: "(Vector Int)"
155:22-155:24::_ :: "Int\n-> {v : [({v : Int | v >= 0}, Int)] | len v >= 0 && len v <= len y}\n-> Int"
155:25-155:26::lq_anf__d3jm :: "{v : Int | v == (0  :  int)}"
155:27-155:28::y :: "{v : [({v : Int | 0 <= v}, Int)] | v == y && len v >= 0}"
157:5-157:7::go :: "Int\n-> {v : [({v : Int | v >= 0}, Int)] | len v >= 0 && len v <= len y}\n-> Int"
157:8-157:11::sum :: "Int"
157:28-157:30::go :: "Int\n-> {VV : [({VV : Int | VV >= 0}, Int)] | len VV >= 0 && len VV <= len y}\n-> Int"
157:32-157:35::sum :: "{v : Int | v == sum}"
157:36-157:37::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
157:38-157:49::lq_anf__d3jk :: "Int"
157:39-157:40::x :: "{v : (Vector Int) | v == x && 0 <= vlen v}"
157:41-157:42::_ :: "x1:(Vector Int) -> {v : Int | v >= 0 && v < vlen x1} -> Int"
157:43-157:44::i :: "{v : Int | v == i && v >= 0}"
157:46-157:47::_ :: "x1:Int\n-> x2:Int\n-> {v : Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
157:48-157:49::v :: "{fix#v#39# : Int | v' == v}"
157:51-157:53::y' :: "{v : [({v : Int | v >= 0}, Int)] | v == y' && len v >= 0}"
158:28-158:31::sum :: "{v : Int | v == sum}"
171:1-171:9::dotProd' :: "x1:(Vector Int) -> {v : (Sparse Int) | spDim v == vlen x1} -> Int"
171:10-171:11::x :: "(Vector Int)"
171:23-171:29::_ :: "(Int -> ({v : Int | v >= 0}, Int) -> Int)\n-> Int -> [({v : Int | v >= 0}, Int)] -> Int"
171:30-171:34::body :: "Int -> ({v : Int | v >= 0}, Int) -> Int"
171:35-171:36::lq_anf__d3jf :: "{v : Int | v == (0  :  int)}"
171:37-171:38::y :: "{v : [({v : Int | 0 <= v}, Int)] | v == y && len v >= 0}"
173:5-173:9::body :: "Int -> ({VV : Int | VV >= 0}, Int) -> Int"
173:10-173:13::sum :: "Int"
173:29-173:32::sum :: "{v : Int | v == sum}"
173:33-173:34::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
173:35-173:47::lq_anf__d3je :: "Int"
173:36-173:37::x :: "{v : (Vector Int) | v == x && 0 <= vlen v}"
173:38-173:39::_ :: "x1:(Vector Int) -> {v : Int | v >= 0 && v < vlen x1} -> Int"
173:40-173:41::i :: "{v : Int | v == i && v >= 0}"
173:44-173:45::_ :: "x1:Int\n-> x2:Int\n-> {v : Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
173:46-173:47::v :: "{fix#v#39# : Int | v' == v}"
193:1-193:9::fromList :: "forall a. Int -> [(Int, a)] -> (Maybe (Sparse a))"
193:10-193:13::dim :: "Int"
193:14-193:18::elts :: "[(Int, a)]"
193:21-193:30::undefined :: "forall a. a"
196:1-196:6::test1 :: "{v : (Sparse [Char]) | spDim v == 3}"
196:21-196:29::lq_anf__d3iZ :: "(Maybe (Sparse [Char])) -> (Sparse [Char])"
196:30-196:31::_ :: "((Maybe (Sparse [Char])) -> (Sparse [Char]))\n-> (Maybe (Sparse [Char])) -> (Sparse [Char])"
196:32-196:40::_ :: "Int -> [(Int, [Char])] -> (Maybe (Sparse [Char]))"
196:42-196:43::lq_anf__d3j0 :: "{v : Int | v == (3  :  int)}"
196:44-196:70::lq_anf__d3j9 :: "{v : [(Int, [Char])] | null v <=> false && len v >= 0}"
196:45-196:55::lq_anf__d3j3 :: "(Int, [Char])"
196:46-196:47::lq_anf__d3j1 :: "{v : Int | v == (0  :  int)}"
196:49-196:54::lq_anf__d3j2 :: "{v : [Char] | len v >= 0}"
196:57-196:69::lq_anf__d3j6 :: "(Int, [Char])"
196:58-196:59::lq_anf__d3j4 :: "{v : Int | v == (2  :  int)}"
196:61-196:68::lq_anf__d3j5 :: "{v : [Char] | len v >= 0}"
206:1-206:5::plus :: "forall a. (Num a) => (Sparse a) -> (Sparse a) -> (Sparse a)"
206:6-206:7::x :: "(Sparse a)"
206:8-206:9::y :: "(Sparse a)"
206:12-206:21::undefined :: "forall a. a"
209:1-209:6::test2 :: "{v : (Sparse Int) | spDim v == 3}"
209:12-209:16::_ :: "(Sparse Int) -> (Sparse Int) -> (Sparse Int)"
209:17-209:21::vec1 :: "{v : (Sparse Int) | v == vec1}"
209:22-209:26::vec2 :: "{v : (Sparse Int) | v == vec2}"
211:5-211:9::vec1 :: "(Sparse Int)"
211:12-211:14::_ :: "x1:{v : Int | v >= 0}\n-> x2:[({v : Int | v < x1 && 0 <= v}, Int)]\n-> {v : (Sparse Int) | spDim v == x1 && spElems v == x2}"
211:15-211:16::lq_anf__d3kb :: "{v : Int | v == (3  :  int)}"
211:17-211:34::lq_anf__d3kk :: "{v : [({v : Int | v == fst x15 && v >= 0}, Int)]<\\x6 VV -> v /= x6> | null v <=> false && len v >= 0}"
211:18-211:25::lq_anf__d3ke :: "({v : Int | v == 0}, Int)"
211:19-211:20::lq_anf__d3kc :: "{v : Int | v == (0  :  int)}"
211:22-211:24::lq_anf__d3kd :: "{v : Int | v == (12  :  int)}"
211:27-211:33::lq_anf__d3kh :: "({v : Int | v > 0}, Int)"
211:28-211:29::lq_anf__d3kf :: "{v : Int | v == (2  :  int)}"
211:31-211:32::lq_anf__d3kg :: "{v : Int | v == (9  :  int)}"
212:5-212:9::vec2 :: "(Sparse Int)"
212:12-212:14::_ :: "x1:{v : Int | v >= 0}\n-> x2:[({v : Int | v < x1 && 0 <= v}, Int)]\n-> {v : (Sparse Int) | spDim v == x1 && spElems v == x2}"
212:15-212:16::lq_anf__d3k1 :: "{v : Int | v == (3  :  int)}"
212:17-212:36::lq_anf__d3ka :: "{v : [({v : Int | v == fst x16 && v >= 0}, Int)]<\\x6 VV -> v /= x6> | null v <=> false && len v >= 0}"
212:18-212:24::lq_anf__d3k4 :: "({v : Int | v == 0}, Int)"
212:19-212:20::lq_anf__d3k2 :: "{v : Int | v == (0  :  int)}"
212:22-212:23::lq_anf__d3k3 :: "{v : Int | v == (8  :  int)}"
212:27-212:35::lq_anf__d3k7 :: "({v : Int | v == 1 && v > 0}, Int)"
212:28-212:29::lq_anf__d3k5 :: "{v : Int | v == (1  :  int)}"
212:31-212:34::lq_anf__d3k6 :: "{v : Int | v == (100  :  int)}"
224:25-224:27::hd :: "forall a. (IncList a) -> a"
224:34-224:36::tl :: "forall a. (IncList a) -> (IncList a)"
254:1-254:7::okList :: "(IncList Integer)"
254:11-254:29::lq_anf__d3iT :: "{v : Integer | v == 1}"
254:13-254:15::_ :: "x1:Integer\n-> x2:(IncList {v : Integer | x1 <= v})\n-> {v : (IncList Integer) | hd v == x1 && tl v == x2}"
254:16-254:29::lq_anf__d3iY :: "(IncList {v : Integer | v > 0})"
254:18-254:20::_ :: "x1:{v : Integer | v > 0}\n-> x2:(IncList {v : Integer | v > 0 && x1 <= v})\n-> {v : (IncList {v : Integer | v > 0}) | hd v == x1 && tl v == x2}"
254:21-254:29::lq_anf__d3iX :: "(IncList {v : Integer | v > 0})"
254:23-254:25::_ :: "x1:{v : Integer | v > 0}\n-> x2:(IncList {v : Integer | v > 0 && x1 <= v})\n-> {v : (IncList {v : Integer | v > 0}) | hd v == x1 && tl v == x2}"
254:26-254:29::lq_anf__d3iW :: "(IncList {v : Integer | false})"
256:1-256:8::badList :: "(IncList Integer)"
256:11-256:29::lq_anf__d3iN :: "{v : Integer | v == 2}"
256:13-256:15::_ :: "x1:Integer\n-> x2:(IncList {v : Integer | x1 <= v})\n-> {v : (IncList Integer) | hd v == x1 && tl v == x2}"
256:16-256:29::lq_anf__d3iS :: "(IncList {v : Integer | v > 0})"
256:18-256:20::_ :: "x1:{v : Integer | v > 0}\n-> x2:(IncList {v : Integer | v > 0 && x1 <= v})\n-> {v : (IncList {v : Integer | v > 0}) | hd v == x1 && tl v == x2}"
256:21-256:29::lq_anf__d3iR :: "(IncList {v : Integer | v > 0})"
256:23-256:25::_ :: "x1:{v : Integer | v > 0}\n-> x2:(IncList {v : Integer | v > 0 && x1 <= v})\n-> {v : (IncList {v : Integer | v > 0}) | hd v == x1 && tl v == x2}"
256:26-256:29::lq_anf__d3iQ :: "(IncList {v : Integer | false})"
271:1-271:11::insertSort :: "forall a. (Ord a) => [a] -> (IncList a)"
271:21-271:24::Emp :: "forall a. (IncList a)"
272:21-272:27::insert :: "forall a. (Ord a) => a -> (IncList a) -> (IncList a)"
272:28-272:29::x :: "{VV : a | VV == x}"
272:31-272:41::insertSort :: "forall a. (Ord a) => [a] -> (IncList a)"
272:42-272:44::xs :: "{v : [a] | v == xs && len v >= 0}"
282:1-282:7::insert :: "forall a. (Ord a) => a -> (IncList a) -> (IncList a)"
282:8-282:9::y :: "a"
282:22-282:23::y :: "{VV : a | VV == y}"
282:24-282:26::_ :: "x1:{VV : a | VV == y}\n-> x2:(IncList {VV : a | VV == y && x1 <= VV})\n-> {v : (IncList {VV : a | VV == y}) | hd v == x1 && tl v == x2}"
282:27-282:30::lq_anf__d3iG :: "(IncList {VV : a | false})"
284:5-284:6::y :: "{VV : a | VV == y}"
284:7-284:9::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 <= v}"
284:10-284:11::x :: "{VV : a | VV == x}"
284:22-284:23::y :: "{VV : a | VV == y}"
284:24-284:26::_ :: "x1:{VV : a | VV >= y}\n-> x2:(IncList {VV : a | VV >= y && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= y}) | hd v == x1 && tl v == x2}"
284:27-284:28::x :: "{VV : a | VV == x}"
284:29-284:31::_ :: "x1:{VV : a | VV >= y && VV >= x}\n-> x2:(IncList {VV : a | VV >= y && VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= y && VV >= x}) | hd v == x1 && tl v == x2}"
284:32-284:34::xs :: "{v : (IncList {VV : a | x <= VV}) | v == xs}"
285:22-285:23::x :: "{VV : a | VV == x}"
285:24-285:26::_ :: "x1:{VV : a | VV >= x}\n-> x2:(IncList {VV : a | VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= x}) | hd v == x1 && tl v == x2}"
285:27-285:33::insert :: "forall a. (Ord a) => a -> (IncList a) -> (IncList a)"
285:34-285:35::y :: "{VV : a | VV == y}"
285:36-285:38::xs :: "{v : (IncList {VV : a | x <= VV}) | v == xs}"
293:1-293:12::insertSort' :: "forall a. (Ord a) => [a] -> (IncList a)"
293:13-293:15::xs :: "[a]"
293:19-293:24::_ :: "(a -> (IncList a) -> (IncList a))\n-> (IncList a) -> [a] -> (IncList a)"
293:25-293:26::lq_anf__d3iD :: "a -> (IncList a) -> (IncList a)"
293:27-293:28::lq_anf__d3iE :: "(IncList a)"
293:29-293:31::xs :: "{v : [a] | v == xs && len v >= 0}"
295:6-295:7::f :: "forall a. a"
295:19-295:28::_ :: "a"
296:6-296:7::b :: "forall a. a"
296:19-296:28::_ :: "a"
305:1-305:6::split :: "forall a.\nx1:{VV : [a] | len VV >= 0}\n-> ({VV : [a] | VV == fst VV && len VV >= 0 && len VV <= len x1}, {VV : [a] | VV == snd VV && len VV >= 0 && len VV <= len x1})<\\x1 VV -> len VV >= 0 && len VV <= len x1 && len VV <= len x1>"
305:18-305:30::(,) :: "forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x6 VV -> p2 x6> | fst v == x1 && x_Tuple22 v == x2 && snd v == x2 && x_Tuple21 v == x1}"
305:19-305:20::x :: "{VV : a | VV == x}"
305:20-305:21::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && xsListSelector v == x2 && len v == 1 + len x2}"
305:21-305:23::xs :: "{v : [a] | v == xs && v == xs && len v == len xs && len v >= 0 && len v >= len ys && len v <= len zs}"
305:25-305:26::y :: "{VV : a | VV == y}"
305:26-305:27::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && xsListSelector v == x2 && len v == 1 + len x2}"
305:27-305:29::ys :: "{v : [a] | v == ys && v == ys && len v == len ys && len v >= 0 && len v <= len xs && len v <= len xs && len v <= len zs}"
307:6-307:8::xs :: "{VV : [a] | VV == xs && len VV == len xs && len VV >= 0 && len VV >= len ys && len VV <= len zs}"
307:10-307:12::ys :: "{VV : [a] | VV == ys && len VV == len ys && len VV >= 0 && len VV <= len xs && len VV <= len xs && len VV <= len zs}"
307:18-307:23::split :: "forall a.\nx1:{VV : [a] | len VV >= 0}\n-> ({VV : [a] | VV == fst VV && len VV >= 0 && len VV <= len x1}, {VV : [a] | VV == snd VV && len VV >= 0 && len VV <= len x1})<\\x1 VV -> len VV >= 0 && len VV <= len x1 && len VV <= len x1>"
307:24-307:26::zs :: "{v : [a] | v == zs && len v >= 0}"
308:18-308:26::(,) :: "forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x6 VV -> p2 x6> | fst v == x1 && x_Tuple22 v == x2 && snd v == x2 && x_Tuple21 v == x1}"
308:19-308:21::ds_d3fL :: "{v : [a] | len v >= 0}"
308:23-308:25::lq_anf__d3il :: "{v : [{VV : a | false}] | null v <=> true && len v == 0 && len v >= 0}"
316:1-316:6::merge :: "forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"
316:7-316:9::xs :: "(IncList a)"
316:17-316:19::xs :: "{v : (IncList a) | v == xs}"
317:17-317:19::ds_d3fE :: "(IncList a)"
319:5-319:6::x :: "{VV : a | VV == x}"
319:7-319:9::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 <= v}"
319:10-319:11::y :: "{VV : a | VV == y}"
319:17-319:18::x :: "{VV : a | VV == x}"
319:19-319:21::_ :: "x1:{VV : a | VV >= x}\n-> x2:(IncList {VV : a | VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= x}) | hd v == x1 && tl v == x2}"
319:22-319:27::merge :: "forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"
319:28-319:30::xs :: "{v : (IncList {VV : a | x <= VV}) | v == xs}"
319:32-319:33::y :: "{VV : a | VV == y}"
319:34-319:36::_ :: "x1:{VV : a | VV >= y && VV >= x}\n-> x2:(IncList {VV : a | VV >= y && VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= y && VV >= x}) | hd v == x1 && tl v == x2}"
319:37-319:39::ys :: "{v : (IncList {VV : a | y <= VV}) | v == ys}"
320:17-320:18::y :: "{VV : a | VV == y}"
320:19-320:21::_ :: "x1:{VV : a | VV >= y}\n-> x2:(IncList {VV : a | VV >= y && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= y}) | hd v == x1 && tl v == x2}"
320:22-320:27::merge :: "forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"
320:29-320:30::x :: "{VV : a | VV == x}"
320:31-320:33::_ :: "x1:{VV : a | VV > y && VV >= x}\n-> x2:(IncList {VV : a | VV > y && VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV > y && VV >= x}) | hd v == x1 && tl v == x2}"
320:34-320:36::xs :: "{v : (IncList {VV : a | x <= VV}) | v == xs}"
320:38-320:40::ys :: "{v : (IncList {VV : a | y <= VV}) | v == ys}"
329:1-329:10::mergeSort :: "forall a. (Ord a) => [a] -> (IncList a)"
329:17-329:20::Emp :: "forall a. (IncList a)"
330:17-330:18::x :: "{VV : a | VV == x}"
330:19-330:21::_ :: "x1:a\n-> x2:(IncList {VV : a | x1 <= VV})\n-> {v : (IncList a) | hd v == x1 && tl v == x2}"
330:22-330:25::lq_anf__d3iA :: "(IncList {VV : a | false})"
331:17-331:22::merge :: "forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"
331:24-331:33::mergeSort :: "forall a. (Ord a) => [a] -> (IncList a)"
331:34-331:36::ys :: "{v : [a] | v == ys && v == ys && len v == len ys && len v >= 0 && len v >= len zs}"
331:39-331:48::mergeSort :: "forall a. (Ord a) => [a] -> (IncList a)"
331:49-331:51::zs :: "{v : [a] | v == zs && v == zs && len v == len zs && len v >= 0 && len v <= len ys && len v <= len ys}"
333:6-333:8::ys :: "{VV : [a] | VV == ys && len VV == len ys && len VV >= 0 && len VV >= len zs}"
333:10-333:12::zs :: "{VV : [a] | VV == zs && len VV == len zs && len VV >= 0 && len VV <= len ys && len VV <= len ys}"
333:17-333:22::split :: "forall a.\nx1:{VV : [a] | len VV >= 0}\n-> ({VV : [a] | VV == fst VV && len VV >= 0 && len VV <= len x1}, {VV : [a] | VV == snd VV && len VV >= 0 && len VV <= len x1})<\\x1 VV -> len VV >= 0 && len VV <= len x1 && len VV <= len x1>"
333:23-333:25::ds_d3fU :: "{v : [a] | len v >= 0}"
341:1-341:10::quickSort :: "forall a. (Ord a) => [a] -> (IncList a)"
341:23-341:26::Emp :: "forall a. (IncList a)"
342:23-342:29::append :: "forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"
342:30-342:37::lessers :: "{v : (IncList {VV : a | VV < x}) | v == lessers}"
342:38-342:46::greaters :: "{v : (IncList {VV : a | VV >= x}) | v == greaters}"
344:5-344:12::lessers :: "(IncList {VV : a | VV < x})"
344:23-344:32::quickSort :: "forall a. (Ord a) => [a] -> (IncList a)"
344:33-344:54::lq_anf__d3i6 :: "{v : [{VV : a | VV < x}] | len v >= 0 && len v <= len xs}"
344:34-344:35::ds_d3fy :: "a"
344:43-344:45::xs :: "{v : [a] | v == xs && len v >= 0}"
344:47-344:48::ds_d3fy :: "a"
344:49-344:50::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 < v}"
344:51-344:52::x :: "{VV : a | VV == x}"
345:5-345:13::greaters :: "(IncList {VV : a | VV >= x})"
345:23-345:32::quickSort :: "forall a. (Ord a) => [a] -> (IncList a)"
345:33-345:54::lq_anf__d3i1 :: "{v : [{VV : a | VV >= x}] | len v >= 0 && len v <= len xs}"
345:34-345:35::ds_d3fC :: "a"
345:43-345:45::xs :: "{v : [a] | v == xs && len v >= 0}"
345:47-345:48::ds_d3fC :: "a"
345:49-345:51::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 >= v}"
345:52-345:53::x :: "{VV : a | VV == x}"
348:1-348:7::append :: "forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"
348:18-348:20::ys :: "(IncList a)"
348:23-348:25::ys :: "{v : (IncList a) | v == ys}"
349:23-349:24::x :: "{VV : a | VV == x}"
349:25-349:27::_ :: "x1:a\n-> x2:(IncList {VV : a | x1 <= VV})\n-> {v : (IncList a) | hd v == x1 && tl v == x2}"
349:28-349:34::append :: "forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"
349:35-349:37::xs :: "{v : (IncList {VV : a | x <= VV}) | v == xs}"
349:38-349:40::ys :: "{v : (IncList a) | v == ys}"
360:21-360:25::root :: "forall a. (BST a) -> a"
361:21-361:25::left :: "forall a. (BST a) -> (BST a)"
362:21-362:26::right :: "forall a. (BST a) -> (BST a)"
392:1-392:6::okBST :: "(BST Int)"
392:10-392:14::_ :: "x1:Int\n-> x2:(BST {v : Int | v < x1})\n-> x3:(BST {v : Int | x1 < v})\n-> {v : (BST Int) | left v == x2 && root v == x1 && right v == x3}"
392:15-392:16::lq_anf__d3hC :: "{v : Int | v == (6  :  int)}"
393:15-393:19::_ :: "x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"
393:20-393:21::lq_anf__d3hD :: "{v : Int | v == (2  :  int)}"
394:19-394:23::_ :: "x1:{v : Int | v == 1 && v > 0}\n-> x2:(BST {v : Int | v == 1 && v > 0 && v < x1})\n-> x3:(BST {v : Int | v == 1 && v > 0 && x1 < v})\n-> {v : (BST {v : Int | v == 1 && v > 0}) | left v == x2 && root v == x1 && right v == x3}"
394:24-394:25::lq_anf__d3hE :: "{v : Int | v == (1  :  int)}"
394:26-394:30::lq_anf__d3hF :: "(BST {v : Int | false})"
394:31-394:35::lq_anf__d3hG :: "(BST {v : Int | false})"
395:19-395:23::_ :: "x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"
395:24-395:25::lq_anf__d3hI :: "{v : Int | v == (4  :  int)}"
395:26-395:30::lq_anf__d3hJ :: "(BST {v : Int | false})"
395:31-395:35::lq_anf__d3hK :: "(BST {v : Int | false})"
396:15-396:19::_ :: "x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"
396:20-396:21::lq_anf__d3hN :: "{v : Int | v == (9  :  int)}"
397:19-397:23::_ :: "x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"
397:24-397:25::lq_anf__d3hO :: "{v : Int | v == (7  :  int)}"
397:26-397:30::lq_anf__d3hP :: "(BST {v : Int | false})"
397:31-397:35::lq_anf__d3hQ :: "(BST {v : Int | false})"
398:18-398:22::lq_anf__d3hS :: "(BST {v : Int | false})"
428:1-428:7::badBST :: "(BST Int)"
428:11-428:15::_ :: "x1:Int\n-> x2:(BST {v : Int | v < x1})\n-> x3:(BST {v : Int | x1 < v})\n-> {v : (BST Int) | left v == x2 && root v == x1 && right v == x3}"
428:16-428:17::lq_anf__d3hk :: "{v : Int | v == (6  :  int)}"
429:15-429:19::_ :: "x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"
429:20-429:21::lq_anf__d3hl :: "{v : Int | v == (4  :  int)}"
430:19-430:23::_ :: "x1:{v : Int | v == 1 && v > 0}\n-> x2:(BST {v : Int | v == 1 && v > 0 && v < x1})\n-> x3:(BST {v : Int | v == 1 && v > 0 && x1 < v})\n-> {v : (BST {v : Int | v == 1 && v > 0}) | left v == x2 && root v == x1 && right v == x3}"
430:24-430:25::lq_anf__d3hm :: "{v : Int | v == (1  :  int)}"
430:26-430:30::lq_anf__d3hn :: "(BST {v : Int | false})"
430:31-430:35::lq_anf__d3ho :: "(BST {v : Int | false})"
431:19-431:23::_ :: "x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"
431:24-431:25::lq_anf__d3hq :: "{v : Int | v == (2  :  int)}"
431:26-431:30::lq_anf__d3hr :: "(BST {v : Int | false})"
431:31-431:35::lq_anf__d3hs :: "(BST {v : Int | false})"
432:15-432:19::_ :: "x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"
432:20-432:21::lq_anf__d3hv :: "{v : Int | v == (9  :  int)}"
433:19-433:23::_ :: "x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"
433:24-433:25::lq_anf__d3hw :: "{v : Int | v == (7  :  int)}"
433:26-433:30::lq_anf__d3hx :: "(BST {v : Int | false})"
433:31-433:35::lq_anf__d3hy :: "(BST {v : Int | false})"
434:18-434:22::lq_anf__d3hA :: "(BST {v : Int | false})"
446:1-446:4::mem :: "forall a. (Ord a) => a -> (BST a) -> Bool"
446:23-446:28::False :: "{v : Bool | not (Prop v) && v == GHC.Types.False}"
448:5-448:6::ds_d3fo :: "a"
448:7-448:9::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 == v}"
448:10-448:12::k' :: "{VV : a | VV == k'}"
448:23-448:27::True :: "{v : Bool | Prop v && v == GHC.Types.True}"
449:5-449:6::ds_d3fo :: "a"
449:7-449:8::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 < v}"
449:10-449:12::k' :: "{VV : a | VV == k'}"
449:23-449:26::mem :: "forall a. (Ord a) => a -> (BST a) -> Bool"
449:27-449:28::ds_d3fo :: "a"
449:29-449:30::l :: "{v : (BST {VV : a | VV < k'}) | v == l}"
450:23-450:26::mem :: "forall a. (Ord a) => a -> (BST a) -> Bool"
450:27-450:28::ds_d3fo :: "a"
450:29-450:30::r :: "{v : (BST {VV : a | k' < VV}) | v == r}"
458:1-458:4::one :: "forall a. a -> (BST a)"
458:5-458:6::x :: "a"
458:9-458:13::_ :: "x1:a\n-> x2:(BST {VV : a | VV < x1})\n-> x3:(BST {VV : a | x1 < VV})\n-> {v : (BST a) | left v == x2 && root v == x1 && right v == x3}"
458:14-458:15::x :: "{VV : a | VV == x}"
458:16-458:20::lq_anf__d3h2 :: "(BST {VV : a | false})"
458:21-458:25::lq_anf__d3h3 :: "(BST {VV : a | false})"
468:1-468:4::add :: "forall a. (Ord a) => a -> (BST a) -> (BST a)"
468:5-468:7::k' :: "a"
468:24-468:27::_ :: "{VV : a | VV == fix} -> (BST {VV : a | VV == fix})"
468:28-468:30::k' :: "{VV : a | VV == k'}"
470:5-470:7::k' :: "{VV : a | VV == k'}"
470:8-470:9::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 < v}"
470:10-470:11::k :: "{VV : a | VV == k}"
470:24-470:28::_ :: "x1:a\n-> x2:(BST {VV : a | VV < x1})\n-> x3:(BST {VV : a | x1 < VV})\n-> {v : (BST a) | left v == x2 && root v == x1 && right v == x3}"
470:29-470:30::k :: "{VV : a | VV == k}"
470:32-470:35::add :: "forall a. (Ord a) => a -> (BST a) -> (BST a)"
470:36-470:38::k' :: "{VV : a | VV == k'}"
470:39-470:40::l :: "{v : (BST {VV : a | VV < k}) | v == l}"
470:42-470:43::r :: "{v : (BST {VV : a | k < VV}) | v == r}"
471:5-471:6::k :: "{VV : a | VV == k}"
471:8-471:9::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 < v}"
471:10-471:12::k' :: "{VV : a | VV == k'}"
471:24-471:28::_ :: "x1:a\n-> x2:(BST {VV : a | VV < x1})\n-> x3:(BST {VV : a | x1 < VV})\n-> {v : (BST a) | left v == x2 && root v == x1 && right v == x3}"
471:29-471:30::k :: "{VV : a | VV == k}"
471:31-471:32::l :: "{v : (BST {VV : a | VV < k}) | v == l}"
471:34-471:37::add :: "forall a. (Ord a) => a -> (BST a) -> (BST a)"
471:38-471:40::k' :: "{VV : a | VV == k'}"
471:41-471:42::r :: "{v : (BST {VV : a | k < VV}) | v == r}"
472:24-472:25::_ :: "(BST a)"
486:23-486:29::minElt :: "forall a. (MinPair a) -> a"
486:36-486:40::rest :: "forall a. (MinPair a) -> (BST a)"
500:1-500:7::delMin :: "forall a. (Ord a) => (BST a) -> (MinPair a)"
500:26-500:28::_ :: "x1:a\n-> x2:(BST {VV : a | x1 < VV})\n-> {v : (MinPair a) | minElt v == x1 && rest v == x2}"
500:29-500:30::k :: "{VV : a | VV == k}"
500:31-500:32::r :: "{v : (BST {VV : a | k < VV}) | v == r}"
501:26-501:28::_ :: "x1:a\n-> x2:(BST {VV : a | x1 < VV})\n-> {v : (MinPair a) | minElt v == x1 && rest v == x2}"
501:29-501:31::k' :: "{VV : a | VV == k' && VV == fix && VV < k}"
501:33-501:37::_ :: "x1:{VV : a | VV > fix && VV > fix}\n-> x2:(BST {VV : a | VV > fix && VV > fix && VV < x1})\n-> x3:(BST {VV : a | VV > fix && VV > fix && x1 < VV})\n-> {v : (BST {VV : a | VV > fix && VV > fix}) | left v == x2 && root v == x1 && right v == x3}"
501:38-501:39::k :: "{VV : a | VV == k}"
501:40-501:42::l' :: "{v : (BST {VV : a | VV > fix && VV > fix && VV < k}) | v == l' && v == fix}"
501:43-501:44::r :: "{v : (BST {VV : a | k < VV}) | v == r}"
503:8-503:10::k' :: "{VV : a | VV == fix && VV < k}"
503:11-503:13::l' :: "{VV : (BST {VV : a | VV > fix && VV > fix && VV < k}) | VV == fix}"
503:26-503:32::delMin :: "forall a. (Ord a) => (BST a) -> (MinPair a)"
503:33-503:34::ds_d3gf :: "(BST {VV : a | VV < k})"
504:26-504:29::_ :: "{v : [Char] | false} -> (MinPair a)"
504:30-504:72::lq_anf__d3jI :: "{v : [Char] | len v >= 0}"
513:1-513:4::del :: "forall a. (Ord a) => a -> (BST a) -> (BST a)"
513:5-513:7::k' :: "a"
513:8-513:9::t :: "(BST a)"
513:25-513:34::undefined :: "forall a. a"
514:25-514:26::_ :: "{v : (BST a) | v == t}"
527:1-527:8::bstSort :: "forall a. (Ord a) => [a] -> (IncList a)"
527:13-527:22::lq_anf__d3hd :: "(BST a) -> (IncList a)"
527:23-527:24::_ :: "((BST a) -> (IncList a))\n-> ([a] -> (BST a)) -> [a] -> exists [(BST a)].(IncList a)"
527:25-527:30::lq_anf__d3he :: "[a] -> (BST a)"
530:1-530:6::toBST :: "forall a. (Ord a) => [a] -> (BST a)"
530:13-530:18::_ :: "(a -> (BST a) -> (BST a)) -> (BST a) -> [a] -> (BST a)"
530:19-530:22::lq_anf__d3hb :: "a -> (BST a) -> (BST a)"
530:23-530:27::lq_anf__d3hc :: "(BST a)"
533:1-533:10::toIncList :: "forall a. (BST a) -> (IncList a)"
533:13-533:22::undefined :: "forall a. a"