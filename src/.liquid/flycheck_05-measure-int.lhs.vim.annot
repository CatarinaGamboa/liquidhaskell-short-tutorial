27:1-27:4::die :: "forall a. {v : [Char] | false} -> a"
27:5-27:8::msg :: "{v : [Char] | false}"
27:11-27:16::_ :: "[Char] -> a"
27:17-27:20::msg :: "{v : [Char] | false}"
71:21-71:25::vDim :: "forall a. (Vector a) -> Int"
72:21-72:26::vElts :: "forall a. (Vector a) -> [a]"
74:25-74:27::$fEqVector :: "forall a. (Eq a) => (Eq (Vector a))"
76:21-76:25::mRow :: "forall a. (Matrix a) -> Int"
77:21-77:25::mCol :: "forall a. (Matrix a) -> Int"
78:21-78:26::mElts :: "forall a. (Matrix a) -> (Vector (Vector a))"
80:25-80:27::$fEqMatrix :: "forall a. (Eq a) => (Eq (Matrix a))"
88:1-88:8::dotProd :: "forall a. (Num a) => (Vector a) -> (Vector a) -> a"
88:9-88:11::vx :: "(Vector a)"
88:12-88:14::vy :: "(Vector a)"
88:17-88:20::_ :: "[a] -> a"
88:22-88:26::_ :: "x1:[a]\n-> {v : [a] | size v == size x1} -> {v : [a] | size v == size x1}"
88:27-88:29::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
88:30-88:32::ys :: "{v : [a] | v == ys && len v >= 0 && 0 <= size v}"
90:5-90:9::prod :: "x1:[a]\n-> {v : [a] | size v == size x1} -> {v : [a] | size v == size x1}"
90:17-90:24::zipWith :: "forall a b c.\n(a -> b -> c)\n-> x4:[a]\n-> {v : [b] | size v == size x4}\n-> {v : [c] | size v == size x4}"
90:26-90:39::lq_anf__d1XS :: "x1:a\n-> x2:a\n-> {VV : a | x1 > 0 && x2 > 0 => VV >= x1 && VV >= x2 && x1 > 1 && x2 > 1 => VV > x1 && VV > x2 && x1 == 0 || x2 == 0 => VV == 0}"
90:27-90:28::x :: "a"
90:29-90:30::y :: "a"
90:34-90:35::x :: "{VV : a | VV == x}"
90:36-90:37::_ :: "x1:a\n-> x2:a\n-> {VV : a | x1 > 0 && x2 > 0 => VV >= x1 && VV >= x2 && x1 > 1 && x2 > 1 => VV > x1 && VV > x2 && x1 == 0 || x2 == 0 => VV == 0}"
90:38-90:39::y :: "{VV : a | VV == y}"
91:5-91:7::xs :: "[a]"
91:17-91:22::_ :: "(Vector a) -> [a]"
91:23-91:25::vx :: "{v : (Vector a) | v == vx}"
92:5-92:7::ys :: "[a]"
92:17-92:22::_ :: "(Vector a) -> [a]"
92:23-92:25::vy :: "{v : (Vector a) | v == vy}"
102:1-102:8::matProd :: "forall a. (Num a) => (Matrix a) -> (Matrix a) -> (Matrix a)"
103:20-103:21::_ :: "x1:{v : Int | 0 < v}\n-> x2:{v : Int | 0 < v}\n-> x3:{v : (Vector {v : (Vector a) | vDim v == x2}) | vDim v == x1}\n-> {v : (Matrix a) | mElts v == x3 && mRow v == x1 && mCol v == x2}"
103:22-103:24::rx :: "{v : Int | v == rx && 0 < v}"
103:25-103:27::cy :: "{v : Int | v == cy && 0 < v}"
103:28-103:32::elts :: "{v : (Vector {v : (Vector a) | vDim v == vDim ys && vDim v > 0}) | v == elts && vDim v == rx && vDim v == vDim xs && vDim v > 0}"
105:5-105:9::elts :: "{v : (Vector {v : (Vector a) | vDim v == vDim ys && vDim v > 0}) | vDim v == rx && vDim v == vDim xs && vDim v > 0}"
105:20-105:23::_ :: "x1:(Vector {v : (Vector a) | vDim v > 0})\n-> ({v : (Vector a) | vDim v > 0}\n    -> {v : (Vector a) | vDim v == vDim ys && vDim v > 0})\n-> {v : (Vector {v : (Vector a) | vDim v == vDim ys && vDim v > 0}) | vDim v == vDim x1}"
105:24-105:26::xs :: "{v : (Vector (Vector a)) | v == xs && vDim v == rx}"
105:27-105:28::_ :: "(({v : (Vector a) | vDim v > 0}\n  -> {v : (Vector a) | vDim v == vDim ys && vDim v > 0})\n -> {v : (Vector {v : (Vector a) | vDim v == vDim ys && vDim v > 0}) | vDim v == rx && vDim v == vDim xs && vDim v > 0})\n-> ({v : (Vector a) | vDim v > 0}\n    -> {v : (Vector a) | vDim v == vDim ys && vDim v > 0})\n-> {v : (Vector {v : (Vector a) | vDim v == vDim ys && vDim v > 0}) | vDim v == rx && vDim v == vDim xs && vDim v > 0}"
105:30-105:32::xi :: "{VV : (Vector a) | vDim VV > 0}"
106:22-106:25::_ :: "x1:(Vector (Vector a))\n-> ((Vector a) -> a) -> {v : (Vector a) | vDim v == vDim x1}"
106:26-106:28::ys :: "{v : (Vector {v : (Vector a) | vDim v == cy}) | v == ys}"
106:29-106:30::_ :: "(((Vector a) -> a)\n -> {v : (Vector a) | vDim v == vDim ys && vDim v > 0})\n-> ((Vector a) -> a)\n-> {v : (Vector a) | vDim v == vDim ys && vDim v > 0}"
106:32-106:34::yj :: "(Vector a)"
107:24-107:31::_ :: "(Vector a) -> (Vector a) -> a"
107:32-107:34::xi :: "{v : (Vector a) | v == xi && vDim v > 0}"
107:35-107:37::yj :: "{v : (Vector a) | v == yj}"
114:1-114:4::for :: "forall a b.\nx1:(Vector b) -> (b -> a) -> {v : (Vector a) | vDim v == vDim x1}"
114:14-114:15::f :: "a -> b"
114:18-114:19::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [a] | size v == x1}\n-> {v : (Vector a) | vElts v == x2 && vDim v == x1}"
114:20-114:21::n :: "{v : Int | v == n && v >= 0}"
114:23-114:26::map :: "forall a b. (a -> b) -> x3:[a] -> {v : [b] | size v == size x3}"
114:27-114:28::f :: "a -> b"
114:29-114:31::xs :: "{v : [a] | v == xs && size v == n && len v >= 0 && 0 <= size v}"
163:1-163:5::size :: "forall a. [a] -> {v : Int | v >= 0}"
163:15-163:16::lq_anf__d1YM :: "{v : Int | v == (1  :  int)}"
163:17-163:18::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
163:19-163:23::size :: "forall a. [a] -> {v : Int | v >= 0}"
163:24-163:26::rs :: "{v : [a] | v == rs && len v >= 0 && 0 <= size v}"
164:15-164:16::I# :: "x1:Int# -> {v : Int | v == (x1  :  int)}"
187:1-187:9::notEmpty :: "forall a. x1:[a] -> {VV : Bool | Prop VV <=> notEmpty x1}"
187:18-187:23::False :: "{v : Bool | not (Prop v) && v == GHC.Types.False}"
188:18-188:22::True :: "{v : Bool | Prop v && v == GHC.Types.True}"
244:1-244:4::map :: "forall a b. (a -> b) -> x3:[a] -> {v : [b] | size v == size x3}"
244:16-244:18::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
245:16-245:17::_ :: "a -> b"
245:18-245:19::x :: "{VV : a | VV == x}"
245:20-245:21::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
245:22-245:25::map :: "forall a b. (a -> b) -> x3:[a] -> {v : [b] | size v == size x3}"
245:26-245:27::ds_d1Tn :: "a -> b"
245:28-245:30::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
260:1-260:8::zipWith :: "forall a b c.\n(a -> b -> c)\n-> x4:[a]\n-> {v : [b] | size v == size x4}\n-> {v : [c] | size v == size x4}"
260:9-260:10::f :: "a -> b -> c"
260:27-260:28::_ :: "a -> b -> c"
260:29-260:30::a :: "{VV : a | VV == a}"
260:31-260:32::b :: "{VV : a | VV == b}"
260:33-260:34::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
260:35-260:42::zipWith :: "forall a b c.\n(a -> b -> c)\n-> x4:[a]\n-> {v : [b] | size v == size x4}\n-> {v : [c] | size v == size x4}"
260:43-260:44::f :: "a -> b -> c"
260:45-260:47::as :: "{v : [a] | v == as && len v >= 0 && 0 <= size v}"
260:48-260:50::bs :: "{v : [a] | v == bs && len v >= 0 && 0 <= size v}"
261:27-261:29::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
262:27-262:30::_ :: "{v : [Char] | false} -> {v : [a] | false}"
262:31-262:47::lq_anf__d1Xe :: "{v : [Char] | len v >= 0 && 0 <= size v}"
272:1-272:4::zip :: "forall a b.\nx1:[a]\n-> x2:[b]\n-> {v : [(a, b)] | not (size x1 < size x2) => size v == size x2 && size x1 < size x2 => size v == size x1}"
272:21-272:27::lq_anf__d1X0 :: "{v : (a, b) | first v == a && second v == b && x_Tuple22 v == b && x_Tuple21 v == a && fst v == a && snd v == b}"
272:22-272:23::a :: "{VV : a | VV == a}"
272:25-272:26::b :: "{VV : a | VV == b}"
272:28-272:29::_ :: "x1:(a, b)\n-> x2:[(a, b)]\n-> {v : [(a, b)] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
272:30-272:33::zip :: "forall a b.\nx1:[a]\n-> x2:[b]\n-> {v : [(a, b)] | not (size x1 < size x2) => size v == size x2 && size x1 < size x2 => size v == size x1}"
272:34-272:36::as :: "{v : [a] | v == as && len v >= 0 && 0 <= size v}"
272:37-272:39::bs :: "{v : [a] | v == bs && len v >= 0 && 0 <= size v}"
273:21-273:23::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
274:21-274:23::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
293:1-293:10::zipOrNull :: "forall a b. [a] -> [b] -> [(a, b)]"
293:19-293:21::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
294:19-294:21::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
295:19-295:26::zipWith :: "forall a b c.\n(a -> b -> c)\n-> x4:[a]\n-> {v : [b] | size v == size x4}\n-> {v : [c] | size v == size x4}"
295:27-295:30::lq_anf__d1Xj :: "x1:a\n-> x2:b\n-> {v : (a, b) | first v == x1 && second v == x2 && x_Tuple22 v == x2 && x_Tuple21 v == x1 && fst v == x1 && snd v == x2}"
295:31-295:33::ds_d1TH :: "{v : [a] | len v >= 0 && 0 <= size v}"
295:34-295:36::ds_d1TI :: "{v : [a] | len v >= 0 && 0 <= size v}"
298:1-298:6::test1 :: "{v : [(Integer, Bool)] | size v == 2}"
298:13-298:22::_ :: "[Integer] -> [Bool] -> [(Integer, Bool)]"
298:23-298:29::lq_anf__d1Xs :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
298:30-298:43::lq_anf__d1Xv :: "{v : [Bool] | notEmpty v <=> true && null v <=> false && xListSelector v == GHC.Types.True && len v >= 0 && 0 <= size v}"
298:31-298:35::True :: "{v : Bool | Prop v && v == GHC.Types.True}"
298:37-298:42::False :: "{v : Bool | not (Prop v) && v == GHC.Types.False}"
301:1-301:6::test2 :: "forall a. {v : [(a, Bool)] | size v == 0}"
301:13-301:22::_ :: "[a] -> [Bool] -> [(a, Bool)]"
301:23-301:25::lq_anf__d1Xw :: "{v : [a] | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0 && len v >= 0 && 0 <= size v}"
301:26-301:39::lq_anf__d1Xz :: "{v : [Bool] | notEmpty v <=> true && null v <=> false && xListSelector v == GHC.Types.True && len v >= 0 && 0 <= size v}"
301:27-301:31::True :: "{v : Bool | Prop v && v == GHC.Types.True}"
301:33-301:38::False :: "{v : Bool | not (Prop v) && v == GHC.Types.False}"
304:1-304:6::test3 :: "forall a. {v : [([Char], a)] | size v == 0}"
304:13-304:22::_ :: "[[Char]] -> [a] -> [([Char], a)]"
304:23-304:37::lq_anf__d1XE :: "{v : [[Char]] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
304:24-304:29::lq_anf__d1XA :: "{v : [Char] | len v >= 0 && 0 <= size v}"
304:31-304:36::lq_anf__d1XB :: "{v : [Char] | len v >= 0 && 0 <= size v}"
304:38-304:40::lq_anf__d1XF :: "{v : [a] | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0 && len v >= 0 && 0 <= size v}"
316:1-316:8::reverse :: "forall a. x1:[a] -> {v : [a] | size v == size x1}"
316:9-316:11::xs :: "[a]"
316:21-316:23::_ :: "[a] -> [a] -> [a]"
316:24-316:26::lq_anf__d1WU :: "{v : [a] | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0 && len v >= 0 && 0 <= size v}"
316:27-316:29::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
319:5-319:7::go :: "forall a. [a] -> [a] -> [a]"
319:8-319:11::acc :: "[a]"
319:21-319:24::acc :: "{v : [a] | v == acc && len v >= 0 && 0 <= size v}"
320:21-320:23::go :: "[a] -> [a] -> [a]"
320:25-320:26::x :: "{VV : a | VV == x}"
320:26-320:27::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
320:27-320:30::acc :: "{v : [a] | v == acc && len v >= 0 && 0 <= size v}"
320:32-320:34::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
334:1-334:6::take' :: "forall a.\nx1:{v : Int | v >= 0}\n-> {VV : [a] | x1 <= size VV} -> {v : [a] | size v == x1}"
334:18-334:20::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
335:18-335:19::x :: "{VV : a | VV == x}"
335:20-335:21::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
335:22-335:27::take' :: "forall a.\nx1:{v : Int | v >= 0}\n-> {VV : [a] | x1 <= size VV} -> {v : [a] | size v == x1}"
335:29-335:30::ds_d1TY :: "{v : Int | v >= 0}"
335:30-335:31::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
335:31-335:32::lq_anf__d1Za :: "{v : Int | v == (1  :  int)}"
335:34-335:36::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
336:18-336:21::_ :: "{v : [Char] | false} -> {v : [a] | false}"
336:22-336:37::lq_anf__d1Z9 :: "{v : [Char] | len v >= 0 && 0 <= size v}"
346:1-346:5::drop :: "forall a. Int -> [a] -> [a]"
346:8-346:10::xs :: "[a]"
346:17-346:19::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
347:17-347:21::drop :: "forall a. Int -> [a] -> [a]"
347:23-347:24::ds_d1U5 :: "Int"
347:24-347:25::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
347:25-347:26::lq_anf__d1Zh :: "{v : Int | v == (1  :  int)}"
347:28-347:30::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
348:17-348:20::_ :: "{v : [Char] | false} -> [a]"
348:21-348:35::lq_anf__d1Zg :: "{v : [Char] | len v >= 0 && 0 <= size v}"
351:1-351:6::test4 :: "{v : [[Char]] | size v == 2}"
351:9-351:13::drop :: "forall a. Int -> [a] -> [a]"
351:14-351:15::lq_anf__d1Zj :: "{v : Int | v == (1  :  int)}"
351:16-351:39::lq_anf__d1Zq :: "{v : [[Char]] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
351:17-351:22::lq_anf__d1Zk :: "{v : [Char] | len v >= 0 && 0 <= size v}"
351:24-351:29::lq_anf__d1Zl :: "{v : [Char] | len v >= 0 && 0 <= size v}"
351:31-351:38::lq_anf__d1Zm :: "{v : [Char] | len v >= 0 && 0 <= size v}"
360:1-360:5::take :: "forall a. Int -> [a] -> [a]"
360:18-360:20::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
361:18-361:20::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
362:18-362:19::x :: "{VV : a | VV == x}"
362:20-362:21::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
362:22-362:26::take :: "forall a. Int -> [a] -> [a]"
362:28-362:29::ds_d1Tb :: "Int"
362:29-362:30::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
362:30-362:31::lq_anf__d1Zu :: "{v : Int | v == (1  :  int)}"
362:33-362:35::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
365:1-365:6::test5 :: "[{v : [[Char]] | size v == 2}]"
365:11-365:15::take :: "forall a. Int -> [a] -> [a]"
365:16-365:17::lq_anf__d1Zx :: "{v : Int | v == (2  :  int)}"
365:19-365:42::lq_anf__d1ZE :: "{v : [[Char]] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
365:20-365:25::lq_anf__d1Zy :: "{v : [Char] | len v >= 0 && 0 <= size v}"
365:27-365:32::lq_anf__d1Zz :: "{v : [Char] | len v >= 0 && 0 <= size v}"
365:34-365:41::lq_anf__d1ZA :: "{v : [Char] | len v >= 0 && 0 <= size v}"
366:11-366:15::take :: "forall a. Int -> [a] -> [a]"
366:16-366:18::lq_anf__d1ZG :: "{v : Int | v == (20  :  int)}"
366:19-366:34::lq_anf__d1ZL :: "{v : [[Char]] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
366:20-366:25::lq_anf__d1ZH :: "{v : [Char] | len v >= 0 && 0 <= size v}"
366:27-366:33::lq_anf__d1ZI :: "{v : [Char] | len v >= 0 && 0 <= size v}"
373:1-373:10::partition :: "forall a.\n(a -> Bool)\n-> x3:[a]\n-> {v : ([a], [a]) | size first v + size second v == size x3}"
373:22-373:30::(,) :: "forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x8 VV -> p2 x8> | first v == x1 && second v == x2 && x_Tuple22 v == x2 && x_Tuple21 v == x1 && fst v == x1 && snd v == x2}"
373:23-373:25::lq_anf__d1WI :: "{v : [a] | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0 && len v >= 0 && 0 <= size v}"
373:27-373:29::lq_anf__d1WJ :: "{v : [a] | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0 && len v >= 0 && 0 <= size v}"
375:5-375:6::_ :: "a -> Bool"
375:7-375:8::x :: "{VV : a | VV == x}"
375:22-375:32::(,) :: "forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x8 VV -> p2 x8> | first v == x1 && second v == x2 && x_Tuple22 v == x2 && x_Tuple21 v == x1 && fst v == x1 && snd v == x2}"
375:23-375:24::x :: "{VV : a | VV == x}"
375:24-375:25::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
375:25-375:27::ys :: "{v : [a] | v == ys && v == ys && size v == size ys && len v == len ys && len v >= 0 && 0 <= size v}"
375:29-375:31::zs :: "{v : [a] | v == zs && v == zs && size v == size zs && len v == len zs && len v >= 0 && 0 <= size v}"
376:22-376:32::(,) :: "forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x8 VV -> p2 x8> | first v == x1 && second v == x2 && x_Tuple22 v == x2 && x_Tuple21 v == x1 && fst v == x1 && snd v == x2}"
376:23-376:25::ys :: "{v : [a] | v == ys && v == ys && size v == size ys && len v == len ys && len v >= 0 && 0 <= size v}"
376:27-376:28::x :: "{VV : a | VV == x}"
376:28-376:29::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
376:29-376:31::zs :: "{v : [a] | v == zs && v == zs && size v == size zs && len v == len zs && len v >= 0 && 0 <= size v}"
378:6-378:8::ys :: "{VV : [a] | VV == ys && size VV == size ys && len VV == len ys && len VV >= 0}"
378:10-378:12::zs :: "{VV : [a] | VV == zs && size VV == size zs && len VV == len zs && len VV >= 0}"
378:22-378:31::partition :: "forall a.\n(a -> Bool)\n-> x3:[a]\n-> {v : ([a], [a]) | size first v + size second v == size x3}"
378:32-378:33::ds_d1T2 :: "a -> Bool"
378:34-378:36::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
387:1-387:6::first :: "forall a b. x1:(a, b) -> {VV : a | VV == first x1}"
387:17-387:18::x :: "{VV : a | VV == x}"
390:1-390:7::second :: "forall a b. x1:(a, b) -> {VV : b | VV == second x1}"
390:17-390:18::y :: "{VV : a | VV == y}"
412:1-412:10::quickSort :: "forall a. (Ord a) => x2:[a] -> {v : [a] | size v == size x2}"
412:20-412:22::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x6 VV -> p x6> | notEmpty v <=> false && null v <=> true && size v == 0 && len v == 0}"
413:20-413:29::undefined :: "forall a. a"
416:1-416:7::test10 :: "{v : [[Char]] | size v == 2}"
416:10-416:19::_ :: "x1:[[Char]] -> {v : [[Char]] | size v == size x1}"
416:20-416:25::test4 :: "{v : [[Char]] | v == NumericMeasures.test4 && size v == 2 && len v >= 0 && 0 <= size v}"
437:1-437:6::okVec :: "(Vector Integer)"
437:10-437:11::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Integer] | size v == x1}\n-> {v : (Vector Integer) | vElts v == x2 && vDim v == x1}"
437:12-437:13::lq_anf__d1Wy :: "{v : Int | v == (2  :  int)}"
437:14-437:22::lq_anf__d1WD :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
439:1-439:7::badVec :: "(Vector Integer)"
439:10-439:11::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Integer] | size v == x1}\n-> {v : (Vector Integer) | vElts v == x2 && vDim v == x1}"
439:12-439:13::lq_anf__d1Wq :: "{v : Int | v == (2  :  int)}"
439:14-439:26::lq_anf__d1Wx :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
446:1-446:6::vCons :: "forall a.\na -> x2:(Vector a) -> {v : (Vector a) | vDim v == vDim x2 + 1}"
446:7-446:8::x :: "a"
446:20-446:21::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [a] | size v == x1}\n-> {v : (Vector a) | vElts v == x2 && vDim v == x1}"
446:23-446:24::n :: "{v : Int | v == n && v >= 0}"
446:24-446:25::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
446:25-446:26::lq_anf__d1Wn :: "{v : Int | v == (1  :  int)}"
446:29-446:30::x :: "{VV : a | VV == x}"
446:30-446:31::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && size v == 1 + size x2 && len v == 1 + len x2 && xsListSelector v == x2}"
446:31-446:33::xs :: "{v : [a] | v == xs && size v == n && len v >= 0 && 0 <= size v}"
451:1-451:4::vHd :: "forall a. {v : (Vector a) | vDim v > 0} -> a"
451:19-451:20::x :: "{VV : a | VV == x}"
452:19-452:22::_ :: "{v : [Char] | false} -> a"
452:23-452:29::lq_anf__d1XL :: "{v : [Char] | len v >= 0 && 0 <= size v}"
455:1-455:4::vTl :: "forall a.\nx1:{v : (Vector a) | vDim v > 0}\n-> {v : (Vector a) | vDim v == vDim x1 - 1}"
455:20-455:21::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [a] | size v == x1}\n-> {v : (Vector a) | vElts v == x2 && vDim v == x1}"
455:23-455:24::n :: "{v : Int | v == n && v >= 0}"
455:24-455:25::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
455:25-455:26::lq_anf__d1XP :: "{v : Int | v == (1  :  int)}"
455:28-455:30::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
456:19-456:22::_ :: "{v : [Char] | false} -> {v : (Vector a) | false}"
456:23-456:29::lq_anf__d1XO :: "{v : [Char] | len v >= 0 && 0 <= size v}"
478:1-478:5::vBin :: "forall a b c.\n(a -> b -> c)\n-> x4:(Vector a)\n-> {v : (Vector b) | vDim v == vDim x4}\n-> {v : (Vector c) | vDim v == vDim x4}"
478:6-478:8::op :: "a -> b -> c"
478:29-478:30::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [a] | size v == x1}\n-> {v : (Vector a) | vElts v == x2 && vDim v == x1}"
478:31-478:32::n :: "{v : Int | v == n && v >= 0}"
478:34-478:41::zipWith :: "forall a b c.\n(a -> b -> c)\n-> x4:[a]\n-> {v : [b] | size v == size x4}\n-> {v : [c] | size v == size x4}"
478:42-478:44::op :: "a -> b -> c"
478:45-478:47::xs :: "{v : [a] | v == xs && size v == n && len v >= 0 && 0 <= size v}"
478:48-478:50::ys :: "{v : [a] | v == ys && len v >= 0 && 0 <= size v}"
486:1-486:11::dotProduct :: "forall a.\n(Num a) =>\nx2:(Vector a) -> {v : (Vector a) | vDim v == vDim x2} -> a"
486:12-486:13::x :: "(Vector a)"
486:14-486:15::y :: "{v : (Vector a) | vDim v == vDim x}"
486:18-486:21::lq_anf__d1Y0 :: "[a] -> a"
486:22-486:23::_ :: "([a] -> a) -> [a] -> a"
486:24-486:29::lq_anf__d1Y1 :: "(Vector a) -> [a]"
486:30-486:31::_ :: "((Vector a) -> [a]) -> (Vector a) -> [a]"
486:32-486:36::_ :: "(a -> a -> a)\n-> x4:(Vector a)\n-> (Vector a)\n-> {v : (Vector a) | vDim v == vDim x4}"
486:37-486:40::lq_anf__d1Y2 :: "x1:a\n-> x2:a\n-> {VV : a | x1 > 0 && x2 > 0 => VV >= x1 && VV >= x2 && x1 > 1 && x2 > 1 => VV > x1 && VV > x2 && x1 == 0 || x2 == 0 => VV == 0}"
486:41-486:42::x :: "{v : (Vector a) | v == x}"
486:43-486:44::y :: "{v : (Vector a) | v == y && vDim v == vDim x}"
495:1-495:12::vecFromList :: "forall a. [a] -> (Vector a)"
495:13-495:15::xs :: "[a]"
495:19-495:28::undefined :: "forall a. a"
497:1-497:6::test6 :: "Integer"
497:10-497:20::_ :: "x1:(Vector Integer)\n-> {v : (Vector Integer) | vDim v == vDim x1} -> Integer"
497:21-497:23::vx :: "{v : (Vector Integer) | v == vx}"
497:24-497:26::vy :: "{v : (Vector Integer) | v == vy}"
499:5-499:7::vx :: "(Vector Integer)"
499:10-499:21::_ :: "[Integer] -> (Vector Integer)"
499:22-499:29::lq_anf__d1YK :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
500:5-500:7::vy :: "(Vector Integer)"
500:10-500:21::_ :: "[Integer] -> (Vector Integer)"
500:22-500:29::lq_anf__d1YD :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
540:1-540:5::ok23 :: "(Matrix Integer)"
540:13-540:14::_ :: "x1:{v : Int | 0 < v}\n-> x2:{v : Int | 0 < v}\n-> x3:{v : (Vector {v : (Vector Integer) | vDim v == x2}) | vDim v == x1}\n-> {v : (Matrix Integer) | mElts v == x3 && mRow v == x1 && mCol v == x2}"
540:15-540:16::lq_anf__d1VX :: "{v : Int | v == (2  :  int)}"
540:17-540:18::lq_anf__d1VY :: "{v : Int | v == (3  :  int)}"
540:20-540:21::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [{v : (Vector Integer) | vDim v > 0}] | size v == x1}\n-> {v : (Vector {v : (Vector Integer) | vDim v > 0}) | vElts v == x2 && vDim v == x1}"
540:22-540:23::lq_anf__d1VZ :: "{v : Int | v == (2  :  int)}"
540:26-540:27::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Integer] | size v == x1}\n-> {v : (Vector Integer) | vElts v == x2 && vDim v == x1}"
540:28-540:29::lq_anf__d1W0 :: "{v : Int | v == (3  :  int)}"
540:30-540:39::lq_anf__d1W7 :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
541:26-541:27::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Integer] | size v == x1}\n-> {v : (Vector Integer) | vElts v == x2 && vDim v == x1}"
541:28-541:29::lq_anf__d1W9 :: "{v : Int | v == (3  :  int)}"
541:30-541:39::lq_anf__d1Wg :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
549:1-549:5::bad1 :: "(Matrix Int)"
549:8-549:9::_ :: "x1:{v : Int | 0 < v}\n-> x2:{v : Int | 0 < v}\n-> x3:{v : (Vector {v : (Vector Int) | vDim v == x2}) | vDim v == x1}\n-> {v : (Matrix Int) | mElts v == x3 && mRow v == x1 && mCol v == x2}"
549:10-549:11::lq_anf__d1VA :: "{v : Int | v == (2  :  int)}"
549:12-549:13::lq_anf__d1VB :: "{v : Int | v == (3  :  int)}"
549:15-549:16::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [{v : (Vector Int) | vDim v > 0}] | size v == x1}\n-> {v : (Vector {v : (Vector Int) | vDim v > 0}) | vElts v == x2 && vDim v == x1}"
549:17-549:18::lq_anf__d1VC :: "{v : Int | v == (2  :  int)}"
549:21-549:22::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Int] | size v == x1}\n-> {v : (Vector Int) | vElts v == x2 && vDim v == x1}"
549:23-549:24::lq_anf__d1VD :: "{v : Int | v == (3  :  int)}"
549:25-549:34::lq_anf__d1VI :: "{v : [Int] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
549:26-549:27::lq_anf__d1VE :: "{v : Int | v == (1  :  int)}"
549:29-549:30::lq_anf__d1VF :: "{v : Int | v == (2  :  int)}"
550:21-550:22::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Int] | size v == x1}\n-> {v : (Vector Int) | vElts v == x2 && vDim v == x1}"
550:23-550:24::lq_anf__d1VK :: "{v : Int | v == (3  :  int)}"
550:25-550:34::lq_anf__d1VR :: "{v : [Int] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
550:26-550:27::lq_anf__d1VL :: "{v : Int | v == (4  :  int)}"
550:29-550:30::lq_anf__d1VM :: "{v : Int | v == (5  :  int)}"
550:32-550:33::lq_anf__d1VN :: "{v : Int | v == (6  :  int)}"
553:1-553:5::bad2 :: "(Matrix Int)"
553:8-553:9::_ :: "x1:{v : Int | 0 < v}\n-> x2:{v : Int | 0 < v}\n-> x3:{v : (Vector {v : (Vector Int) | vDim v == x2}) | vDim v == x1}\n-> {v : (Matrix Int) | mElts v == x3 && mRow v == x1 && mCol v == x2}"
553:10-553:11::lq_anf__d1Vf :: "{v : Int | v == (2  :  int)}"
553:12-553:13::lq_anf__d1Vg :: "{v : Int | v == (3  :  int)}"
553:15-553:16::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [{v : (Vector Int) | vDim v > 0}] | size v == x1}\n-> {v : (Vector {v : (Vector Int) | vDim v > 0}) | vElts v == x2 && vDim v == x1}"
553:17-553:18::lq_anf__d1Vh :: "{v : Int | v == (2  :  int)}"
553:21-553:22::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Int] | size v == x1}\n-> {v : (Vector Int) | vElts v == x2 && vDim v == x1}"
553:23-553:24::lq_anf__d1Vi :: "{v : Int | v == (2  :  int)}"
553:25-553:31::lq_anf__d1Vn :: "{v : [Int] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
553:26-553:27::lq_anf__d1Vj :: "{v : Int | v == (1  :  int)}"
553:29-553:30::lq_anf__d1Vk :: "{v : Int | v == (2  :  int)}"
554:21-554:22::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Int] | size v == x1}\n-> {v : (Vector Int) | vElts v == x2 && vDim v == x1}"
554:23-554:24::lq_anf__d1Vp :: "{v : Int | v == (2  :  int)}"
554:25-554:31::lq_anf__d1Vu :: "{v : [Int] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
554:26-554:27::lq_anf__d1Vq :: "{v : Int | v == (4  :  int)}"
554:29-554:30::lq_anf__d1Vr :: "{v : Int | v == (5  :  int)}"
561:1-561:12::matFromList :: "forall a. [[a]] -> (Maybe (Matrix a))"
561:20-561:27::Nothing :: "forall a. {v : (Maybe a) | isJust v <=> false}"
563:5-563:7::_ :: "{v : Bool | false}"
563:20-563:24::_ :: "x1:(Matrix a)\n-> {v : (Maybe (Matrix a)) | isJust v <=> true && fromJust v == x1}"
563:26-563:27::_ :: "x1:{v : Int | 0 < v}\n-> x2:{v : Int | 0 < v}\n-> x3:{v : (Vector {v : (Vector a) | vDim v == x2}) | vDim v == x1}\n-> {v : (Matrix a) | mElts v == x3 && mRow v == x1 && mCol v == x2}"
563:28-563:29::r :: "{v : Int | v == r && v >= 0}"
563:30-563:31::c :: "{v : Int | v == c && v >= 0}"
563:32-563:34::lq_anf__d1YR :: "{v : (Vector {v : (Vector a) | false}) | false}"
564:20-564:27::_ :: "{v : (Maybe (Matrix a)) | isJust v <=> false}"
566:5-566:6::r :: "{v : Int | v >= 0}"
566:20-566:24::size :: "forall a. [a] -> {v : Int | v >= 0}"
566:25-566:28::ds_d1Tu :: "{v : [[a]] | len v >= 0 && 0 <= size v}"
567:5-567:6::c :: "{v : Int | v >= 0}"
567:20-567:24::size :: "forall a. [a] -> {v : Int | v >= 0}"
567:25-567:27::xs :: "{v : [a] | v == xs && len v >= 0 && 0 <= size v}"
568:5-568:7::ok :: "forall a. {VV : a | false}"
568:20-568:29::_ :: "{VV : a | false}"
569:5-569:7::vs :: "forall a. {VV : a | false}"
569:20-569:29::_ :: "{VV : a | false}"
579:1-579:6::mat23 :: "(Maybe {v : (Matrix Integer) | mRow v == 2 && mCol v == 2})"
579:13-579:24::_ :: "[[Integer]] -> (Maybe (Matrix Integer))"
579:27-579:33::lq_anf__d1YX :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
580:27-580:33::lq_anf__d1Z2 :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
614:1-614:11::matProduct :: "forall a.\n(Num a) =>\nx2:(Matrix a)\n-> x3:{y : (Matrix a) | mCol x2 == mRow y}\n-> {v : (Matrix a) | mRow v == mRow x2 && mCol v == mCol x3}"
614:24-614:26::my :: "(Matrix a)"
615:20-615:21::_ :: "x1:{v : Int | 0 < v}\n-> x2:{v : Int | 0 < v}\n-> x3:{v : (Vector {v : (Vector a) | vDim v == x2}) | vDim v == x1}\n-> {v : (Matrix a) | mElts v == x3 && mRow v == x1 && mCol v == x2}"
615:22-615:24::rx :: "{v : Int | v == rx && 0 < v}"
615:25-615:27::cy :: "{v : Int | v == cy && 0 < v}"
615:28-615:32::elts :: "{v : (Vector {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0}) | v == elts && vDim v == rx && vDim v == vDim xs && vDim v > 0}"
617:5-617:9::elts :: "{v : (Vector {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0}) | vDim v == rx && vDim v == vDim xs && vDim v > 0}"
617:20-617:23::_ :: "x1:(Vector {v : (Vector a) | vDim v > 0})\n-> ({v : (Vector a) | vDim v > 0}\n    -> {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0})\n-> {v : (Vector {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0}) | vDim v == vDim x1}"
617:24-617:26::xs :: "{v : (Vector (Vector a)) | v == xs && vDim v == rx}"
617:27-617:28::_ :: "(({v : (Vector a) | vDim v > 0}\n  -> {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0})\n -> {v : (Vector {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0}) | vDim v == rx && vDim v == vDim xs && vDim v > 0})\n-> ({v : (Vector a) | vDim v > 0}\n    -> {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0})\n-> {v : (Vector {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0}) | vDim v == rx && vDim v == vDim xs && vDim v > 0}"
617:30-617:32::xi :: "{VV : (Vector a) | vDim VV > 0}"
618:22-618:25::_ :: "x1:(Vector {v : (Vector a) | vDim v == vDim xi && vDim v > 0})\n-> ({v : (Vector a) | vDim v == vDim xi && vDim v > 0} -> a)\n-> {v : (Vector a) | vDim v == vDim x1}"
618:26-618:29::ys' :: "{v : (Vector {v : (Vector a) | vDim v > 0}) | v == ys' && vDim v == cy && vDim v > 0}"
618:30-618:31::_ :: "(({v : (Vector a) | vDim v == vDim xi && vDim v > 0} -> a)\n -> {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0})\n-> ({v : (Vector a) | vDim v == vDim xi && vDim v > 0} -> a)\n-> {v : (Vector a) | vDim v == cy && vDim v == vDim fix && vDim v > 0}"
618:33-618:35::yj :: "{VV : (Vector a) | vDim VV == vDim xi && vDim VV > 0}"
619:24-619:34::_ :: "x1:(Vector a) -> {v : (Vector a) | vDim v == vDim x1} -> a"
619:35-619:37::xi :: "{v : (Vector a) | v == xi && vDim v > 0}"
619:38-619:40::yj :: "{v : (Vector a) | v == yj && vDim v == vDim xi && vDim v > 0}"
620:11-620:14::ys' :: "{VV : (Vector {VV : (Vector a) | vDim VV > 0}) | vDim VV == cy && vDim VV > 0}"
620:20-620:29::_ :: "x1:(Matrix a)\n-> {v : (Matrix a) | mRow v == mCol x1 && mCol v == mRow x1}"
620:30-620:32::lq_anf__d1Y6 :: "{v : (Matrix a) | v == my && mCol v == cy}"
629:1-629:5::ok32 :: "(Matrix Integer)"
629:8-629:9::_ :: "x1:{v : Int | 0 < v}\n-> x2:{v : Int | 0 < v}\n-> x3:{v : (Vector {v : (Vector Integer) | vDim v == x2}) | vDim v == x1}\n-> {v : (Matrix Integer) | mElts v == x3 && mRow v == x1 && mCol v == x2}"
629:10-629:11::lq_anf__d1UM :: "{v : Int | v == (3  :  int)}"
629:12-629:13::lq_anf__d1UN :: "{v : Int | v == (2  :  int)}"
629:15-629:16::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [{v : (Vector Integer) | vDim v > 0}] | size v == x1}\n-> {v : (Vector {v : (Vector Integer) | vDim v > 0}) | vElts v == x2 && vDim v == x1}"
629:17-629:18::lq_anf__d1UO :: "{v : Int | v == (3  :  int)}"
629:21-629:22::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Integer] | size v == x1}\n-> {v : (Vector Integer) | vElts v == x2 && vDim v == x1}"
629:23-629:24::lq_anf__d1UP :: "{v : Int | v == (2  :  int)}"
629:25-629:31::lq_anf__d1UU :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
630:21-630:22::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Integer] | size v == x1}\n-> {v : (Vector Integer) | vElts v == x2 && vDim v == x1}"
630:23-630:24::lq_anf__d1UW :: "{v : Int | v == (2  :  int)}"
630:25-630:31::lq_anf__d1V1 :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
631:21-631:22::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : [Integer] | size v == x1}\n-> {v : (Vector Integer) | vElts v == x2 && vDim v == x1}"
631:23-631:24::lq_anf__d1V3 :: "{v : Int | v == (2  :  int)}"
631:25-631:31::lq_anf__d1V8 :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0 && 0 <= size v}"
642:1-642:10::transpose :: "forall a.\nx1:(Matrix a)\n-> {v : (Matrix a) | mRow v == mCol x1 && mCol v == mRow x1}"
642:26-642:27::_ :: "x1:{v : Int | 0 < v}\n-> x2:{v : Int | 0 < v}\n-> x3:{v : (Vector {v : (Vector a) | vDim v == x2}) | vDim v == x1}\n-> {v : (Matrix a) | mElts v == x3 && mRow v == x1 && mCol v == x2}"
642:28-642:29::c :: "{v : Int | v == c && 0 < v}"
642:30-642:31::r :: "{v : Int | v == r && 0 < v}"
642:32-642:33::_ :: "({v : (Vector {v : (Vector a) | vDim v == r && vDim v == vDim rows && vDim v > 0}) | vDim v == c && vDim v > 0}\n -> (Matrix a))\n-> {v : (Vector {v : (Vector a) | vDim v == r && vDim v == vDim rows && vDim v > 0}) | vDim v == c && vDim v > 0}\n-> (Matrix a)"
642:34-642:38::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : Int | v >= 0}\n-> {v : (Vector {v : (Vector a) | vDim v == x1}) | vDim v == x2}\n-> {v : (Vector {v : (Vector a) | vDim v == x2}) | vDim v == x1}"
642:39-642:40::c :: "{v : Int | v == c && 0 < v}"
642:41-642:42::r :: "{v : Int | v == r && 0 < v}"
642:43-642:47::rows :: "{v : (Vector {v : (Vector a) | vDim v == c}) | v == rows && vDim v == r}"
647:1-647:5::txgo :: "forall a.\nx1:{v : Int | v >= 0}\n-> x2:{v : Int | v >= 0}\n-> {v : (Vector {v : (Vector a) | vDim v == x1}) | vDim v == x2}\n-> {v : (Vector {v : (Vector a) | vDim v == x2}) | vDim v == x1}"
647:6-647:7::c :: "{v : Int | v >= 0}"
647:8-647:9::r :: "{v : Int | v >= 0}"
647:10-647:14::rows :: "{v : (Vector {v : (Vector a) | vDim v == c}) | vDim v == r}"
647:17-647:26::undefined :: "forall a. a"