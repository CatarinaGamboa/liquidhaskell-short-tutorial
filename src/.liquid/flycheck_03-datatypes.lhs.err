{"o_errors":[],"o_vars":[],"o_bots":[],"o_types":[[{"spanInfo":{"startLine":173,"endLine":173,"endCol":45,"startCol":44,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:Int\n-> x2:Int\n-> {v : Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":26,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"startLine":333,"endLine":333,"endCol":22,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.split","forall a.\nx1:{VV : [a] | len VV >= 0}\n-> ({VV : [a] | VV == fst VV && len VV >= 0 && len VV <= len x1}, {VV : [a] | VV == snd VV && len VV >= 0 && len VV <= len x1})<\\x1 VV -> len VV >= 0 && len VV <= len x1 && len VV <= len x1>"]]],[{"spanInfo":{"startLine":429,"endLine":429,"endCol":21,"startCol":20,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hl","{v : Int | v == (4  :  int)}"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":21,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV >= y}\n-> x2:(IncList {VV : a | VV >= y && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= y}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":448,"endLine":448,"endCol":9,"startCol":7,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a -> x2:a -> {v : Bool | Prop v <=> x1 == v}"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":48,"startCol":47,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fC","a"]]],[{"spanInfo":{"startLine":429,"endLine":431,"endCol":36,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hu","(BST {v : Int | v > 0})"]]],[{"spanInfo":{"startLine":293,"endLine":293,"endCol":24,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"(a -> (IncList a) -> (IncList a))\n-> (IncList a) -> [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":206,"endLine":206,"endCol":5,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.plus","forall a. (Num a) => (Sparse a) -> (Sparse a) -> (Sparse a)"]]],[{"spanInfo":{"startLine":256,"endLine":256,"endCol":29,"startCol":11,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iN","{v : Integer | v == 2}"]]],[{"spanInfo":{"startLine":449,"endLine":449,"endCol":6,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fo","a"]]],[{"spanInfo":{"startLine":394,"endLine":394,"endCol":35,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hH","(BST {v : Int | v == 1 && v > 0})"]]],[{"spanInfo":{"startLine":468,"endLine":468,"endCol":7,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","a"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":33,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV > y && VV >= x}\n-> x2:(IncList {VV : a | VV > y && VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV > y && VV >= x}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":501,"endLine":501,"endCol":39,"startCol":38,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k","{VV : a | VV == k}"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":12,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"{v : Bool | Prop v <=> k < k'}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":37,"startCol":36,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"]]],[{"spanInfo":{"startLine":449,"endLine":449,"endCol":30,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["l","{v : (BST {VV : a | VV < k'}) | v == l}"]]],[{"spanInfo":{"startLine":285,"endLine":285,"endCol":35,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":37,"startCol":36,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{v : (Vector Int) | v == x && 0 <= vlen v}"]]],[{"spanInfo":{"startLine":256,"endLine":256,"endCol":25,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Integer | v > 0}\n-> x2:(IncList {v : Integer | v > 0 && x1 <= v})\n-> {v : (IncList {v : Integer | v > 0}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":527,"endLine":527,"endCol":8,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.bstSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":329,"endLine":329,"endCol":10,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.mergeSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":44,"startCol":39,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jj","Int"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":16,"startCol":11,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"[Char] -> a"]]],[{"spanInfo":{"startLine":316,"endLine":316,"endCol":19,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : (IncList a) | v == xs}"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":40,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"Int -> [(Int, [Char])] -> (Maybe (Sparse [Char]))"]]],[{"spanInfo":{"startLine":209,"endLine":209,"endCol":16,"startCol":12,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"(Sparse Int) -> (Sparse Int) -> (Sparse Int)"]]],[{"spanInfo":{"startLine":158,"endLine":158,"endCol":31,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["sum","{v : Int | v == sum}"]]],[{"spanInfo":{"startLine":500,"endLine":500,"endCol":30,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k","{VV : a | VV == k}"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":23,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : [a] | v == xs && v == xs && len v == len xs && len v >= 0 && len v >= len ys && len v <= len zs}"]]],[{"spanInfo":{"startLine":331,"endLine":331,"endCol":36,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","{v : [a] | v == ys && v == ys && len v == len ys && len v >= 0 && len v >= len zs}"]]],[{"spanInfo":{"startLine":256,"endLine":256,"endCol":29,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iS","(IncList {v : Integer | v > 0})"]]],[{"spanInfo":{"startLine":395,"endLine":395,"endCol":35,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hL","(BST {v : Int | v > 0})"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":45,"startCol":43,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : [a] | v == xs && len v >= 0}"]]],[{"spanInfo":{"startLine":503,"endLine":503,"endCol":10,"startCol":8,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == fix && VV < k}"]]],[{"spanInfo":{"startLine":446,"endLine":446,"endCol":4,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.mem","forall a. (Ord a) => a -> (BST a) -> Bool"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":29,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3k5","{v : Int | v == (1  :  int)}"]]],[{"spanInfo":{"startLine":296,"endLine":296,"endCol":28,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"a"]]],[{"spanInfo":{"startLine":513,"endLine":513,"endCol":7,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","a"]]],[{"spanInfo":{"startLine":129,"endLine":129,"endCol":25,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jA","({v : Int | v == 0}, [Char])"]]],[{"spanInfo":{"startLine":155,"endLine":155,"endCol":24,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"Int\n-> {v : [({v : Int | v >= 0}, Int)] | len v >= 0 && len v <= len y}\n-> Int"]]],[{"spanInfo":{"startLine":428,"endLine":428,"endCol":17,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hk","{v : Int | v == (6  :  int)}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":30,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : (IncList {VV : a | x <= VV}) | v == xs}"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":54,"startCol":33,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3i6","{v : [{VV : a | VV < x}] | len v >= 0 && len v <= len xs}"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":9,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["vec1","(Sparse Int)"]]],[{"spanInfo":{"startLine":392,"endLine":392,"endCol":6,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.okBST","(BST Int)"]]],[{"spanInfo":{"startLine":503,"endLine":503,"endCol":32,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.delMin","forall a. (Ord a) => (BST a) -> (MinPair a)"]]],[{"spanInfo":{"startLine":431,"endLine":431,"endCol":35,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hs","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":32,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.quickSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":30,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["GHC.Tuple.(,)","forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x6 VV -> p2 x6> | fst v == x1 && x_Tuple22 v == x2 && snd v == x2 && x_Tuple21 v == x1}"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":26,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV >= y}\n-> x2:(IncList {VV : a | VV >= y && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= y}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":293,"endLine":293,"endCol":12,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.insertSort'","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":527,"endLine":527,"endCol":24,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"((BST a) -> (IncList a))\n-> ([a] -> (BST a)) -> [a] -> exists [(BST a)].(IncList a)"]]],[{"spanInfo":{"startLine":432,"endLine":432,"endCol":19,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":34,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : (IncList {VV : a | x <= VV}) | v == xs}"]]],[{"spanInfo":{"startLine":458,"endLine":458,"endCol":20,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3h2","(BST {VV : a | false})"]]],[{"spanInfo":{"startLine":360,"endLine":360,"endCol":25,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.root","forall a. (BST a) -> a"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":11,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"startLine":75,"endLine":75,"endCol":27,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.spDim","forall a. (Sparse a) -> Int"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":14,"startCol":12,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v >= 0}\n-> x2:[({v : Int | v < x1 && 0 <= v}, Int)]\n-> {v : (Sparse Int) | spDim v == x1 && spElems v == x2}"]]],[{"spanInfo":{"startLine":448,"endLine":448,"endCol":27,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["GHC.Types.True","{v : Bool | Prop v && v == GHC.Types.True}"]]],[{"spanInfo":{"startLine":503,"endLine":503,"endCol":34,"startCol":33,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3gf","(BST {VV : a | VV < k})"]]],[{"spanInfo":{"startLine":468,"endLine":468,"endCol":30,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == k'}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":6,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":9,"startCol":8,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a -> x2:a -> {v : Bool | Prop v <=> x1 < v}"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":42,"startCol":41,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["r","{v : (BST {VV : a | k < VV}) | v == r}"]]],[{"spanInfo":{"startLine":254,"endLine":254,"endCol":7,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.okList","(IncList Integer)"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":40,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ha","(BST {VV : a | VV < k})"]]],[{"spanInfo":{"startLine":501,"endLine":501,"endCol":44,"startCol":33,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jO","{v : (BST {VV : a | VV > fix && VV > fix}) | left v == l' && root v == k && right v == r}"]]],[{"spanInfo":{"startLine":348,"endLine":348,"endCol":20,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","(IncList a)"]]],[{"spanInfo":{"startLine":295,"endLine":295,"endCol":7,"startCol":6,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["f","forall a. a"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":8,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["msg","{v : [Char] | false}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":39,"startCol":37,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","{v : (IncList {VV : a | y <= VV}) | v == ys}"]]],[{"spanInfo":{"startLine":393,"endLine":393,"endCol":19,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":397,"endLine":397,"endCol":35,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hR","(BST {v : Int | v > 0})"]]],[{"spanInfo":{"startLine":430,"endLine":430,"endCol":25,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hm","{v : Int | v == (1  :  int)}"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":13,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["greaters","(IncList {VV : a | VV >= x})"]]],[{"spanInfo":{"startLine":514,"endLine":514,"endCol":26,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"{v : (BST a) | v == t}"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":40,"startCol":39,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["l","{v : (BST {VV : a | VV < k}) | v == l}"]]],[{"spanInfo":{"startLine":331,"endLine":331,"endCol":36,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iy","(IncList a)"]]],[{"spanInfo":{"startLine":171,"endLine":171,"endCol":34,"startCol":30,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["body","Int -> ({v : Int | v >= 0}, Int) -> Int"]]],[{"spanInfo":{"startLine":285,"endLine":285,"endCol":38,"startCol":36,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : (IncList {VV : a | x <= VV}) | v == xs}"]]],[{"spanInfo":{"startLine":458,"endLine":458,"endCol":6,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","a"]]],[{"spanInfo":{"startLine":206,"endLine":206,"endCol":9,"startCol":8,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","(Sparse a)"]]],[{"spanInfo":{"startLine":395,"endLine":395,"endCol":30,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hJ","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":42,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3h9","(BST {VV : a | VV > k})"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":9,"startCol":7,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a -> x2:a -> {v : Bool | Prop v <=> x1 <= v}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":30,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["go","Int\n-> {VV : [({VV : Int | VV >= 0}, Int)] | len VV >= 0 && len VV <= len y}\n-> Int"]]],[{"spanInfo":{"startLine":271,"endLine":271,"endCol":11,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.insertSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":501,"endLine":501,"endCol":42,"startCol":40,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["l'","{v : (BST {VV : a | VV > fix && VV > fix && VV < k}) | v == l' && v == fix}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":24,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jC","{v : [Char] | len v >= 0}"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":33,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3kh","({v : Int | v > 0}, Int)"]]],[{"spanInfo":{"startLine":503,"endLine":503,"endCol":13,"startCol":11,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["l'","{VV : (BST {VV : a | VV > fix && VV > fix && VV < k}) | VV == fix}"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":34,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iK","{v : (IncList {VV : a | VV >= y && VV >= x}) | hd v == x && tl v == xs}"]]],[{"spanInfo":{"startLine":513,"endLine":513,"endCol":9,"startCol":8,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["t","(BST a)"]]],[{"spanInfo":{"startLine":341,"endLine":341,"endCol":10,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.quickSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":349,"endLine":349,"endCol":24,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":428,"endLine":428,"endCol":7,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.badBST","(BST Int)"]]],[{"spanInfo":{"startLine":394,"endLine":394,"endCol":35,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hG","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":308,"endLine":308,"endCol":25,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3il","{v : [{VV : a | false}] | null v <=> true && len v == 0 && len v >= 0}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":42,"startCol":41,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:(Vector Int) -> {v : Int | v >= 0 && v < vlen x1} -> Int"]]],[{"spanInfo":{"startLine":129,"endLine":129,"endCol":24,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jz","{v : [Char] | len v >= 0}"]]],[{"spanInfo":{"startLine":393,"endLine":393,"endCol":21,"startCol":20,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hD","{v : Int | v == (2  :  int)}"]]],[{"spanInfo":{"startLine":254,"endLine":254,"endCol":29,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iX","(IncList {v : Integer | v > 0})"]]],[{"spanInfo":{"startLine":308,"endLine":308,"endCol":26,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["GHC.Tuple.(,)","forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x6 VV -> p2 x6> | fst v == x1 && x_Tuple22 v == x2 && snd v == x2 && x_Tuple21 v == x1}"]]],[{"spanInfo":{"startLine":433,"endLine":433,"endCol":25,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hw","{v : Int | v == (7  :  int)}"]]],[{"spanInfo":{"startLine":393,"endLine":395,"endCol":36,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hM","(BST {v : Int | v > 0})"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":44,"startCol":43,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["i","{v : Int | v == i && v >= 0}"]]],[{"spanInfo":{"startLine":209,"endLine":209,"endCol":6,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.test2","{v : (Sparse Int) | spDim v == 3}"]]],[{"spanInfo":{"startLine":394,"endLine":394,"endCol":23,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v == 1 && v > 0}\n-> x2:(BST {v : Int | v == 1 && v > 0 && v < x1})\n-> x3:(BST {v : Int | v == 1 && v > 0 && x1 < v})\n-> {v : (BST {v : Int | v == 1 && v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":6,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.split","forall a.\nx1:{VV : [a] | len VV >= 0}\n-> ({VV : [a] | VV == fst VV && len VV >= 0 && len VV <= len x1}, {VV : [a] | VV == snd VV && len VV >= 0 && len VV <= len x1})<\\x1 VV -> len VV >= 0 && len VV <= len x1 && len VV <= len x1>"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":35,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fC","a"]]],[{"spanInfo":{"startLine":155,"endLine":155,"endCol":8,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.dotProd","x1:(Vector Int) -> {v : (Sparse Int) | spDim v == vlen x1} -> Int"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":11,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"{v : Bool | Prop v <=> y <= x}"]]],[{"spanInfo":{"startLine":348,"endLine":348,"endCol":7,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.append","forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":34,"startCol":33,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"]]],[{"spanInfo":{"startLine":533,"endLine":533,"endCol":22,"startCol":13,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["GHC.Err.undefined","forall a. a"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":53,"startCol":52,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":13,"startCol":12,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jn","{v : Int | v == (5  :  int)}"]]],[{"spanInfo":{"startLine":533,"endLine":533,"endCol":10,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.toIncList","forall a. (BST a) -> (IncList a)"]]],[{"spanInfo":{"startLine":129,"endLine":129,"endCol":17,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jy","{v : Int | v == (0  :  int)}"]]],[{"spanInfo":{"startLine":308,"endLine":308,"endCol":21,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fL","{v : [a] | len v >= 0}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":40,"startCol":39,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{v : (Vector Int) | v == x && 0 <= vlen v}"]]],[{"spanInfo":{"startLine":256,"endLine":256,"endCol":15,"startCol":13,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:Integer\n-> x2:(IncList {v : Integer | x1 <= v})\n-> {v : (IncList Integer) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":282,"endLine":282,"endCol":26,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV == y}\n-> x2:(IncList {VV : a | VV == y && x1 <= VV})\n-> {v : (IncList {VV : a | VV == y}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":25,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ke","({v : Int | v == 0}, Int)"]]],[{"spanInfo":{"startLine":331,"endLine":331,"endCol":51,"startCol":39,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iz","(IncList a)"]]],[{"spanInfo":{"startLine":342,"endLine":342,"endCol":37,"startCol":30,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lessers","{v : (IncList {VV : a | VV < x}) | v == lessers}"]]],[{"spanInfo":{"startLine":500,"endLine":500,"endCol":32,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["r","{v : (BST {VV : a | k < VV}) | v == r}"]]],[{"spanInfo":{"startLine":448,"endLine":448,"endCol":6,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fo","a"]]],[{"spanInfo":{"startLine":316,"endLine":316,"endCol":6,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.merge","forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":53,"startCol":47,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"Bool"]]],[{"spanInfo":{"startLine":333,"endLine":333,"endCol":25,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fU","{v : [a] | len v >= 0}"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":16,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3k1","{v : Int | v == (3  :  int)}"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":30,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":282,"endLine":282,"endCol":30,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iG","(IncList {VV : a | false})"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":40,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3if","(IncList {VV : a | VV >= x})"]]],[{"spanInfo":{"startLine":349,"endLine":349,"endCol":40,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hV","(IncList a)"]]],[{"spanInfo":{"startLine":395,"endLine":395,"endCol":23,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":472,"endLine":472,"endCol":25,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"(BST a)"]]],[{"spanInfo":{"startLine":397,"endLine":397,"endCol":30,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hP","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":7,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["go","Int\n-> {v : [({v : Int | v >= 0}, Int)] | len v >= 0 && len v <= len y}\n-> Int"]]],[{"spanInfo":{"startLine":307,"endLine":307,"endCol":26,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["zs","{v : [a] | v == zs && len v >= 0}"]]],[{"spanInfo":{"startLine":349,"endLine":349,"endCol":37,"startCol":35,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : (IncList {VV : a | x <= VV}) | v == xs}"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":50,"startCol":49,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a -> x2:a -> {v : Bool | Prop v <=> x1 < v}"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":11,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":317,"endLine":317,"endCol":19,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fE","(IncList a)"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":53,"startCol":51,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y'","{v : [({v : Int | v >= 0}, Int)] | v == y' && len v >= 0}"]]],[{"spanInfo":{"startLine":432,"endLine":432,"endCol":21,"startCol":20,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hv","{v : Int | v == (9  :  int)}"]]],[{"spanInfo":{"startLine":349,"endLine":349,"endCol":27,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:(IncList {VV : a | x1 <= VV})\n-> {v : (IncList a) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":272,"endLine":272,"endCol":29,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":36,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV >= y && VV >= x}\n-> x2:(IncList {VV : a | VV >= y && VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= y && VV >= x}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":20,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3k2","{v : Int | v == (0  :  int)}"]]],[{"spanInfo":{"startLine":129,"endLine":130,"endCol":27,"startCol":13,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jG","{v : [({v : Int | v == fst x21 && v >= 0}, [Char])]<\\x6 VV -> v /= x6> | null v <=> false && len v >= 0}"]]],[{"spanInfo":{"startLine":171,"endLine":171,"endCol":9,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.dotProd'","x1:(Vector Int) -> {v : (Sparse Int) | spDim v == vlen x1} -> Int"]]],[{"spanInfo":{"startLine":330,"endLine":330,"endCol":25,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iA","(IncList {VV : a | false})"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":23,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"startLine":330,"endLine":330,"endCol":21,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:(IncList {VV : a | x1 <= VV})\n-> {v : (IncList a) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":486,"endLine":486,"endCol":40,"startCol":36,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.rest","forall a. (MinPair a) -> (BST a)"]]],[{"spanInfo":{"startLine":331,"endLine":331,"endCol":48,"startCol":39,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.mergeSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":24,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3k4","({v : Int | v == 0}, Int)"]]],[{"spanInfo":{"startLine":155,"endLine":155,"endCol":28,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{v : [({v : Int | 0 <= v}, Int)] | v == y && len v >= 0}"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":34,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3kk","{v : [({v : Int | v == fst x15 && v >= 0}, Int)]<\\x6 VV -> v /= x6> | null v <=> false && len v >= 0}"]]],[{"spanInfo":{"startLine":171,"endLine":171,"endCol":11,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","(Vector Int)"]]],[{"spanInfo":{"startLine":331,"endLine":331,"endCol":33,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.mergeSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":342,"endLine":342,"endCol":29,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.append","forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":394,"endLine":394,"endCol":30,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hF","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":32,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3kg","{v : Int | v == (9  :  int)}"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":13,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["sum","Int"]]],[{"spanInfo":{"startLine":224,"endLine":224,"endCol":36,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.tl","forall a. (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":16,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3kb","{v : Int | v == (3  :  int)}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":25,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jD","({v : Int | v > 0}, [Char])"]]],[{"spanInfo":{"startLine":256,"endLine":256,"endCol":20,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Integer | v > 0}\n-> x2:(IncList {v : Integer | v > 0 && x1 <= v})\n-> {v : (IncList {v : Integer | v > 0}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":27,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.merge","forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":171,"endLine":171,"endCol":36,"startCol":35,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jf","{v : Int | v == (0  :  int)}"]]],[{"spanInfo":{"startLine":448,"endLine":448,"endCol":12,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == k'}"]]],[{"spanInfo":{"startLine":171,"endLine":171,"endCol":38,"startCol":37,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{v : [({v : Int | 0 <= v}, Int)] | v == y && len v >= 0}"]]],[{"spanInfo":{"startLine":486,"endLine":486,"endCol":29,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.minElt","forall a. (MinPair a) -> a"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":7,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == k'}"]]],[{"spanInfo":{"startLine":272,"endLine":272,"endCol":44,"startCol":42,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : [a] | v == xs && len v >= 0}"]]],[{"spanInfo":{"startLine":342,"endLine":342,"endCol":46,"startCol":38,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["greaters","{v : (IncList {VV : a | VV >= x}) | v == greaters}"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":69,"startCol":57,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3j6","(Int, [Char])"]]],[{"spanInfo":{"startLine":513,"endLine":513,"endCol":4,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.del","forall a. (Ord a) => a -> (BST a) -> (BST a)"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":36,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : (IncList {VV : a | x <= VV}) | v == xs}"]]],[{"spanInfo":{"startLine":530,"endLine":530,"endCol":6,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.toBST","forall a. (Ord a) => [a] -> (BST a)"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":43,"startCol":42,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["r","{v : (BST {VV : a | k < VV}) | v == r}"]]],[{"spanInfo":{"startLine":429,"endLine":429,"endCol":19,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":431,"endLine":431,"endCol":30,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hr","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":29,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ir","{v : [a] | null v <=> false && xListSelector v == y && xsListSelector v == ys && len v == 1 + len ys && len v >= 0}"]]],[{"spanInfo":{"startLine":432,"endLine":434,"endCol":22,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hB","(BST {v : Int | v > 0})"]]],[{"spanInfo":{"startLine":361,"endLine":361,"endCol":25,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.left","forall a. (BST a) -> (BST a)"]]],[{"spanInfo":{"startLine":397,"endLine":397,"endCol":35,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hQ","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":349,"endLine":349,"endCol":40,"startCol":38,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","{v : (IncList a) | v == ys}"]]],[{"spanInfo":{"startLine":333,"endLine":333,"endCol":12,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["zs","{VV : [a] | VV == zs && len VV == len zs && len VV >= 0 && len VV <= len ys && len VV <= len ys}"]]],[{"spanInfo":{"startLine":397,"endLine":397,"endCol":23,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":206,"endLine":206,"endCol":7,"startCol":6,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","(Sparse a)"]]],[{"spanInfo":{"startLine":129,"endLine":129,"endCol":5,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.okSP","(Sparse [Char])"]]],[{"spanInfo":{"startLine":394,"endLine":394,"endCol":25,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hE","{v : Int | v == (1  :  int)}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":26,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jq","({v : Int | v == 0}, [Char])"]]],[{"spanInfo":{"startLine":209,"endLine":209,"endCol":21,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["vec1","{v : (Sparse Int) | v == vec1}"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":30,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k","{VV : a | VV == k}"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":34,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3k6","{v : Int | v == (100  :  int)}"]]],[{"spanInfo":{"startLine":129,"endLine":129,"endCol":10,"startCol":8,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v >= 0}\n-> x2:[({v : Int | v < x1 && 0 <= v}, [Char])]\n-> {v : (Sparse [Char]) | spDim v == x1 && spElems v == x2}"]]],[{"spanInfo":{"startLine":256,"endLine":256,"endCol":8,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.badList","(IncList Integer)"]]],[{"spanInfo":{"startLine":530,"endLine":530,"endCol":18,"startCol":13,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"(a -> (BST a) -> (BST a)) -> (BST a) -> [a] -> (BST a)"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":28,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:(BST {VV : a | VV < x1})\n-> x3:(BST {VV : a | x1 < VV})\n-> {v : (BST a) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":282,"endLine":282,"endCol":9,"startCol":8,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","a"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":11,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k","{VV : a | VV == k}"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":12,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lessers","(IncList {VV : a | VV < x})"]]],[{"spanInfo":{"startLine":256,"endLine":256,"endCol":29,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iQ","(IncList {v : Integer | false})"]]],[{"spanInfo":{"startLine":333,"endLine":333,"endCol":8,"startCol":6,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","{VV : [a] | VV == ys && len VV == len ys && len VV >= 0 && len VV >= len zs}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":49,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jl","Int"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":32,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.quickSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":430,"endLine":430,"endCol":35,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ho","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":47,"startCol":46,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["v","{fix#v#39# : Int | v' == v}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":25,"startCol":20,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jp","{v : [Char] | len v >= 0}"]]],[{"spanInfo":{"startLine":449,"endLine":449,"endCol":8,"startCol":7,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a -> x2:a -> {v : Bool | Prop v <=> x1 < v}"]]],[{"spanInfo":{"startLine":193,"endLine":193,"endCol":30,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["GHC.Err.undefined","forall a. a"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":55,"startCol":45,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3j3","(Int, [Char])"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":45,"startCol":43,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : [a] | v == xs && len v >= 0}"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":39,"startCol":38,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:(Vector Int) -> {v : Int | v >= 0 && v < vlen x1} -> Int"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":20,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":49,"startCol":48,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["v","{fix#v#39# : Int | v' == v}"]]],[{"spanInfo":{"startLine":272,"endLine":272,"endCol":41,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.insertSort","forall a. (Ord a) => [a] -> (IncList a)"]]],[{"spanInfo":{"startLine":513,"endLine":513,"endCol":34,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["GHC.Err.undefined","forall a. a"]]],[{"spanInfo":{"startLine":397,"endLine":397,"endCol":25,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hO","{v : Int | v == (7  :  int)}"]]],[{"spanInfo":{"startLine":285,"endLine":285,"endCol":23,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":272,"endLine":272,"endCol":27,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.insert","forall a. (Ord a) => a -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":38,"startCol":36,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == k'}"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":41,"startCol":40,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["i","{v : Int | v == i && v >= 0}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":47,"startCol":46,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:Int\n-> x2:Int\n-> {v : Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"]]],[{"spanInfo":{"startLine":129,"endLine":129,"endCol":12,"startCol":11,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jx","{v : Int | v == (5  :  int)}"]]],[{"spanInfo":{"startLine":254,"endLine":254,"endCol":20,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Integer | v > 0}\n-> x2:(IncList {v : Integer | v > 0 && x1 <= v})\n-> {v : (IncList {v : Integer | v > 0}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":31,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV >= y && VV >= x}\n-> x2:(IncList {VV : a | VV >= y && VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= y && VV >= x}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":430,"endLine":430,"endCol":23,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v == 1 && v > 0}\n-> x2:(BST {v : Int | v == 1 && v > 0 && v < x1})\n-> x3:(BST {v : Int | v == 1 && v > 0 && x1 < v})\n-> {v : (BST {v : Int | v == 1 && v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":449,"endLine":449,"endCol":28,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fo","a"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":18,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jo","{v : Int | v == (0  :  int)}"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":51,"startCol":49,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a -> x2:a -> {v : Bool | Prop v <=> x1 >= v}"]]],[{"spanInfo":{"startLine":431,"endLine":431,"endCol":23,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":392,"endLine":392,"endCol":16,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hC","{v : Int | v == (6  :  int)}"]]],[{"spanInfo":{"startLine":285,"endLine":285,"endCol":33,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.insert","forall a. (Ord a) => a -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":396,"endLine":396,"endCol":21,"startCol":20,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hN","{v : Int | v == (9  :  int)}"]]],[{"spanInfo":{"startLine":433,"endLine":433,"endCol":30,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hx","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":35,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fy","a"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":52,"startCol":51,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":307,"endLine":307,"endCol":12,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","{VV : [a] | VV == ys && len VV == len ys && len VV >= 0 && len VV <= len xs && len VV <= len xs && len VV <= len zs}"]]],[{"spanInfo":{"startLine":193,"endLine":193,"endCol":18,"startCol":14,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["elts","[(Int, a)]"]]],[{"spanInfo":{"startLine":296,"endLine":296,"endCol":7,"startCol":6,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["b","forall a. a"]]],[{"spanInfo":{"startLine":254,"endLine":254,"endCol":29,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iW","(IncList {v : Integer | false})"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":6,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":11,"startCol":9,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v >= 0}\n-> x2:[({v : Int | v < x1 && 0 <= v}, [Char])]\n-> {v : (Sparse [Char]) | spDim v == x1 && spElems v == x2}"]]],[{"spanInfo":{"startLine":307,"endLine":307,"endCol":8,"startCol":6,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{VV : [a] | VV == xs && len VV == len xs && len VV >= 0 && len VV >= len ys && len VV <= len zs}"]]],[{"spanInfo":{"startLine":209,"endLine":209,"endCol":26,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["vec2","{v : (Sparse Int) | v == vec2}"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":24,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3kd","{v : Int | v == (12  :  int)}"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":35,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.add","forall a. (Ord a) => a -> (BST a) -> (BST a)"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":29,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","{v : [a] | v == ys && v == ys && len v == len ys && len v >= 0 && len v <= len xs && len v <= len xs && len v <= len zs}"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":48,"startCol":47,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fy","a"]]],[{"spanInfo":{"startLine":254,"endLine":254,"endCol":25,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Integer | v > 0}\n-> x2:(IncList {v : Integer | v > 0 && x1 <= v})\n-> {v : (IncList {v : Integer | v > 0}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":35,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["sum","{v : Int | v == sum}"]]],[{"spanInfo":{"startLine":307,"endLine":307,"endCol":23,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.split","forall a.\nx1:{VV : [a] | len VV >= 0}\n-> ({VV : [a] | VV == fst VV && len VV >= 0 && len VV <= len x1}, {VV : [a] | VV == snd VV && len VV >= 0 && len VV <= len x1})<\\x1 VV -> len VV >= 0 && len VV <= len x1 && len VV <= len x1>"]]],[{"spanInfo":{"startLine":449,"endLine":449,"endCol":26,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.mem","forall a. (Ord a) => a -> (BST a) -> Bool"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":35,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3k7","({v : Int | v == 1 && v > 0}, Int)"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":32,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["sum","{v : Int | v == sum}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":11,"startCol":8,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["sum","Int"]]],[{"spanInfo":{"startLine":254,"endLine":254,"endCol":29,"startCol":11,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iT","{v : Integer | v == 1}"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":70,"startCol":44,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3j9","{v : [(Int, [Char])] | null v <=> false && len v >= 0}"]]],[{"spanInfo":{"startLine":500,"endLine":500,"endCol":28,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:(BST {VV : a | x1 < VV})\n-> {v : (MinPair a) | minElt v == x1 && rest v == x2}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":33,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"startLine":449,"endLine":449,"endCol":12,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"Bool"]]],[{"spanInfo":{"startLine":527,"endLine":527,"endCol":22,"startCol":13,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hd","(BST a) -> (IncList a)"]]],[{"spanInfo":{"startLine":398,"endLine":398,"endCol":22,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hS","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":30,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k","{VV : a | VV == k}"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":20,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["msg","{v : [Char] | false}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":18,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":6,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k","{VV : a | VV == k}"]]],[{"spanInfo":{"startLine":53,"endLine":53,"endCol":4,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.die","forall a. {v : [Char] | false} -> a"]]],[{"spanInfo":{"startLine":193,"endLine":193,"endCol":13,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["dim","Int"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":32,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["l","{v : (BST {VV : a | VV < k}) | v == l}"]]],[{"spanInfo":{"startLine":331,"endLine":331,"endCol":22,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.merge","forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":29,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iZ","(Maybe (Sparse [Char])) -> (Sparse [Char])"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":11,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"{v : Bool | Prop v <=> k' < k}"]]],[{"spanInfo":{"startLine":430,"endLine":430,"endCol":30,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hn","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":431,"endLine":431,"endCol":25,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hq","{v : Int | v == (2  :  int)}"]]],[{"spanInfo":{"startLine":295,"endLine":295,"endCol":28,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"a"]]],[{"spanInfo":{"startLine":433,"endLine":433,"endCol":35,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hy","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":450,"endLine":450,"endCol":30,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["r","{v : (BST {VV : a | k' < VV}) | v == r}"]]],[{"spanInfo":{"startLine":458,"endLine":458,"endCol":15,"startCol":14,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":396,"endLine":398,"endCol":22,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hT","(BST {v : Int | v > 0})"]]],[{"spanInfo":{"startLine":330,"endLine":330,"endCol":18,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":138,"endLine":138,"endCol":25,"startCol":20,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3js","{v : [Char] | len v >= 0}"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":23,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iq","{v : [a] | null v <=> false && xListSelector v == x && xsListSelector v == xs && len v == 1 + len xs && len v >= 0}"]]],[{"spanInfo":{"startLine":468,"endLine":468,"endCol":27,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"{VV : a | VV == fix} -> (BST {VV : a | VV == fix})"]]],[{"spanInfo":{"startLine":282,"endLine":282,"endCol":23,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"startLine":138,"endLine":138,"endCol":18,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jr","{v : Int | v == (6  :  int)}"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":68,"startCol":61,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3j5","{v : [Char] | len v >= 0}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":21,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV >= x}\n-> x2:(IncList {VV : a | VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= x}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":193,"endLine":193,"endCol":9,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.fromList","forall a. Int -> [(Int, a)] -> (Maybe (Sparse a))"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":9,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["body","Int -> ({VV : Int | VV >= 0}, Int) -> Int"]]],[{"spanInfo":{"startLine":449,"endLine":449,"endCol":12,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == k'}"]]],[{"spanInfo":{"startLine":433,"endLine":433,"endCol":23,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":171,"endLine":171,"endCol":29,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"(Int -> ({v : Int | v >= 0}, Int) -> Int)\n-> Int -> [({v : Int | v >= 0}, Int)] -> Int"]]],[{"spanInfo":{"startLine":206,"endLine":206,"endCol":21,"startCol":12,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["GHC.Err.undefined","forall a. a"]]],[{"spanInfo":{"startLine":501,"endLine":501,"endCol":37,"startCol":33,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV > fix && VV > fix}\n-> x2:(BST {VV : a | VV > fix && VV > fix && VV < x1})\n-> x3:(BST {VV : a | VV > fix && VV > fix && x1 < VV})\n-> {v : (BST {VV : a | VV > fix && VV > fix}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":9,"startCol":8,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a -> x2:a -> {v : Bool | Prop v <=> x1 < v}"]]],[{"spanInfo":{"startLine":285,"endLine":285,"endCol":26,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{VV : a | VV >= x}\n-> x2:(IncList {VV : a | VV >= x && x1 <= VV})\n-> {v : (IncList {VV : a | VV >= x}) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":458,"endLine":458,"endCol":25,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3h3","(BST {VV : a | false})"]]],[{"spanInfo":{"startLine":224,"endLine":224,"endCol":27,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.hd","forall a. (IncList a) -> a"]]],[{"spanInfo":{"startLine":137,"endLine":137,"endCol":6,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.badSP","(Sparse [Char])"]]],[{"spanInfo":{"startLine":500,"endLine":500,"endCol":7,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.delMin","forall a. (Ord a) => (BST a) -> (MinPair a)"]]],[{"spanInfo":{"startLine":345,"endLine":345,"endCol":54,"startCol":33,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3i1","{v : [{VV : a | VV >= x}] | len v >= 0 && len v <= len xs}"]]],[{"spanInfo":{"startLine":501,"endLine":501,"endCol":44,"startCol":43,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["r","{v : (BST {VV : a | k < VV}) | v == r}"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":39,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ie","{v : (IncList {VV : a | VV >= y && VV >= x}) | hd v == y && tl v == ys}"]]],[{"spanInfo":{"startLine":293,"endLine":293,"endCol":28,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iE","(IncList a)"]]],[{"spanInfo":{"startLine":458,"endLine":458,"endCol":13,"startCol":9,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:(BST {VV : a | VV < x1})\n-> x3:(BST {VV : a | x1 < VV})\n-> {v : (BST a) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":37,"startCol":34,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.add","forall a. (Ord a) => a -> (BST a) -> (BST a)"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":27,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && xsListSelector v == x2 && len v == 1 + len x2}"]]],[{"spanInfo":{"startLine":316,"endLine":316,"endCol":9,"startCol":7,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","(IncList a)"]]],[{"spanInfo":{"startLine":293,"endLine":293,"endCol":26,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iD","a -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":9,"startCol":7,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a -> x2:a -> {v : Bool | Prop v <=> x1 <= v}"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":41,"startCol":36,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jd","Int"]]],[{"spanInfo":{"startLine":430,"endLine":430,"endCol":35,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hp","(BST {v : Int | v == 1 && v > 0})"]]],[{"spanInfo":{"startLine":348,"endLine":348,"endCol":25,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","{v : (IncList a) | v == ys}"]]],[{"spanInfo":{"startLine":305,"endLine":305,"endCol":21,"startCol":20,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:[a]\n-> {v : [a] | null v <=> false && xListSelector v == x1 && xsListSelector v == x2 && len v == 1 + len x2}"]]],[{"spanInfo":{"startLine":392,"endLine":392,"endCol":14,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:Int\n-> x2:(BST {v : Int | v < x1})\n-> x3:(BST {v : Int | x1 < v})\n-> {v : (BST Int) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":530,"endLine":530,"endCol":27,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hc","(BST a)"]]],[{"spanInfo":{"startLine":271,"endLine":271,"endCol":24,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.Emp","forall a. (IncList a)"]]],[{"spanInfo":{"startLine":138,"endLine":138,"endCol":26,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jt","({v : Int | v > 0}, [Char])"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":54,"startCol":49,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3j2","{v : [Char] | len v >= 0}"]]],[{"spanInfo":{"startLine":293,"endLine":293,"endCol":31,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","{v : [a] | v == xs && len v >= 0}"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":18,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["y","{VV : a | VV == y}"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":59,"startCol":58,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3j4","{v : Int | v == (2  :  int)}"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":40,"startCol":38,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == k'}"]]],[{"spanInfo":{"startLine":431,"endLine":431,"endCol":35,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ht","(BST {v : Int | v > 0})"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":27,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.merge","forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":157,"endLine":158,"endCol":31,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["go","Int\n-> {VV : [({VV : Int | VV >= 0}, Int)] | len VV >= 0 && len VV <= len y}\n-> Int"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":23,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3k3","{v : Int | v == (8  :  int)}"]]],[{"spanInfo":{"startLine":272,"endLine":272,"endCol":44,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iM","(IncList a)"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":43,"startCol":42,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3j0","{v : Int | v == (3  :  int)}"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":47,"startCol":46,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3j1","{v : Int | v == (0  :  int)}"]]],[{"spanInfo":{"startLine":450,"endLine":450,"endCol":26,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.mem","forall a. (Ord a) => a -> (BST a) -> Bool"]]],[{"spanInfo":{"startLine":395,"endLine":395,"endCol":35,"startCol":31,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hK","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":6,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.test1","{v : (Sparse [Char]) | spDim v == 3}"]]],[{"spanInfo":{"startLine":530,"endLine":530,"endCol":22,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hb","a -> (BST a) -> (BST a)"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":14,"startCol":12,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v >= 0}\n-> x2:[({v : Int | v < x1 && 0 <= v}, Int)]\n-> {v : (Sparse Int) | spDim v == x1 && spElems v == x2}"]]],[{"spanInfo":{"startLine":471,"endLine":471,"endCol":12,"startCol":10,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == k'}"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":31,"startCol":30,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"((Maybe (Sparse [Char])) -> (Sparse [Char]))\n-> (Maybe (Sparse [Char])) -> (Sparse [Char])"]]],[{"spanInfo":{"startLine":284,"endLine":284,"endCol":28,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","{VV : a | VV == x}"]]],[{"spanInfo":{"startLine":293,"endLine":293,"endCol":15,"startCol":13,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["xs","[a]"]]],[{"spanInfo":{"startLine":458,"endLine":458,"endCol":4,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.one","forall a. a -> (BST a)"]]],[{"spanInfo":{"startLine":501,"endLine":501,"endCol":31,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["k'","{VV : a | VV == k' && VV == fix && VV < k}"]]],[{"spanInfo":{"startLine":344,"endLine":344,"endCol":52,"startCol":47,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"Bool"]]],[{"spanInfo":{"startLine":254,"endLine":254,"endCol":15,"startCol":13,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:Integer\n-> x2:(IncList {v : Integer | x1 <= v})\n-> {v : (IncList Integer) | hd v == x1 && tl v == x2}"]]],[{"spanInfo":{"startLine":285,"endLine":285,"endCol":38,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iJ","(IncList {VV : a | VV >= x})"]]],[{"spanInfo":{"startLine":527,"endLine":527,"endCol":30,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3he","[a] -> (BST a)"]]],[{"spanInfo":{"startLine":155,"endLine":155,"endCol":10,"startCol":9,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["x","(Vector Int)"]]],[{"spanInfo":{"startLine":341,"endLine":341,"endCol":26,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.Emp","forall a. (IncList a)"]]],[{"spanInfo":{"startLine":396,"endLine":396,"endCol":19,"startCol":15,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:{v : Int | v > 0}\n-> x2:(BST {v : Int | v > 0 && v < x1})\n-> x3:(BST {v : Int | v > 0 && x1 < v})\n-> {v : (BST {v : Int | v > 0}) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":470,"endLine":470,"endCol":28,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:(BST {VV : a | VV < x1})\n-> x3:(BST {VV : a | x1 < VV})\n-> {v : (BST a) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":504,"endLine":504,"endCol":72,"startCol":30,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jI","{v : [Char] | len v >= 0}"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":20,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3kc","{v : Int | v == (0  :  int)}"]]],[{"spanInfo":{"startLine":395,"endLine":395,"endCol":25,"startCol":24,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hI","{v : Int | v == (4  :  int)}"]]],[{"spanInfo":{"startLine":157,"endLine":157,"endCol":49,"startCol":38,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jk","Int"]]],[{"spanInfo":{"startLine":434,"endLine":434,"endCol":22,"startCol":18,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hA","(BST {v : Int | false})"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":40,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3id","(IncList {VV : a | VV >= y})"]]],[{"spanInfo":{"startLine":196,"endLine":196,"endCol":70,"startCol":32,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ja","(Maybe (Sparse [Char]))"]]],[{"spanInfo":{"startLine":256,"endLine":256,"endCol":29,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iR","(IncList {v : Integer | v > 0})"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":9,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["vec2","(Sparse Int)"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":40,"startCol":38,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ys","{v : (IncList {VV : a | y <= VV}) | v == ys}"]]],[{"spanInfo":{"startLine":329,"endLine":329,"endCol":20,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.Emp","forall a. (IncList a)"]]],[{"spanInfo":{"startLine":282,"endLine":282,"endCol":7,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.insert","forall a. (Ord a) => a -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":428,"endLine":428,"endCol":15,"startCol":11,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:Int\n-> x2:(BST {v : Int | v < x1})\n-> x3:(BST {v : Int | x1 < v})\n-> {v : (BST Int) | left v == x2 && root v == x1 && right v == x3}"]]],[{"spanInfo":{"startLine":155,"endLine":155,"endCol":26,"startCol":25,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jm","{v : Int | v == (0  :  int)}"]]],[{"spanInfo":{"startLine":211,"endLine":211,"endCol":29,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3kf","{v : Int | v == (2  :  int)}"]]],[{"spanInfo":{"startLine":501,"endLine":501,"endCol":28,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"x1:a\n-> x2:(BST {VV : a | x1 < VV})\n-> {v : (MinPair a) | minElt v == x1 && rest v == x2}"]]],[{"spanInfo":{"startLine":76,"endLine":76,"endCol":29,"startCol":22,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.spElems","forall a. (Sparse a) -> [(Int, a)]"]]],[{"spanInfo":{"startLine":448,"endLine":448,"endCol":12,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"Bool"]]],[{"spanInfo":{"startLine":331,"endLine":331,"endCol":51,"startCol":49,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["zs","{v : [a] | v == zs && v == zs && len v == len zs && len v >= 0 && len v <= len ys && len v <= len ys}"]]],[{"spanInfo":{"startLine":468,"endLine":468,"endCol":4,"startCol":1,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.add","forall a. (Ord a) => a -> (BST a) -> (BST a)"]]],[{"spanInfo":{"startLine":504,"endLine":504,"endCol":29,"startCol":26,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"{v : [Char] | false} -> (MinPair a)"]]],[{"spanInfo":{"startLine":349,"endLine":349,"endCol":34,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.append","forall a. (Ord a) => (IncList a) -> (IncList a) -> (IncList a)"]]],[{"spanInfo":{"startLine":212,"endLine":212,"endCol":36,"startCol":17,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ka","{v : [({v : Int | v == fst x16 && v >= 0}, Int)]<\\x6 VV -> v /= x6> | null v <=> false && len v >= 0}"]]],[{"spanInfo":{"startLine":320,"endLine":320,"endCol":36,"startCol":29,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3ic","{v : (IncList {VV : a | VV > y && VV >= x}) | hd v == x && tl v == xs}"]]],[{"spanInfo":{"startLine":362,"endLine":362,"endCol":26,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["RefinedDatatypes.right","forall a. (BST a) -> (BST a)"]]],[{"spanInfo":{"startLine":319,"endLine":319,"endCol":11,"startCol":5,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[[null,"{v : Bool | Prop v <=> x <= y}"]]],[{"spanInfo":{"startLine":130,"endLine":130,"endCol":17,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jB","{v : Int | v == (3  :  int)}"]]],[{"spanInfo":{"startLine":137,"endLine":138,"endCol":28,"startCol":14,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3jw","{v : [({v : Int | v == fst x21 && v >= 0}, [Char])]<\\x6 VV -> v /= x6> | null v <=> false && len v >= 0}"]]],[{"spanInfo":{"startLine":450,"endLine":450,"endCol":28,"startCol":27,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["ds_d3fo","a"]]],[{"spanInfo":{"startLine":173,"endLine":173,"endCol":47,"startCol":35,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3je","Int"]]],[{"spanInfo":{"startLine":446,"endLine":446,"endCol":28,"startCol":23,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["GHC.Types.False","{v : Bool | not (Prop v) && v == GHC.Types.False}"]]],[{"spanInfo":{"startLine":254,"endLine":254,"endCol":29,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3iY","(IncList {v : Integer | v > 0})"]]],[{"spanInfo":{"startLine":433,"endLine":433,"endCol":35,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true},[["lq_anf__d3hz","(BST {v : Int | v > 0})"]]]],"o_templs":[],"o_result":{"tag":"Unsafe","contents":[{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Int | VV == ?d && VV > 0 && VV > ?b && VV < ?c && VV < ?a}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Int | VV > 0 && VV >= ?b && ?a < VV && VV < ?c && VV <= ?a}\n \n  In Context\n    VV : {VV : GHC.Types.Int | VV == ?d && VV > 0 && VV > ?b && VV < ?c && VV < ?a}\n    ?a : {fix##63#a : GHC.Types.Int | ?a == (4  :  int)}\n    ?d : {fix##63#d : GHC.Types.Int | ?d == (2  :  int)}\n    ?b : {fix##63#b : GHC.Types.Int | ?b == (1  :  int)}\n    ?c : {fix##63#c : GHC.Types.Int | ?c == (6  :  int)}","pos":{"spanInfo":{"startLine":431,"endLine":431,"endCol":35,"startCol":19,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true}},{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : a\n \n  not a subtype of Required type\n    VV : {VV : a | x <= VV}\n \n  In Context\n    VV : a\n    x  : a","pos":{"spanInfo":{"startLine":349,"endLine":349,"endCol":40,"startCol":28,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true}},{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Integer.Type.Integer | VV /= ?a && VV > 0 && VV >= ?b && VV <= ?c}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Integer.Type.Integer | ?a <= VV}\n \n  In Context\n    VV : {VV : GHC.Integer.Type.Integer | VV /= ?a && VV > 0 && VV >= ?b && VV <= ?c}\n    ?a : {fix##63#a : GHC.Integer.Type.Integer | ?a == 2}\n    ?b : {fix##63#b : GHC.Integer.Type.Integer | ?b == 1}\n    ?c : {fix##63#c : GHC.Integer.Type.Integer | ?c == 3}","pos":{"spanInfo":{"startLine":256,"endLine":256,"endCol":29,"startCol":16,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true}},{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : (RefinedDatatypes.Sparse [GHC.Types.Char])\n \n  not a subtype of Required type\n    VV : {VV : (RefinedDatatypes.Sparse [GHC.Types.Char]) | spDim VV == 3}\n \n  In Context\n    VV : (RefinedDatatypes.Sparse [GHC.Types.Char])","pos":{"spanInfo":{"startLine":196,"endLine":196,"endCol":70,"startCol":21,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true}},{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : {VV : GHC.Types.Int | VV == fst VV && VV /= ?a && VV >= 0 && VV >= ?b && VV <= ?c}\n \n  not a subtype of Required type\n    VV : {VV : GHC.Types.Int | VV < ?a && 0 <= VV}\n \n  In Context\n    VV : {VV : GHC.Types.Int | VV == fst VV && VV /= ?a && VV >= 0 && VV >= ?b && VV <= ?c}\n    ?a : {fix##63#a : GHC.Types.Int | ?a == (5  :  int)}\n    ?b : {fix##63#b : GHC.Types.Int | ?b == (0  :  int)}\n    ?c : {fix##63#c : GHC.Types.Int | ?c == (6  :  int)}","pos":{"spanInfo":{"startLine":137,"endLine":138,"endCol":28,"startCol":14,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true}},{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : {VV : [GHC.Types.Char] | VV == ?a && len VV >= 0}\n \n  not a subtype of Required type\n    VV : {VV : [GHC.Types.Char] | false}\n \n  In Context\n    VV : {VV : [GHC.Types.Char] | VV == ?a && len VV >= 0}\n    ?a : {fix##63#a : [GHC.Types.Char] | len ?a >= 0}","pos":{"spanInfo":{"startLine":504,"endLine":504,"endCol":72,"startCol":30,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true}},{"msg":"Liquid Type Mismatch\n  Inferred type\n    VV : (RefinedDatatypes.Sparse GHC.Types.Int)\n \n  not a subtype of Required type\n    VV : {VV : (RefinedDatatypes.Sparse GHC.Types.Int) | spDim VV == 3}\n \n  In Context\n    VV : (RefinedDatatypes.Sparse GHC.Types.Int)","pos":{"spanInfo":{"startLine":209,"endLine":209,"endCol":26,"startCol":12,"filename":"/Users/rjhala/research/liquid/liquidhaskell/docs/tutorial/src/flycheck_03-datatypes.lhs"},"realSpan":true}}]}}