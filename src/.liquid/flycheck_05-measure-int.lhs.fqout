SAT 
 
 
 
//QUALIFIERS 

qualif Auto(v:FAppTy (List ) (FAppTy (FAppTy @(1) (FAppTy (List ) (GHC.Types.Char ))) @(0))):(size([v]) = 0)

qualif Auto0(v:FAppTy (List ) (FAppTy (FAppTy @(1) @(0)) (GHC.Types.Bool ))):(size([v]) = 0)

qualif Auto1(VV:@(1), fix##126#A0:FAppTy (FAppTy @(0) @(1)) @(2)):(VV = first([fix##126#A0]))

qualif Auto10(v:FAppTy (NumericMeasures.Matrix ) @(0), fix##126#A0:FAppTy (NumericMeasures.Matrix ) @(0)):(mRow([v]) = mRow([fix##126#A0]))

qualif Auto11(v:int):(v >= 0)

qualif Auto12(v:FAppTy (List ) (FAppTy (FAppTy @(0) @(1)) @(2)), fix##126#A0:FAppTy (List ) @(1), fix##126#A1:FAppTy (List ) @(2)):((~ ((size([fix##126#A0]) < size([fix##126#A1])))) => (size([v]) = size([fix##126#A1])))

qualif Auto13(y:FAppTy (NumericMeasures.Matrix ) @(0), fix##126#A0:FAppTy (NumericMeasures.Matrix ) @(0)):(mCol([fix##126#A0]) = mRow([y]))

qualif Auto14(v:FAppTy (List ) (GHC.Types.Char )):false

qualif Auto15(VV:FAppTy (List ) @(0), fix##126#A0:int):(fix##126#A0 <= size([VV]))

qualif Auto16(v:FAppTy (NumericMeasures.Vector ) @(0), fix##126#A0:FAppTy (NumericMeasures.Vector ) @(0)):(vDim([v]) = vDim([fix##126#A0]))

qualif Auto17(v:FAppTy (NumericMeasures.Vector ) @(1), fix##126#A0:FAppTy (NumericMeasures.Vector ) @(0)):(vDim([v]) = vDim([fix##126#A0]))

qualif Auto18(v:FAppTy (NumericMeasures.Vector ) @(0), fix##126#A0:FAppTy (NumericMeasures.Vector ) @(1)):(vDim([v]) = vDim([fix##126#A0]))

qualif Auto19(v:FAppTy (NumericMeasures.Vector ) @(0)):(vDim([v]) > 0)

qualif Auto2(v:FAppTy (List ) (FAppTy (List ) (GHC.Types.Char ))):(size([v]) = 2)

qualif Auto20(v:FAppTy (List ) @(1), fix##126#A0:FAppTy (List ) @(0)):(size([v]) = size([fix##126#A0]))

qualif Auto21(v:FAppTy (List ) @(0), fix##126#A0:FAppTy (List ) @(0)):(size([v]) = size([fix##126#A0]))

qualif Auto22(v:FAppTy (List ) @(0), fix##126#A0:FAppTy (List ) @(1)):(size([v]) = size([fix##126#A0]))

qualif Auto23(VV:@(2), fix##126#A0:FAppTy (FAppTy @(0) @(1)) @(2)):(VV = second([fix##126#A0]))

qualif Auto24(v:FAppTy (NumericMeasures.Matrix ) int):(mCol([v]) = 2)

qualif Auto25(v:FAppTy (NumericMeasures.Matrix ) @(0), fix##126#A0:FAppTy (NumericMeasures.Matrix ) @(0)):(mCol([v]) = mCol([fix##126#A0]))

qualif Auto26(v:FAppTy (NumericMeasures.Vector ) @(0), fix##126#A0:FAppTy (NumericMeasures.Vector ) @(0)):(vDim([v]) = (vDim([fix##126#A0]) + 1))

qualif Auto27(v:FAppTy (NumericMeasures.Vector ) (FAppTy (NumericMeasures.Vector ) @(0)), fix##126#A0:int):(vDim([v]) = fix##126#A0)

qualif Auto28(v:FAppTy (NumericMeasures.Vector ) @(0), fix##126#A0:int):(vDim([v]) = fix##126#A0)

qualif Auto29(v:FAppTy (List ) @(0), fix##126#A0:int):(size([v]) = fix##126#A0)

qualif Auto3(v:FAppTy (NumericMeasures.Matrix ) @(0), fix##126#A0:FAppTy (NumericMeasures.Matrix ) @(0)):(mCol([v]) = mRow([fix##126#A0]))

qualif Auto30(v:FAppTy (NumericMeasures.Matrix ) int):(mRow([v]) = 2)

qualif Auto4(v:FAppTy (List ) (FAppTy (FAppTy @(0) int) (GHC.Types.Bool ))):(size([v]) = 2)

qualif Auto5(v:FAppTy (FAppTy @(0) (FAppTy (List ) @(1))) (FAppTy (List ) @(1)), fix##126#A0:FAppTy (List ) @(1)):((size([first([v])]) + size([second([v])])) = size([fix##126#A0]))

qualif Auto6(v:FAppTy (NumericMeasures.Matrix ) @(0), fix##126#A0:FAppTy (NumericMeasures.Matrix ) @(0)):(mRow([v]) = mCol([fix##126#A0]))

qualif Auto7(v:FAppTy (NumericMeasures.Vector ) @(0), fix##126#A0:FAppTy (NumericMeasures.Vector ) @(0)):(vDim([v]) = (vDim([fix##126#A0]) - 1))

qualif Auto8(VV:GHC.Types.Bool , fix##126#A0:FAppTy (List ) @(0)):(Prop(VV) <=> notEmpty(fix##126#A0))

qualif Auto9(v:FAppTy (List ) (FAppTy (FAppTy @(0) @(1)) @(2)), fix##126#A0:FAppTy (List ) @(1), fix##126#A1:FAppTy (List ) @(2)):((size([fix##126#A0]) < size([fix##126#A1])) => (size([v]) = size([fix##126#A0])))

qualif Bot(v:@(0)):(0 = 1)
qualif Bot0(v:obj):(0 = 1)

qualif Bot1(v:bool):(0 = 1)
qualif Bot2(v:int):(0 = 1)

qualif Cmp(v:@(0), ~A:@(0)):(v > ~A)
qualif Cmp0(v:@(0), ~A:@(0)):(v >= ~A)

qualif Cmp1(v:int, ~A:int):(v <= ~A)
qualif Cmp10(v:int, ~A:int):(v != ~A)

qualif Cmp2(v:int, ~A:int):(v < ~A)
qualif Cmp3(v:@(0), ~A:@(0)):(v <= ~A)

qualif Cmp4(v:int, ~A:int):(v > ~A)
qualif Cmp5(v:int, ~A:int):(v >= ~A)

qualif Cmp6(v:@(0), ~A:@(0)):(v = ~A)
qualif Cmp7(v:int, ~A:int):(v = ~A)

qualif Cmp8(v:@(0), ~A:@(0)):(v != ~A)
qualif Cmp9(v:@(0), ~A:@(0)):(v < ~A)

qualif CmpLen(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) >= len([~A]))

qualif CmpLen0(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) <= len([~A]))

qualif CmpLen1(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) < len([~A]))

qualif CmpLen2(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) > len([~A]))

qualif CmpLen3(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) = len([~A]))

qualif CmpZ(v:@(0)):(v != 0)
qualif CmpZ0(v:@(0)):(v = 0)

qualif CmpZ1(v:@(0)):(v < 0)
qualif CmpZ2(v:@(0)):(v > 0)

qualif CmpZ3(v:@(0)):(v >= 0)
qualif CmpZ4(v:@(0)):(v <= 0)

qualif EqLen(v:int, ~A:FAppTy (List ) @(0)):(v = len([~A]))

qualif False(v:bool):(~ ((Bexp v)))

qualif False1(v:GHC.Types.Bool ):(~ (Prop(v)))

qualif Fst(v:@(0), fix##126#Y:@(1)):(v = fst([fix##126#Y]))

qualif IsEmp(v:GHC.Types.Bool , ~A:FAppTy (List ) @(0)):(Prop(v) <=> (len([~A]) > 0))

qualif IsEmp0(v:GHC.Types.Bool , ~A:FAppTy (List ) @(0)):(Prop(v) <=> (len([~A]) = 0))

qualif LenAcc(v:int, ~A:FAppTy (List ) @(0), ~B:int):(v = (len([~A]) + ~B))

qualif LenDiff(v:FAppTy (List ) @(0), ~A:int):(len([v]) = (~A + 1))

qualif LenDiff0(v:FAppTy (List ) @(0), ~A:int):(len([v]) = (~A - 1))

qualif LenEq(v:FAppTy (List ) @(0), ~A:int):(~A = len([v]))

qualif ListZ(v:FAppTy (List ) @(0)):(len([v]) >= 0)

qualif ListZ0(v:FAppTy (List ) @(0)):(len([v]) = 0)

qualif ListZ1(v:FAppTy (List ) @(0)):(len([v]) > 0)

qualif One(v:int):(v = 1)

qualif Papp(v:@(0), ~P:FAppTy (Pred ) @(0)):papp1(~P, v)

qualif Papp2(v:@(0), ~X:@(1), ~P:FAppTy (FAppTy (Pred ) @(0)) @(1)):papp2(~P, v, ~X)

qualif Papp3(v:@(0), ~X:@(1), ~Y:@(2), ~P:FAppTy (FAppTy (FAppTy (Pred ) @(0)) @(1)) @(2)):papp3(~P, v, ~X, ~Y)

qualif Snd(v:@(0), fix##126#Y:@(1)):(v = snd([fix##126#Y]))

qualif True(v:bool):(Bexp v)

qualif True1(v:GHC.Types.Bool ):Prop(v) 

