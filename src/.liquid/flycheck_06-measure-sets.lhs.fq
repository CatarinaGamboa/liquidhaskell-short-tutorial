//qualif NonNull(v: [a])        : (? (nonnull([v])))
//qualif Null(v: [a])           : (~ (? (nonnull([v]))))
//qualif EqNull(v:Bool, ~A: [a]): (Prop(v) <=> (? (nonnull([~A]))))

qualif IsEmp(v:GHC.Types.Bool, ~A: [a]) : (Prop(v) <=> len([~A]) [ > ;  = ] 0)
qualif ListZ(v: [a])          : len([v]) [ = ; >= ; > ] 0 
qualif CmpLen(v:[a], ~A:[b])  : len([v]) [= ; >=; >; <=; <] len([~A]) 
qualif EqLen(v:int, ~A: [a])  : v = len([~A]) 
qualif LenEq(v:[a], ~A: int)  : ~A = len([v]) 
qualif LenAcc(v:int, ~A:[a], ~B: int): v = len([~A]) + ~B
qualif LenDiff(v:[a], ~A:int): len([v]) = (~A [ +; - ] 1)
//BOT: Do not delete EVER!

qualif Bot(v:@(0))    : 0 = 1 
qualif Bot(v:obj)     : 0 = 1 
qualif Bot(v:a)       : 0 = 1 
qualif Bot(v:bool)    : 0 = 1 
qualif Bot(v:int)     : 0 = 1 
qualif CmpZ(v:a)      : v [ < ; <= ; > ; >= ; = ; != ] 0
qualif Cmp(v:a,~A:a)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif Cmp(v:int,~A:int)  : v [ < ; <= ; > ; >= ; = ; != ] ~A
qualif One(v:int)     : v = 1
qualif True(v:bool)   : (? v) 
qualif False(v:bool)  : ~ (? v) 
qualif True1(v:GHC.Types.Bool)   : Prop(v)
qualif False1(v:GHC.Types.Bool)  : ~ Prop(v)


qualif Papp(v:a,~P:Pred a) : papp1(~P, v)
constant papp1 : func(1, [Pred @(0); @(0); bool])

qualif Papp2(v:a,~X:b,~P:Pred a b) : papp2(~P, v, ~X)
constant papp2 : func(4, [Pred @(0) @(1); @(2); @(3); bool])

qualif Papp3(v:a,~X:b, ~Y:c, ~P:Pred a b c) : papp3(~P, v, ~X, ~Y)
constant papp3 : func(6, [Pred @(0) @(1) @(2); @(3); @(4); @(5); bool])

constant Prop : func(0, [GHC.Types.Bool; bool])
qualif Fst(v : a, fix##126#Y : b): (v = fst([fix##126#Y]))
qualif Snd(v : a, fix##126#Y : b): (v = snd([fix##126#Y]))
qualif Auto(v : GHC.Types.Bool): (? Prop([v]))
qualif Auto(v : [a_a1Nn], fix##126#A0 : [a_a1Nn], fix##126#A1 : [a_a1Nn]): (elems([v]) = Set_cup([elems([fix##126#A0]);
                                                                                                  elems([fix##126#A1])]))
qualif Auto(v : GHC.Types.Bool): (? Prop([v]))
qualif Auto(v : GHC.Types.Bool): (? Prop([v]))
qualif Auto(v : [a_a1JP]): (elems([v]) = Set_empty([0]))
qualif Auto(v : GHC.Types.Bool): (? Prop([v]))
qualif Auto(VV : GHC.Types.Bool, fix##126#A0 : [a_a1J6]): ((? Prop([VV])) <=> (? unique([fix##126#A0])))
qualif Auto(v : [GHC.Types.Char]): false
qualif Auto(v : GHC.Types.Bool): (? Prop([v]))
qualif Auto(v : [a_a1K4]): (? unique([v]))
qualif Auto(v : GHC.Types.Bool): (~ ((? Prop([v]))))
qualif Auto(v : [a_a1M3]): (? unique([v]))
qualif Auto(v : GHC.Types.Bool): (? Prop([v]))
qualif Auto(v : [a_a1NN], fix##126#A0 : a_a1NN, fix##126#A1 : [a_a1NN]): (elems([v]) = Set_cup([Set_sng([fix##126#A0]);
                                                                                                elems([fix##126#A1])]))
qualif Auto(v : GHC.Types.Bool, fix##126#A0 : GHC.Types.Bool, fix##126#A1 : GHC.Types.Bool): ((? Prop([v])) <=> ((? Prop([fix##126#A0])) => (? Prop([fix##126#A1]))))
qualif Auto(v : [t_a1O9], fix##126#A0 : [t_a1O9]): (elems([v]) = elems([fix##126#A0]))
qualif Auto(v : GHC.Types.Bool, fix##126#A0 : a_a1KI, fix##126#A1 : [a_a1KI]): ((? Prop([v])) <=> (? Set_mem([fix##126#A0;
                                                                                                              elems([fix##126#A1])])))
qualif Auto(v : GHC.Types.Bool): (? Prop([v]))
qualif Auto(v : [a_a1Kq]): (? unique([v]))
qualif Auto(v : [a_a1Kq]): (? unique([v]))
qualif Auto(v : [a_a1Kq]): (? unique([v]))
qualif Auto(v : [int]): (? unique([v]))
qualif Auto(v : int, fix##126#A0 : int): (fix##126#A0 <= v)
qualif Auto(v : int, fix##126#A0 : int): (v < fix##126#A0)
qualif Auto(v : GHC.Types.Bool): (? Prop([v]))
qualif Auto(v : [int]): (? unique([v]))
qualif Auto(VV : FAppTy Set_Set  a_a1Ju, fix##126#A0 : [a_a1Ju]): (VV = elems([fix##126#A0]))
qualif Auto(v : [int]): (? unique([v]))
qualif Auto(v : [a_a1Qw], fix##126#A0 : [a_a1Qw], fix##126#A1 : [a_a1Qw]): (elems([v]) = Set_cup([elems([fix##126#A0]);
                                                                                                  elems([fix##126#A1])]))
qualif Auto(v : [t_a1MM]): (? unique([v]))
qualif Auto(v : [t_a1MM]): (? unique([v]))
qualif Auto(v : [t_a1MM], fix##126#A0 : [t_a1MM]): (? Set_sub([elems([v]);
                                                               elems([fix##126#A0])]))
qualif Auto(v : [a_a1Qi], fix##126#A0 : [a_a1Qi]): (elems([v]) = elems([fix##126#A0]))
qualif Auto(v : [a_a1LO]): (? unique([v]))
qualif Auto(v : [a_a1LO]): (? unique([v]))

constant Prop : func(0, [GHC.Types.Bool; bool])
constant x_Tuple64 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(3)])
constant x_Tuple54 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(3)])
constant xListSelector : func(1, [[@(0)]; @(0)])
constant Set_emp : func(1, [FAppTy Set_Set  @(0); bool])
constant Set_empty : func(1, [int; FAppTy Set_Set  @(0)])
constant Set_cup : func(1, [FAppTy Set_Set  @(0);
                            FAppTy Set_Set  @(0);
                            FAppTy Set_Set  @(0)])
constant Set_sub : func(1, [FAppTy Set_Set  @(0);
                            FAppTy Set_Set  @(0);
                            bool])
constant unique : func(1, [[@(0)]; bool])
constant addrLen : func(0, [int; int])
constant elems : func(1, [[@(0)]; FAppTy Set_Set  @(0)])
constant Set_dif : func(1, [FAppTy Set_Set  @(0);
                            FAppTy Set_Set  @(0);
                            FAppTy Set_Set  @(0)])
constant left : func(1, [FAppTy Sets.Zipper  @(0); [@(0)]])
constant Set_cap : func(1, [FAppTy Set_Set  @(0);
                            FAppTy Set_Set  @(0);
                            FAppTy Set_Set  @(0)])
constant Set_sng : func(1, [@(0); FAppTy Set_Set  @(0)])
constant Set_mem : func(1, [@(0); FAppTy Set_Set  @(0); bool])
constant x_Tuple52 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(1)])
constant right : func(1, [FAppTy Sets.Zipper  @(0); [@(0)]])
constant x_Tuple33 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(2)])
constant fst : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                        @(0)])
constant x_Tuple76 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(5)])
constant focus : func(1, [FAppTy Sets.Zipper  @(0); @(0)])
constant x_Tuple55 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(4)])
constant x_Tuple31 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(0)])
constant x_Tuple65 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(4)])
constant fix#GHC.Tuple.#40##41##35#70 : fix##40##41#
constant listElts : func(1, [[@(0)]; FAppTy Set_Set  @(0)])
constant x_Tuple32 : func(3, [FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2);
                              @(1)])
constant GHC.Types.False#68 : GHC.Types.Bool
constant x_Tuple63 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(2)])
constant x_Tuple75 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(4)])
constant x_Tuple51 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(0)])
constant x_Tuple44 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(3)])
constant xsListSelector : func(1, [[@(0)]; [@(0)]])
constant x_Tuple53 : func(5, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4);
                              @(2)])
constant x_Tuple41 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(0)])
constant x_Tuple22 : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                              @(1)])
constant fromJust : func(1, [FAppTy Data.Maybe.Maybe  @(0); @(0)])
constant snd : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                        @(1)])
constant x_Tuple73 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(2)])
constant x_Tuple62 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(1)])
constant x_Tuple71 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(0)])
constant cmp : func(0, [GHC.Types.Ordering; GHC.Types.Ordering])
constant x_Tuple72 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(1)])
constant x_Tuple21 : func(2, [FAppTy (FAppTy fix##40##41#  @(0))  @(1);
                              @(0)])
constant null : func(1, [[@(0)]; bool])
constant x_Tuple61 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(0)])
constant x_Tuple43 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(2)])
constant x_Tuple74 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(3)])
constant x_Tuple66 : func(6, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5);
                              @(5)])
constant len : func(1, [[@(0)]; int])
constant isJust : func(1, [FAppTy Data.Maybe.Maybe  @(0); bool])
constant x_Tuple42 : func(4, [FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3);
                              @(1)])
constant x_Tuple77 : func(7, [FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy (FAppTy fix##40##41#  @(0))  @(1))  @(2))  @(3))  @(4))  @(5))  @(6);
                              @(6)])
constant GHC.Types.True#6u : GHC.Types.Bool
constant Data.Maybe.Just#r22 : func(1, [@(0);
                                        FAppTy Data.Maybe.Maybe  @(0)])
constant fix#GHC.Types.#58##35#64 : func(1, [@(0); [@(0)]; [@(0)]])
constant fix#GHC.Types.#91##93##35#6m : func(1, [[@(0)]])
constant fix#GHC.Tuple.#40##44##41##35#74 : func(2, [@(0);
                                                     @(1);
                                                     FAppTy (FAppTy fix##40##41#  @(0))  @(1)])
constant Data.Maybe.Nothing#r21 : func(1, [FAppTy Data.Maybe.Maybe  @(0)])
constant Sets.Zipper#rqn : func(1, [@(0);
                                    [@(0)];
                                    [@(0)];
                                    FAppTy Sets.Zipper  @(0)])
bind 0 GHC.Prim.void##0l : {VV#506 : GHC.Prim.Void# | []}
bind 1 GHC.Types.False#68 : {VV#513 : GHC.Types.Bool | []}
bind 2 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 3 GHC.Types.True#6u : {VV#516 : GHC.Types.Bool | []}
bind 4 fix#GHC.Tuple.#40##41##35#70 : {VV#517 : fix##40##41# | []}
bind 5 fix#GHC.Classes.#124##124##35#r24 : {VV : func(0, [GHC.Types.Bool;
                                                          GHC.Types.Bool;
                                                          GHC.Types.Bool]) | []}
bind 6 GHC.Classes.not#r25 : {VV : func(0, [GHC.Types.Bool;
                                            GHC.Types.Bool]) | []}
bind 7 fix#GHC.Classes.#38##38##35#r26 : {VV : func(0, [GHC.Types.Bool;
                                                        GHC.Types.Bool;
                                                        GHC.Types.Bool]) | []}
bind 8 fix#GHC.Base.#36#fMonadIO#35#r3D : {VV#534 : FAppTy GHC.Base.Monad  GHC.Types.IO | []}
bind 9 fix#GHC.Real.#36#fIntegralInt#35#r7m : {VV#535 : FAppTy GHC.Real.Integral  int | []}
bind 10 fix#GHC.Classes.#36#fOrdInt#35#rip : {VV#538 : FAppTy GHC.Classes.Ord  int | []}
bind 11 fix#GHC.Num.#36#fNumInt#35#riq : {VV#539 : FAppTy GHC.Num.Num  int | []}
bind 12 fix#GHC.Integer.Type.#36#fEqInteger#35#r1az : {VV#543 : FAppTy GHC.Classes.Eq  int | []}
bind 13 GHC.Types.EQ#6U : {VV#544 : GHC.Types.Ordering | []}
bind 14 GHC.Types.LT#6S : {VV#545 : GHC.Types.Ordering | []}
bind 15 GHC.Types.GT#6W : {VV#546 : GHC.Types.Ordering | []}
bind 16 GHC.Types.True#6u : {v : GHC.Types.Bool | [(? Prop([v]))]}
bind 17 GHC.Types.False#68 : {v : GHC.Types.Bool | [(~ ((? Prop([v]))))]}
bind 18 fix#GHC.Classes.#124##124##35#r24 : {VV : func(0, [GHC.Types.Bool;
                                                           GHC.Types.Bool;
                                                           GHC.Types.Bool]) | []}
bind 19 GHC.Classes.not#r25 : {VV : func(0, [GHC.Types.Bool;
                                             GHC.Types.Bool]) | []}
bind 20 fix#GHC.Classes.#38##38##35#r26 : {VV : func(0, [GHC.Types.Bool;
                                                         GHC.Types.Bool;
                                                         GHC.Types.Bool]) | []}
bind 21 GHC.Integer.Type.smallInteger#0Z : {VV : func(0, [int;
                                                          int]) | []}
bind 22 GHC.Types.I##6c : {VV : func(0, [int; int]) | []}
bind 23 fix#GHC.Prim.#43##35##35#98 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 24 fix#GHC.Prim.#45##35##35#99 : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 25 fix#GHC.Prim.#61##61##35##35#9o : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 26 fix#GHC.Prim.#62##61##35##35#9n : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 27 fix#GHC.Prim.#60##61##35##35#9r : {VV : func(0, [int;
                                                         int;
                                                         int]) | []}
bind 28 fix#GHC.Prim.#60##35##35#9q : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 29 fix#GHC.Prim.#62##35##35#9m : {VV : func(0, [int;
                                                     int;
                                                     int]) | []}
bind 30 GHC.Types.EQ#6U : {VV#580 : GHC.Types.Ordering | [(cmp([VV#580]) = GHC.Types.EQ#6U)]}
bind 31 GHC.Types.LT#6S : {VV#591 : GHC.Types.Ordering | [(cmp([VV#591]) = GHC.Types.LT#6S)]}
bind 32 GHC.Types.GT#6W : {VV#592 : GHC.Types.Ordering | [(cmp([VV#592]) = GHC.Types.GT#6W)]}