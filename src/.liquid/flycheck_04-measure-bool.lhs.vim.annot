22:1-22:5::main :: "(IO ())"
22:8-22:16::_ :: "[Char] -> (IO ())"
22:17-22:24::lq_anf__d1zJ :: "{v : [Char] | len v >= 0}"
31:1-31:4::die :: "forall a. {v : [Char] | false} -> a"
31:5-31:8::msg :: "{v : [Char] | false}"
31:11-31:16::_ :: "[Char] -> a"
31:17-31:20::msg :: "{v : [Char] | false}"
48:1-48:7::divide :: "Int -> {v : Int | 0 /= v} -> Int"
48:14-48:17::_ :: "{v : [Char] | false} -> Int"
48:18-48:34::lq_anf__d1zY :: "{v : [Char] | len v >= 0}"
49:14-49:15::ds_d1yd :: "Int"
49:16-49:21::_ :: "x1:Int\n-> x2:{v : Int | v /= 0}\n-> {v : Int | x1 >= 0 && x2 >= 0 => v >= 0 && x1 >= 0 && x2 >= 1 => v <= x1 && v == x1 / x2}"
49:22-49:23::ds_d1ye :: "{v : Int | 0 /= v}"
60:1-60:5::avg2 :: "Int -> Int -> Int"
60:6-60:7::x :: "Int"
60:8-60:9::y :: "Int"
60:14-60:20::_ :: "Int -> {v : Int | 0 /= v} -> Int"
60:22-60:23::x :: "{v : Int | v == x}"
60:24-60:25::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
60:26-60:27::y :: "{v : Int | v == y}"
60:33-60:34::lq_anf__d1A0 :: "{v : Int | v == (2  :  int)}"
62:1-62:5::avg3 :: "Int -> Int -> Int -> Int"
62:6-62:7::x :: "Int"
62:8-62:9::y :: "Int"
62:10-62:11::z :: "Int"
62:14-62:20::_ :: "Int -> {v : Int | 0 /= v} -> Int"
62:22-62:23::x :: "{v : Int | v == x}"
62:24-62:25::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
62:26-62:27::y :: "{v : Int | v == y}"
62:28-62:29::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
62:30-62:31::z :: "{v : Int | v == z}"
62:33-62:34::lq_anf__d1A3 :: "{v : Int | v == (3  :  int)}"
71:1-71:5::size :: "forall a. x1:[a] -> {v : Int | notEmpty x1 => v > 0 && v >= 0}"
71:16-71:17::I# :: "x1:Int# -> {v : Int | v == (x1  :  int)}"
72:16-72:17::lq_anf__d1z5 :: "{v : Int | v == (1  :  int)}"
72:18-72:19::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
72:20-72:24::size :: "forall a. x1:[a] -> {v : Int | notEmpty x1 => v > 0 && v >= 0}"
72:25-72:27::xs :: "{v : [a] | v == xs && len v >= 0}"
78:1-78:8::avgMany :: "[Int] -> Int"
78:9-78:11::xs :: "[Int]"
78:14-78:20::_ :: "Int -> {v : Int | 0 /= v} -> Int"
78:21-78:26::total :: "{v : Int | v == total}"
78:27-78:32::elems :: "{v : Int | notEmpty xs => v > 0 && v == elems && v >= 0}"
80:5-80:10::total :: "Int"
80:14-80:17::_ :: "{v : [Int] | notEmpty v} -> Int"
80:19-80:21::xs :: "{v : [Int] | v == xs && len v >= 0}"
81:5-81:10::elems :: "{v : Int | notEmpty xs => v > 0 && v >= 0}"
81:14-81:18::size :: "forall a. x1:[a] -> {v : Int | notEmpty x1 => v > 0 && v >= 0}"
81:19-81:21::xs :: "{v : [Int] | v == xs && len v >= 0}"
114:1-114:9::notEmpty :: "forall a. x1:[a] -> {VV : Bool | Prop VV <=> notEmpty x1}"
114:18-114:23::False :: "{v : Bool | not (Prop v) && v == GHC.Types.False}"
115:18-115:22::True :: "{v : Bool | Prop v && v == GHC.Types.True}"
158:1-158:8::average :: "{v : [Int] | notEmpty v} -> Int"
158:9-158:11::xs :: "{v : [Int] | notEmpty v}"
158:14-158:20::_ :: "Int -> {v : Int | 0 /= v} -> Int"
158:21-158:26::total :: "{v : Int | v == total}"
158:27-158:32::elems :: "{v : Int | notEmpty xs => v > 0 && v == elems && v >= 0}"
160:5-160:10::total :: "Int"
160:14-160:17::_ :: "{v : [Int] | notEmpty v} -> Int"
160:18-160:20::xs :: "{v : [Int] | notEmpty v && v == xs && len v >= 0}"
161:5-161:10::elems :: "{v : Int | notEmpty xs => v > 0 && v >= 0}"
161:14-161:18::size :: "forall a. x1:[a] -> {v : Int | notEmpty x1 => v > 0 && v >= 0}"
161:19-161:21::xs :: "{v : [Int] | notEmpty v && v == xs && len v >= 0}"
169:1-169:9::average' :: "[Int] -> (Maybe Int)"
169:10-169:12::xs :: "[Int]"
170:5-170:7::_ :: "{v : Bool | Prop v && v == GHC.Types.True && v == ok}"
170:17-170:21::lq_anf__d1A5 :: "x1:Int -> {v : (Maybe Int) | isJust v <=> true && fromJust v == x1}"
170:22-170:23::_ :: "(Int -> (Maybe Int)) -> Int -> (Maybe Int)"
170:24-170:30::_ :: "Int -> {v : Int | 0 /= v} -> Int"
170:31-170:36::total :: "{v : Int | v == total}"
170:37-170:42::elems :: "{v : Int | notEmpty xs => v > 0 && v == elems && v >= 0}"
171:17-171:24::_ :: "{v : (Maybe Int) | isJust v <=> false}"
173:5-173:10::total :: "Int"
173:17-173:20::_ :: "{v : [Int] | notEmpty v} -> Int"
173:22-173:24::xs :: "{v : [Int] | v == xs && len v >= 0}"
174:5-174:10::elems :: "{v : Int | notEmpty xs => v > 0 && v >= 0}"
174:17-174:21::size :: "forall a. x1:[a] -> {v : Int | notEmpty x1 => v > 0 && v >= 0}"
174:22-174:24::xs :: "{v : [Int] | v == xs && len v >= 0}"
175:5-175:7::ok :: "{v : Bool | Prop v && v == GHC.Types.True}"
175:17-175:21::_ :: "{v : Bool | Prop v && v == GHC.Types.True}"
187:1-187:6::size1 :: "forall a. {v : [a] | notEmpty v} -> {v : Int | 0 < v}"
187:17-187:18::I# :: "x1:Int# -> {v : Int | v == (x1  :  int)}"
188:17-188:18::lq_anf__d1z1 :: "{v : Int | v == (1  :  int)}"
188:19-188:20::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
188:21-188:26::size1 :: "forall a. {v : [a] | notEmpty v} -> {v : Int | 0 < v}"
188:27-188:29::xs :: "{v : [a] | v == xs && len v >= 0}"
191:1-191:6::size2 :: "forall a. x1:[a] -> {v : Int | notEmpty x1 => v > 0}"
191:17-191:18::I# :: "x1:Int# -> {v : Int | v == (x1  :  int)}"
192:17-192:18::lq_anf__d1yY :: "{v : Int | v == (1  :  int)}"
192:19-192:20::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
192:21-192:26::size2 :: "forall a. x1:[a] -> {v : Int | notEmpty x1 => v > 0}"
192:27-192:29::xs :: "{v : [a] | v == xs && len v >= 0}"
211:1-211:5::head :: "forall a. {v : [a] | notEmpty v} -> a"
211:15-211:16::x :: "{VV : a | VV == x}"
212:15-212:18::_ :: "{v : [Char] | false} -> a"
212:19-212:56::lq_anf__d1z8 :: "{v : [Char] | len v >= 0}"
215:1-215:5::tail :: "forall a. {v : [a] | notEmpty v} -> [a]"
215:15-215:17::xs :: "{v : [a] | v == xs && len v >= 0}"
216:15-216:18::_ :: "{v : [Char] | false} -> [a]"
216:19-216:54::lq_anf__d1zh :: "{v : [Char] | len v >= 0}"
227:1-227:9::safeHead :: "forall a. [a] -> (Maybe a)"
227:10-227:12::xs :: "[a]"
228:5-228:9::_ :: "[a] -> Bool"
228:10-228:12::xs :: "{v : [a] | v == xs && len v >= 0}"
228:17-228:24::Nothing :: "forall a. {v : (Maybe a) | isJust v <=> false}"
229:17-229:21::lq_anf__d1zb :: "x1:a -> {v : (Maybe a) | isJust v <=> true && fromJust v == x1}"
229:22-229:23::_ :: "(a -> (Maybe a)) -> a -> (Maybe a)"
229:24-229:28::_ :: "{v : [a] | notEmpty v} -> a"
229:29-229:31::xs :: "{v : [a] | v == xs && len v >= 0}"
232:1-232:5::null :: "forall a. [a] -> Bool"
232:17-232:21::True :: "{v : Bool | Prop v && v == GHC.Types.True}"
233:17-233:22::False :: "{v : Bool | not (Prop v) && v == GHC.Types.False}"
242:1-242:8::groupEq :: "forall a. (Eq a) => [a] -> [{v : [a] | notEmpty v}]"
242:23-242:25::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | notEmpty v <=> false && null v <=> true && len v == 0}"
243:24-243:25::x :: "{VV : a | VV == x}"
243:25-243:26::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
243:26-243:28::ys :: "{v : [a] | v == ys && v == ys && len v == len ys && len v >= 0 && len v <= len xs}"
243:30-243:31::_ :: "x1:{v : [a] | notEmpty v}\n-> x2:[{v : [a] | notEmpty v}]<\\_ VV -> notEmpty v>\n-> {v : [{v : [a] | notEmpty v}]<\\_ VV -> notEmpty v> | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
243:32-243:39::groupEq :: "forall a. (Eq a) => [a] -> [{v : [a] | notEmpty v}]"
243:40-243:42::zs :: "{v : [a] | v == zs && v == zs && len v == len zs && len v >= 0 && len v <= len xs}"
245:6-245:8::ys :: "{VV : [a] | VV == ys && len VV == len ys && len VV >= 0 && len VV <= len xs}"
245:10-245:12::zs :: "{VV : [a] | VV == zs && len VV == len zs && len VV >= 0 && len VV <= len xs}"
245:23-245:27::_ :: "(a -> Bool)\n-> x3:[a]\n-> ({v : [a] | len v <= len x3}, {v : [a] | len v <= len x3})"
245:29-245:30::x :: "{VV : a | VV == x}"
245:31-245:33::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 == v}"
245:35-245:37::xs :: "{v : [a] | v == xs && len v >= 0}"
259:1-259:17::eliminateStutter :: "forall a. (Eq a) => [a] -> [a]"
259:18-259:20::xs :: "[a]"
259:23-259:26::map :: "forall a b. (a -> b) -> [a] -> [b]"
259:27-259:31::lq_anf__d1zd :: "{v : [a] | notEmpty v} -> a"
259:32-259:33::_ :: "({v : [{v : [a] | notEmpty v}] | len v >= 0} -> [a])\n-> {v : [{v : [a] | notEmpty v}] | len v >= 0} -> [a]"
259:34-259:41::groupEq :: "forall a. (Eq a) => [a] -> [{v : [a] | notEmpty v}]"
259:42-259:44::xs :: "{v : [a] | v == xs && len v >= 0}"
273:1-273:7::foldr1 :: "forall a. (a -> a -> a) -> {v : [a] | notEmpty v} -> a"
273:8-273:9::f :: "a -> a -> a"
273:19-273:24::foldr :: "forall a b. (a -> b -> b) -> b -> [a] -> b"
273:25-273:26::f :: "a -> a -> a"
273:27-273:28::x :: "{VV : a | VV == x}"
273:29-273:31::xs :: "{v : [a] | v == xs && len v >= 0}"
274:19-274:22::_ :: "{v : [Char] | false} -> a"
274:23-274:31::lq_anf__d1zj :: "{v : [Char] | len v >= 0}"
277:1-277:6::foldr :: "forall a b. (a -> b -> b) -> b -> [a] -> b"
277:9-277:12::acc :: "a"
277:22-277:25::acc :: "{VV : a | VV == acc}"
278:22-278:23::_ :: "a -> b -> b"
278:24-278:25::x :: "{VV : a | VV == x}"
278:27-278:32::foldr :: "forall a b. (a -> b -> b) -> b -> [a] -> b"
278:33-278:34::ds_d1xT :: "a -> b -> b"
278:35-278:38::acc :: "{VV : a | VV == acc}"
278:39-278:41::xs :: "{v : [a] | v == xs && len v >= 0}"
287:1-287:4::sum :: "forall a. (Num a) => {v : [a] | notEmpty v} -> a"
287:11-287:14::_ :: "{v : [Char] | false} -> a"
287:15-287:41::lq_anf__d1zm :: "{v : [Char] | len v >= 0}"
288:11-288:17::_ :: "(a -> a -> a) -> {v : [a] | notEmpty v} -> a"
288:18-288:21::lq_anf__d1zl :: "x1:a -> x2:a -> {VV : a | VV == x1 + x2}"
288:22-288:24::ds_d1ys :: "{v : [a] | notEmpty v && len v >= 0}"
294:1-294:6::sumOk :: "Integer"
294:10-294:13::_ :: "{v : [Integer] | notEmpty v} -> Integer"
294:14-294:25::lq_anf__d1zV :: "{v : [Integer] | notEmpty v <=> true && null v <=> false && len v >= 0}"
296:1-296:7::sumBad :: "Integer"
296:10-296:13::_ :: "{v : [Integer] | notEmpty v} -> Integer"
296:14-296:16::lq_anf__d1zK :: "{v : [Integer] | notEmpty v <=> false && null v <=> true && len v == 0 && len v >= 0}"
305:1-305:10::wtAverage :: "{v : [({v : Int | 0 < v}, {v : Int | 0 < v})] | notEmpty v} -> Int"
305:11-305:14::wxs :: "{v : [({v : Int | 0 < v}, {v : Int | 0 < v})] | notEmpty v}"
305:17-305:23::_ :: "Int -> {v : Int | 0 /= v} -> Int"
305:24-305:32::totElems :: "{v : Int | notEmpty wxs => v > 0 && v == totElems && v > 0 && 0 < v}"
305:33-305:42::totWeight :: "{v : Int | notEmpty wxs => v > 0 && v == totWeight && v > 0 && 0 < v}"
307:5-307:10::elems :: "[{v : Int | notEmpty wxs => v > 0 && notEmpty weights => v > 0 && v > 0 && 0 < v}]"
307:17-307:20::map :: "forall a b. (a -> b) -> [a] -> [b]"
307:22-307:38::lq_anf__d1Ab :: "({v : Int | notEmpty wxs => v > 0 && notEmpty weights => v > 0 && v > 0 && 0 < v}, {v : Int | notEmpty wxs => v > 0 && notEmpty weights => v > 0 && v > 0 && 0 < v})\n-> {v : Int | notEmpty wxs => v > 0 && notEmpty weights => v > 0 && v > 0 && 0 < v}"
307:33-307:34::w :: "{v : Int | notEmpty wxs => v > 0 && notEmpty weights => v > 0 && v == w && v > 0 && 0 < v}"
307:35-307:36::_ :: "x1:Int\n-> x2:Int\n-> {v : Int | x1 > 0 && x2 > 0 => v >= x1 && v >= x2 && x1 > 1 && x2 > 1 => v > x1 && v > x2 && x1 == 0 || x2 == 0 => v == 0}"
307:37-307:38::x :: "{v : Int | notEmpty wxs => v > 0 && notEmpty weights => v > 0 && v == x && v > 0 && 0 < v}"
307:40-307:43::wxs :: "{v : [({v : Int | 0 < v}, {v : Int | 0 < v})] | notEmpty v && v == wxs && len v >= 0}"
308:5-308:12::weights :: "[{v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}]"
308:17-308:20::map :: "forall a b. (a -> b) -> [a] -> [b]"
308:22-308:34::lq_anf__d1A9 :: "x1:({v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}, {v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v})\n-> {v : Int | notEmpty wxs => v > 0 && v == fst x1 && v > 0 && 0 < v}"
308:33-308:34::w :: "{v : Int | notEmpty wxs => v > 0 && v == w && v > 0 && 0 < v}"
308:40-308:43::wxs :: "{v : [({v : Int | 0 < v}, {v : Int | 0 < v})] | notEmpty v && v == wxs && len v >= 0}"
309:5-309:13::totElems :: "{v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}"
309:17-309:20::_ :: "{v : [{v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}] | notEmpty v}\n-> {v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}"
309:21-309:26::elems :: "{v : [{v : Int | notEmpty wxs => v > 0 && notEmpty weights => v > 0 && v > 0 && 0 < v}] | v == elems && len v >= 0}"
310:5-310:14::totWeight :: "{v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}"
310:17-310:20::_ :: "{v : [{v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}] | notEmpty v}\n-> {v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}"
310:21-310:28::weights :: "{v : [{v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}] | v == weights && len v >= 0}"
311:5-311:8::sum :: "{v : [{v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}] | notEmpty v}\n-> {v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}"
311:17-311:23::_ :: "({v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}\n -> {v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}\n -> {v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v})\n-> {v : [{v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}] | notEmpty v}\n-> {v : Int | notEmpty wxs => v > 0 && v > 0 && 0 < v}"
311:24-311:27::lq_anf__d1A7 :: "x1:Int -> x2:Int -> {v : Int | v == x1 + v}"
314:1-314:4::map :: "forall a b. (a -> b) -> [a] -> [b]"
314:17-314:19::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | notEmpty v <=> false && null v <=> true && len v == 0}"
315:17-315:18::_ :: "a -> b"
315:19-315:20::x :: "{VV : a | VV == x}"
315:21-315:22::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
315:23-315:26::map :: "forall a b. (a -> b) -> [a] -> [b]"
315:27-315:28::ds_d1xR :: "a -> b"
315:29-315:31::xs :: "{v : [a] | v == xs && len v >= 0}"
330:1-330:7::risers :: "forall a. (Ord a) => [a] -> [[a]]"
330:20-330:22::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | notEmpty v <=> false && null v <=> true && len v == 0}"
331:20-331:25::lq_anf__d1zv :: "{v : [[a]] | notEmpty v <=> false && null v <=> true && len v == 0 && len v >= 0}"
331:21-331:24::lq_anf__d1zu :: "{v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x && len v >= 0}"
331:22-331:23::x :: "{VV : a | VV == x}"
333:5-333:6::x :: "{VV : a | VV == x}"
333:7-333:9::_ :: "x1:a -> x2:a -> {v : Bool | Prop v <=> x1 <= v}"
333:10-333:11::y :: "{VV : a | VV == y}"
333:21-333:22::x :: "{VV : a | VV == x}"
333:22-333:23::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
333:23-333:24::s :: "{v : [a] | v == s && len v >= 0}"
333:26-333:27::_ :: "x1:[a]\n-> x2:[[a]]\n-> {v : [[a]] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
333:28-333:30::ss :: "{v : [[a]] | v == ss && len v >= 0}"
334:20-334:23::lq_anf__d1zG :: "{v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x && len v >= 0}"
334:21-334:22::x :: "{VV : a | VV == x}"
334:24-334:25::_ :: "x1:[a]\n-> x2:[[a]]\n-> {v : [[a]] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
334:27-334:28::s :: "{v : [a] | v == s && len v >= 0}"
334:29-334:30::_ :: "x1:[a]\n-> x2:[[a]]\n-> {v : [[a]] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
334:31-334:33::ss :: "{v : [[a]] | v == ss && len v >= 0}"
336:8-336:9::s :: "[a]"
336:11-336:13::ss :: "[[a]]"
336:20-336:29::lq_anf__d1zw :: "{v : [[a]] | notEmpty v} -> ([a], [[a]])"
336:30-336:31::_ :: "({v : [[a]] | len v >= 0} -> ([a], [[a]]))\n-> {v : [[a]] | len v >= 0} -> ([a], [[a]])"
336:32-336:38::risers :: "forall a. (Ord a) => [a] -> [[a]]"
336:40-336:41::y :: "{VV : a | VV == y}"
336:41-336:42::_ :: "x1:a\n-> x2:[a]\n-> {v : [a] | notEmpty v <=> true && null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
336:42-336:45::etc :: "{v : [a] | v == etc && len v >= 0}"
339:1-339:10::safeSplit :: "forall a. {v : [a] | notEmpty v} -> (a, [a])"
339:20-339:27::(,) :: "forall a b <p2 :: a b -> Prop>.\nx1:a\n-> x2:{VV : b<p2 x1> | true}\n-> {v : (a, b)<\\x6 VV -> p2 x6> | fst v == x1 && x_Tuple22 v == x2 && snd v == x2 && x_Tuple21 v == x1}"
339:21-339:22::x :: "{VV : a | VV == x}"
339:24-339:26::xs :: "{v : [a] | v == xs && len v >= 0}"
340:20-340:23::_ :: "{v : [Char] | false} -> (a, [a])"
340:24-340:47::lq_anf__d1zq :: "{v : [Char] | len v >= 0}"