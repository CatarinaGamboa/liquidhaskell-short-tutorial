188:1-188:6::zero4 :: "forall a. (IO (ForeignPtr a))"
188:12-188:14::fp :: "{VV : (ForeignPtr a) | 0 <= fplen VV}"
188:18-188:39::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
188:40-188:41::lq_anf__d44h :: "{v : Int | v == (4  :  int)}"
189:12-189:26::_ :: "x1:(ForeignPtr a)\n-> ({v : (Ptr a) | plen v == fplen x1 && 0 <= plen v} -> (IO ()))\n-> (IO ())"
189:27-189:29::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
189:30-189:31::_ :: "(({v : (Ptr a) | fplen fp == plen v && zero <= plen v} -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr a) | fplen fp == plen v && zero <= plen v}\n    -> (IO ()))\n-> (IO ())"
189:33-189:34::p :: "{VV : (Ptr a) | fplen fp == plen VV && zero <= plen VV}"
190:14-190:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
190:20-190:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
190:22-190:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
190:32-190:33::lq_anf__d44k :: "{v : Int | v == (0  :  int)}"
190:35-190:39::zero :: "{v : Word8 | v == zero}"
191:14-191:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
191:20-191:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
191:22-191:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
191:32-191:33::lq_anf__d44n :: "{v : Int | v == (1  :  int)}"
191:35-191:39::zero :: "{v : Word8 | v == zero}"
192:14-192:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
192:20-192:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
192:22-192:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
192:32-192:33::lq_anf__d44q :: "{v : Int | v == (2  :  int)}"
192:35-192:39::zero :: "{v : Word8 | v == zero}"
193:14-193:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
193:20-193:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
193:22-193:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
193:32-193:33::lq_anf__d44t :: "{v : Int | v == (3  :  int)}"
193:35-193:39::zero :: "{v : Word8 | v == zero}"
194:12-194:18::_ :: "(ForeignPtr a) -> (IO (ForeignPtr a))"
194:19-194:21::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
196:12-196:16::zero :: "Word8"
196:19-196:20::_ :: "Word8"
204:1-204:7::zero4' :: "forall a. (IO (ForeignPtr a))"
204:13-204:15::fp :: "{VV : (ForeignPtr a) | 0 <= fplen VV}"
204:19-204:40::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
204:41-204:42::lq_anf__d43V :: "{v : Int | v == (4  :  int)}"
205:13-205:27::_ :: "x1:(ForeignPtr a)\n-> ({v : (Ptr a) | plen v == fplen x1 && 0 <= plen v} -> (IO ()))\n-> (IO ())"
205:28-205:30::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
205:31-205:32::_ :: "(({v : (Ptr a) | fplen fp == plen v && zero <= plen v} -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr a) | fplen fp == plen v && zero <= plen v}\n    -> (IO ()))\n-> (IO ())"
205:34-205:35::p :: "{VV : (Ptr a) | fplen fp == plen VV && zero <= plen VV}"
206:15-206:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
206:21-206:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
206:23-206:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
206:33-206:34::lq_anf__d43Y :: "{v : Int | v == (0  :  int)}"
206:36-206:40::zero :: "{v : Word8 | v == zero}"
207:15-207:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
207:21-207:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
207:23-207:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
207:33-207:34::lq_anf__d441 :: "{v : Int | v == (1  :  int)}"
207:36-207:40::zero :: "{v : Word8 | v == zero}"
208:15-208:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
208:21-208:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
208:23-208:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
208:33-208:34::lq_anf__d444 :: "{v : Int | v == (2  :  int)}"
208:36-208:40::zero :: "{v : Word8 | v == zero}"
209:15-209:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
209:21-209:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
209:23-209:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
209:33-209:34::lq_anf__d447 :: "{v : Int | v == (8  :  int)}"
209:36-209:40::zero :: "{v : Word8 | v == zero}"
210:13-210:19::_ :: "(ForeignPtr a) -> (IO (ForeignPtr a))"
210:20-210:22::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
212:13-212:17::zero :: "Word8"
212:20-212:21::_ :: "Word8"
331:1-331:6::exBad :: "forall a. (IO (ForeignPtr a))"
331:12-331:14::fp :: "{VV : (ForeignPtr a) | 0 <= fplen VV}"
331:18-331:39::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
331:40-331:41::lq_anf__d43z :: "{v : Int | v == (4  :  int)}"
332:12-332:26::_ :: "x1:(ForeignPtr a)\n-> ({v : (Ptr a) | plen v == fplen x1 && 0 <= plen v} -> (IO ()))\n-> (IO ())"
332:27-332:29::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
332:30-332:31::_ :: "(({v : (Ptr a) | fplen fp == plen v && zero <= plen v} -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr a) | fplen fp == plen v && zero <= plen v}\n    -> (IO ()))\n-> (IO ())"
332:33-332:34::p :: "{VV : (Ptr a) | fplen fp == plen VV && zero <= plen VV}"
333:14-333:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
333:20-333:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
333:22-333:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
333:32-333:33::lq_anf__d43C :: "{v : Int | v == (0  :  int)}"
333:35-333:39::zero :: "{v : Word8 | v == zero}"
334:14-334:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
334:20-334:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
334:22-334:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
334:32-334:33::lq_anf__d43F :: "{v : Int | v == (1  :  int)}"
334:35-334:39::zero :: "{v : Word8 | v == zero}"
335:14-335:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
335:20-335:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
335:22-335:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
335:32-335:33::lq_anf__d43I :: "{v : Int | v == (2  :  int)}"
335:35-335:39::zero :: "{v : Word8 | v == zero}"
336:14-336:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
336:20-336:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
336:22-336:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
336:32-336:33::lq_anf__d43L :: "{v : Int | v == (5  :  int)}"
336:35-336:39::zero :: "{v : Word8 | v == zero}"
337:12-337:18::_ :: "(ForeignPtr a) -> (IO (ForeignPtr a))"
337:19-337:21::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
339:12-339:16::zero :: "Word8"
339:19-339:20::_ :: "Word8"
419:5-419:9::bPtr :: "ByteString -> (ForeignPtr Word8)"
420:5-420:9::bOff :: "ByteString -> Int"
421:5-421:9::bLen :: "x1:ByteString -> {v : Int | v == bLen x1 && v >= 0}"
484:1-484:6::good1 :: "(IO {v : ByteString | bLen v == 5})"
484:12-484:14::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr && 0 <= fplen VV}"
484:18-484:39::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
484:40-484:41::lq_anf__d43s :: "{v : Int | v == (5  :  int)}"
485:12-485:18::_ :: "{v : ByteString | bLen v == 5 && v /= Memory.empty}\n-> (IO {v : ByteString | bLen v == 5 && v /= Memory.empty})"
485:20-485:22::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
485:23-485:25::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr && 0 <= fplen v}"
485:26-485:27::lq_anf__d43u :: "{v : Int | v == (0  :  int)}"
485:28-485:29::lq_anf__d43v :: "{v : Int | v == (5  :  int)}"
494:1-494:6::good2 :: "(IO {v : ByteString | bLen v == 2})"
494:12-494:14::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr && 0 <= fplen VV}"
494:18-494:39::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
494:40-494:41::lq_anf__d43m :: "{v : Int | v == (5  :  int)}"
495:12-495:18::_ :: "{v : ByteString | bLen v == 2 && v /= Memory.empty}\n-> (IO {v : ByteString | bLen v == 2 && v /= Memory.empty})"
495:20-495:22::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
495:23-495:25::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr && 0 <= fplen v}"
495:26-495:27::lq_anf__d43o :: "{v : Int | v == (3  :  int)}"
495:28-495:29::lq_anf__d43p :: "{v : Int | v == (2  :  int)}"
506:1-506:5::bad1 :: "(IO ByteString)"
506:11-506:13::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr && 0 <= fplen VV}"
506:17-506:38::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
506:39-506:40::lq_anf__d43g :: "{v : Int | v == (3  :  int)}"
507:11-507:17::_ :: "ByteString -> (IO ByteString)"
507:19-507:21::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
507:22-507:24::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr && 0 <= fplen v}"
507:25-507:26::lq_anf__d43i :: "{v : Int | v == (0  :  int)}"
507:27-507:29::lq_anf__d43j :: "{v : Int | v == (10  :  int)}"
514:1-514:5::bad2 :: "(IO ByteString)"
514:11-514:13::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr && 0 <= fplen VV}"
514:17-514:38::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
514:39-514:40::lq_anf__d43a :: "{v : Int | v == (3  :  int)}"
515:11-515:17::_ :: "ByteString -> (IO ByteString)"
515:19-515:21::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
515:22-515:24::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr && 0 <= fplen v}"
515:25-515:26::lq_anf__d43c :: "{v : Int | v == (2  :  int)}"
515:27-515:28::lq_anf__d43d :: "{v : Int | v == (2  :  int)}"
530:1-530:7::create :: "x1:{v : Int | v >= 0}\n-> ((Ptr Word8) -> (IO ())) -> {v : ByteString | bLen v == x1}"
530:8-530:9::n :: "{v : Int | v >= 0}"
530:10-530:14::fill :: "(Ptr Word8) -> (IO ())"
530:17-530:32::lq_anf__d466 :: "(IO {v : ByteString | bLen v == n})\n-> {v : ByteString | bLen v == n}"
530:33-530:34::_ :: "((IO {v : ByteString | bLen v == n})\n -> {v : ByteString | bLen v == n})\n-> (IO {v : ByteString | bLen v == n})\n-> {v : ByteString | bLen v == n}"
531:3-531:5::fp :: "{VV : (ForeignPtr Word8) | fplen VV == n && 0 <= fplen VV}"
531:10-531:31::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
531:32-531:33::n :: "{v : Int | v == n && v >= 0}"
532:3-532:17::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO ()))\n-> (IO ())"
532:18-532:20::fp :: "{v : (ForeignPtr Word8) | v == fp && fplen v == n && 0 <= fplen v}"
532:21-532:25::fill :: "(Ptr Word8) -> (IO ())"
533:3-533:9::_ :: "{v : ByteString | bLen v == n}\n-> (IO {v : ByteString | bLen v == n})"
533:11-533:13::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
533:14-533:16::fp :: "{v : (ForeignPtr Word8) | v == fp && fplen v == n && 0 <= fplen v}"
533:17-533:18::lq_anf__d469 :: "{v : Int | v == (0  :  int)}"
533:19-533:20::n :: "{v : Int | v == n && v >= 0}"
541:1-541:6::bsGHC :: "ByteString"
541:9-541:15::_ :: "x1:{v : Int | v >= 0}\n-> ((Ptr Word8) -> (IO ())) -> {v : ByteString | bLen v == x1}"
541:16-541:17::lq_anf__d46e :: "{v : Int | v == (3  :  int)}"
541:18-541:19::_ :: "(((Ptr Word8) -> (IO ())) -> ByteString)\n-> ((Ptr Word8) -> (IO ())) -> ByteString"
541:21-541:22::p :: "(Ptr Word8)"
542:3-542:7::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
542:9-542:10::p :: "{v : (Ptr Word8) | v == p}"
542:11-542:20::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
542:21-542:22::lq_anf__d46g :: "{v : Int | v == (0  :  int)}"
542:25-542:28::_ :: "Char -> Word8"
542:29-542:32::lq_anf__d46i :: "Char"
543:3-543:7::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
543:9-543:10::p :: "{v : (Ptr Word8) | v == p}"
543:11-543:20::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
543:21-543:22::lq_anf__d46l :: "{v : Int | v == (1  :  int)}"
543:25-543:28::_ :: "Char -> Word8"
543:29-543:32::lq_anf__d46n :: "Char"
544:3-544:7::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
544:9-544:10::p :: "{v : (Ptr Word8) | v == p}"
544:11-544:20::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
544:21-544:22::lq_anf__d46q :: "{v : Int | v == (2  :  int)}"
544:25-544:28::_ :: "Char -> Word8"
544:29-544:32::lq_anf__d46s :: "Char"
563:1-563:5::pack :: "[Char] -> ByteString"
563:6-563:9::str :: "[Char]"
563:18-563:25::_ :: "x1:{v : Int | v >= 0}\n-> ({v : (Ptr Word8) | plen v == x1 && 0 <= plen v} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
563:26-563:27::n :: "{v : Int | v == n && v == len str}"
563:28-563:29::_ :: "(({v : (Ptr Word8) | plen v == n && plen v == len str && plen v == len xs && 0 <= plen v && n <= plen v}\n  -> (IO ()))\n -> ByteString)\n-> ({v : (Ptr Word8) | plen v == n && plen v == len str && plen v == len xs && 0 <= plen v && n <= plen v}\n    -> (IO ()))\n-> ByteString"
563:30-563:43::lq_anf__d47m :: "{v : (Ptr Word8) | plen v == n && plen v == len str && plen v == len xs && 0 <= plen v && n <= plen v}\n-> (IO ())"
563:31-563:32::p :: "{VV : (Ptr Word8) | plen VV == n && plen VV == len str && plen VV == len xs && 0 <= plen VV && n <= plen VV}"
563:36-563:38::_ :: "x1:{v : (Ptr Word8) | plen v == len str}\n-> {v : [Word8] | len v == len str && len v >= 0 && len v <= plen x1}\n-> (IO ())"
563:39-563:40::p :: "{v : (Ptr Word8) | v == p && plen v == n && plen v == len str && plen v == len xs && 0 <= plen v && n <= plen v}"
563:41-563:43::xs :: "{v : [Word8] | v == xs && len v == len str && len v >= 0}"
565:3-565:4::n :: "{v : Int | v == len str}"
565:17-565:23::_ :: "x1:[Char] -> {v : Int | v == len x1}"
565:24-565:27::str :: "{v : [Char] | v == str && len v >= 0}"
566:3-566:5::xs :: "{v : [Word8] | len v == len str}"
566:17-566:20::_ :: "(Char -> Word8) -> x3:[Char] -> {v : [Word8] | len v == len x3}"
566:21-566:24::c2w :: "Char -> Word8"
566:25-566:28::str :: "{v : [Char] | v == str && len v >= 0}"
567:3-567:5::go :: "forall a.\n(Storable a) =>\nx1:{VV : (Ptr a) | plen VV == len str}\n-> {VV : [a] | len VV == len str && len VV >= 0 && len VV <= plen x1}\n-> (IO ())"
567:6-567:7::p :: "(Ptr a)"
567:17-567:21::_ :: "{v : (Ptr a) | 0 < plen v} -> a -> (IO ())"
567:22-567:23::p :: "{v : (Ptr a) | v == p}"
567:24-567:25::x :: "{VV : a | VV == x}"
567:26-567:28::_ :: "(IO ()) -> (IO ()) -> (IO ())"
567:29-567:31::go :: "x1:(Ptr a)\n-> {VV : [a] | len VV >= 0 && len VV <= plen x1 && len VV <= len str}\n-> (IO ())"
567:33-567:40::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr a) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
567:41-567:42::p :: "{v : (Ptr a) | v == p}"
567:43-567:44::lq_anf__d47i :: "{v : Int | v == (1  :  int)}"
567:46-567:48::xs :: "{v : [a] | v == xs && len v >= 0}"
568:17-568:23::_ :: "() -> (IO ())"
568:25-568:27::() :: "{v : () | v == GHC.Tuple.()}"
580:1-580:17::prop_pack_length :: "[Char] -> {v : Bool | Prop v}"
580:18-580:20::xs :: "[Char]"
580:25-580:29::_ :: "x1:ByteString -> {v : Int | v == bLen x1 && v >= 0}"
580:31-580:35::_ :: "[Char] -> ByteString"
580:36-580:38::xs :: "{v : [Char] | v == xs && len v >= 0}"
580:40-580:42::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == v}"
580:43-580:49::_ :: "x1:[Char] -> {v : Int | v == len x1}"
580:50-580:52::xs :: "{v : [Char] | v == xs && len v >= 0}"
599:1-599:7::packEx :: "[Char] -> ByteString"
599:8-599:11::str :: "[Char]"
599:18-599:25::_ :: "x1:{v : Int | v >= 0}\n-> ({v : (Ptr Word8) | plen v == x1 && 0 <= plen v} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
599:26-599:27::n :: "{v : Int | v == n && v == len str}"
599:28-599:29::_ :: "(((Ptr Word8) -> (IO ())) -> ByteString)\n-> ((Ptr Word8) -> (IO ())) -> ByteString"
599:30-599:46::lq_anf__d47b :: "(Ptr Word8) -> (IO ())"
599:31-599:32::p :: "(Ptr Word8)"
599:36-599:41::pLoop :: "forall a. (Storable a) => (Ptr a) -> [a] -> (IO ())"
599:42-599:43::p :: "{v : (Ptr Word8) | v == p}"
599:44-599:46::xs :: "{v : [Word8] | v == xs && len v == len str && len v >= 0 && bLens v >= 0}"
601:3-601:4::n :: "{v : Int | v == len str}"
601:18-601:24::_ :: "x1:[Char] -> {v : Int | v == len x1}"
601:25-601:28::str :: "{v : [Char] | v == str && len v >= 0 && bLens v >= 0}"
602:3-602:5::xs :: "{v : [Word8] | len v == len str}"
602:18-602:21::_ :: "(Char -> Word8) -> x3:[Char] -> {v : [Word8] | len v == len x3}"
602:22-602:25::c2w :: "Char -> Word8"
602:26-602:29::str :: "{v : [Char] | v == str && len v >= 0 && bLens v >= 0}"
605:1-605:6::pLoop :: "forall a. (Storable a) => (Ptr a) -> [a] -> (IO ())"
605:7-605:8::p :: "(Ptr a)"
605:18-605:22::_ :: "{v : (Ptr a) | 0 < plen v} -> a -> (IO ())"
605:23-605:24::p :: "{v : (Ptr a) | v == p}"
605:25-605:26::x :: "{VV : a | VV == x}"
605:27-605:29::_ :: "(IO ()) -> (IO ()) -> (IO ())"
605:30-605:35::pLoop :: "forall a. (Storable a) => (Ptr a) -> [a] -> (IO ())"
605:37-605:44::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr a) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
605:45-605:46::p :: "{v : (Ptr a) | v == p}"
605:47-605:48::lq_anf__d436 :: "{v : Int | v == (1  :  int)}"
605:50-605:52::xs :: "{v : [a] | v == xs && len v >= 0 && bLens v >= 0}"
606:18-606:24::_ :: "() -> (IO ())"
606:25-606:27::() :: "{v : () | v == GHC.Tuple.()}"
619:1-619:11::unsafeTake :: "x1:{v : Int | v >= 0}\n-> ByteString -> {v : ByteString | bLen v == x1}"
619:12-619:13::n :: "{v : Int | v >= 0}"
619:27-619:29::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
619:30-619:31::x :: "{v : (ForeignPtr Word8) | v == x}"
619:32-619:33::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
619:34-619:35::n :: "{v : Int | v == n && v >= 0}"
622:1-622:11::unsafeDrop :: "x1:{v : Int | v >= 0}\n-> x2:ByteString -> {v : ByteString | bLen v == bLen x2 - x1}"
622:12-622:13::n :: "{v : Int | v >= 0}"
622:27-622:29::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
622:30-622:31::x :: "{v : (ForeignPtr Word8) | v == x}"
622:33-622:34::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
622:35-622:36::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
622:37-622:38::n :: "{v : Int | v == n && v >= 0}"
622:41-622:42::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
622:43-622:44::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
622:45-622:46::n :: "{v : Int | v == n && v >= 0}"
634:1-634:7::unpack :: "ByteString -> [Char]"
634:23-634:25::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | null v <=> true && bLens v == 0 && len v == 0}"
635:23-635:38::lq_anf__d457 :: "(IO [Char]) -> [Char]"
635:39-635:40::_ :: "((IO [Char]) -> [Char]) -> (IO [Char]) -> [Char]"
635:41-635:55::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO [Char]))\n-> (IO [Char])"
635:56-635:58::ds_d424 :: "(ForeignPtr Word8)"
635:59-635:60::_ :: "(({v : (Ptr Word8) | 0 <= plen v} -> (IO [Char])) -> (IO [Char]))\n-> ({v : (Ptr Word8) | 0 <= plen v} -> (IO [Char])) -> (IO [Char])"
635:62-635:63::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
636:5-636:7::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : Int | v >= 0 && v <= plen x1}\n-> {v : [Char] | len v == 0 && len v <= plen x1}\n-> (IO [Char])"
636:9-636:10::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
636:11-636:20::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
636:21-636:22::ds_d425 :: "{v : Int | v >= 0}"
636:25-636:26::ds_d426 :: "{v : Int | v >= 0}"
636:27-636:28::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
636:29-636:30::lq_anf__d45a :: "{v : Int | v == (1  :  int)}"
636:32-636:34::lq_anf__d45c :: "{v : [Char] | null v <=> true && bLens v == 0 && len v == 0 && len v >= 0}"
639:5-639:7::go :: "x1:{VV : (Ptr Word8) | 0 <= plen VV}\n-> {VV : Int | VV >= 0 && VV <= plen x1}\n-> {VV : [Char] | len VV == 0 && len VV <= plen x1}\n-> (IO [Char])"
639:8-639:9::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
639:12-639:15::acc :: "{VV : [Char] | len VV >= 0}"
639:18-639:22::_ :: "x1:{v : (Ptr Word8) | 0 < plen v}\n-> (IO {v : Word8 | v == deref x1})"
639:23-639:24::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
639:25-639:28::_ :: "(IO Word8) -> (Word8 -> (IO [Char])) -> (IO [Char])"
639:29-639:55::lq_anf__d456 :: "Word8 -> (IO [Char])"
639:30-639:31::e :: "Word8"
639:35-639:41::_ :: "[Char] -> (IO [Char])"
639:43-639:46::_ :: "Word8 -> Char"
639:47-639:48::e :: "{v : Word8 | v == e}"
639:49-639:50::_ :: "x1:Char\n-> x2:[Char]\n-> {v : [Char] | null v <=> false && bLens v == bLen x1 + bLens x2 && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
639:51-639:54::acc :: "{v : [Char] | v == acc && len v >= 0}"
640:18-640:22::_ :: "x1:{v : (Ptr Word8) | 0 < plen v}\n-> (IO {v : Word8 | v == deref x1})"
640:24-640:25::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
640:26-640:35::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
640:36-640:37::ds_d428 :: "{v : Int | v >= 0 && v <= plen p}"
640:39-640:42::_ :: "(IO Word8) -> (Word8 -> (IO [Char])) -> (IO [Char])"
640:44-640:74::lq_anf__d452 :: "Word8 -> (IO [Char])"
640:45-640:46::e :: "Word8"
640:50-640:52::go :: "x1:{VV : (Ptr Word8) | 0 <= plen VV}\n-> {VV : Int | VV >= 0 && VV <= plen x1}\n-> {VV : [Char] | len VV >= 0}\n-> (IO [Char])"
640:53-640:54::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
640:56-640:57::ds_d428 :: "{v : Int | v >= 0 && v <= plen p}"
640:57-640:58::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
640:58-640:59::lq_anf__d44Y :: "{v : Int | v == (1  :  int)}"
640:62-640:65::_ :: "Word8 -> Char"
640:66-640:67::e :: "{v : Word8 | v == e}"
640:68-640:69::_ :: "x1:Char\n-> x2:[Char]\n-> {v : [Char] | null v <=> false && bLens v == bLen x1 + bLens x2 && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
640:70-640:73::acc :: "{v : [Char] | v == acc && len v >= 0}"
648:1-648:19::prop_unpack_length :: "ByteString -> {v : Bool | Prop v}"
648:20-648:21::b :: "ByteString"
648:26-648:30::_ :: "x1:ByteString -> {v : Int | v == bLen x1 && v >= 0}"
648:31-648:32::b :: "{v : ByteString | v == b}"
648:34-648:36::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == v}"
648:37-648:43::_ :: "x1:[Char] -> {v : Int | v == len x1}"
648:45-648:51::_ :: "ByteString -> [Char]"
648:52-648:53::b :: "{v : ByteString | v == b}"
674:1-674:5::chop :: "x1:[Char] -> {v : Int | v >= 0 && v <= len x1} -> [Char]"
674:6-674:7::s :: "[Char]"
674:8-674:9::n :: "{v : Int | v >= 0 && v <= len s}"
674:12-674:14::s' :: "{v : [Char] | v == s' && len v >= 0 && bLens v >= 0}"
676:5-676:6::b :: "ByteString"
676:12-676:16::_ :: "[Char] -> ByteString"
676:17-676:18::s :: "{v : [Char] | v == s && len v >= 0 && bLens v >= 0}"
677:5-677:7::b' :: "{v : ByteString | bLen v == n}"
677:12-677:22::_ :: "x1:{v : Int | v >= 0}\n-> ByteString -> {v : ByteString | bLen v == x1}"
677:23-677:24::n :: "{v : Int | v == n && v >= 0 && v <= len s}"
677:25-677:26::b :: "{v : ByteString | v == b && bLen v >= 0}"
678:5-678:7::s' :: "[Char]"
678:12-678:18::_ :: "ByteString -> [Char]"
678:19-678:21::b' :: "{v : ByteString | v == b' && bLen v == n && bLen v >= 0}"
689:1-689:5::demo :: "[[Char]]"
689:12-689:23::lq_anf__d474 :: "{v : [[Char]] | null v <=> false && xListSelector v == ex30 && len v >= 0 && bLens v >= 0}"
689:13-689:16::ex6 :: "{v : [Char] | v == ex6 && len v >= 0 && bLens v >= 0}"
689:18-689:22::ex30 :: "{v : [Char] | v == ex30 && len v >= 0 && bLens v >= 0}"
691:5-691:7::ex :: "{v : [Char] | null v <=> false}"
691:12-691:37::_ :: "{v : [Char] | null v <=> false}"
691:13-691:16::lq_anf__d46P :: "Char"
691:17-691:20::lq_anf__d46Q :: "Char"
691:21-691:24::lq_anf__d46R :: "Char"
691:25-691:28::lq_anf__d46S :: "Char"
691:29-691:32::lq_anf__d46T :: "Char"
691:33-691:36::lq_anf__d46U :: "Char"
692:5-692:8::ex6 :: "[Char]"
692:12-692:16::_ :: "x1:[Char] -> {v : Int | v >= 0 && v <= len x1} -> [Char]"
692:17-692:19::ex :: "{v : [Char] | null v <=> false && v == ex && len v >= 0 && bLens v >= 0}"
692:20-692:21::lq_anf__d471 :: "{v : Int | v == (6  :  int)}"
693:5-693:9::ex30 :: "[Char]"
693:12-693:16::_ :: "x1:[Char] -> {v : Int | v >= 0 && v <= len x1} -> [Char]"
693:17-693:19::ex :: "{v : [Char] | null v <=> false && v == ex && len v >= 0 && bLens v >= 0}"
693:20-693:22::lq_anf__d472 :: "{v : Int | v == (30  :  int)}"
701:1-701:17::prop_chop_length :: "[Char] -> {v : Int | v >= 0} -> {v : Bool | Prop v}"
701:18-701:19::s :: "[Char]"
701:20-701:21::n :: "{v : Int | v >= 0}"
702:5-702:6::n :: "{v : Int | v == n && v >= 0}"
702:7-702:9::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 <= v}"
702:10-702:16::_ :: "x1:[Char] -> {v : Int | v == len x1}"
702:17-702:18::s :: "{v : [Char] | v == s && len v >= 0 && bLens v >= 0}"
702:25-702:31::_ :: "x1:[Char] -> {v : Int | v == len x1}"
702:33-702:37::_ :: "x1:[Char] -> {v : Int | v >= 0 && v <= len x1} -> [Char]"
702:38-702:39::s :: "{v : [Char] | v == s && len v >= 0 && bLens v >= 0}"
702:40-702:41::n :: "{v : Int | v == n && v >= 0}"
702:43-702:45::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == v}"
702:46-702:47::n :: "{v : Int | v == n && v >= 0}"
703:25-703:29::_ :: "{v : Bool | Prop v && v == GHC.Types.True}"
737:1-737:5::null :: "x1:ByteString -> {v : Bool | Prop v <=> bLen x1 == 0}"
737:26-737:27::l :: "{v : Int | v == l && v >= 0}"
737:28-737:30::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 == v}"
737:31-737:32::lq_anf__d42M :: "{v : Int | v == (0  :  int)}"
747:1-747:11::unsafeHead :: "{v : ByteString | bLen v /= 0} -> Word8"
747:25-747:40::lq_anf__d44x :: "(IO Word8) -> Word8"
747:41-747:42::_ :: "((IO Word8) -> Word8) -> (IO Word8) -> Word8"
748:27-748:41::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO Word8))\n-> (IO Word8)"
748:42-748:43::x :: "{v : (ForeignPtr Word8) | v == x}"
748:44-748:45::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && s <= plen v}\n  -> (IO Word8))\n -> (IO Word8))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && s <= plen v}\n    -> (IO Word8))\n-> (IO Word8)"
748:47-748:48::p :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && s <= plen VV}"
749:29-749:40::_ :: "p:(Ptr Word8) -> {v : Int | v < plen p && 0 <= v} -> (IO Word8)"
749:41-749:42::p :: "{v : (Ptr Word8) | v == p && fplen x == plen v && 0 <= plen v && s <= plen v}"
749:43-749:44::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
752:1-752:11::unsafeTail :: "x1:{v : ByteString | bLen v /= 0}\n-> {v : ByteString | bLen v == bLen x1 - 1}"
752:26-752:28::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
752:29-752:31::ps :: "{v : (ForeignPtr Word8) | v == ps}"
752:33-752:34::s :: "{v : Int | v == s && v >= 0 && v <= fplen ps}"
752:35-752:36::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
752:37-752:38::lq_anf__d42H :: "{v : Int | v == (1  :  int)}"
752:41-752:42::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen ps}"
752:43-752:44::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
752:45-752:46::lq_anf__d42J :: "{v : Int | v == (1  :  int)}"
760:1-760:6::group :: "x1:ByteString\n-> {v : [{v : ByteString | bLen v /= 0}] | bLens v == bLen x1}"
760:7-760:9::xs :: "ByteString"
761:7-761:11::_ :: "x1:ByteString -> {v : Bool | Prop v <=> bLen x1 == 0}"
761:12-761:14::xs :: "{v : ByteString | v == xs}"
761:19-761:21::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | null v <=> true && bLens v == 0 && len v == 0}"
762:24-762:25::y :: "Word8"
762:35-762:45::_ :: "{v : ByteString | bLen v /= 0} -> Word8"
762:46-762:48::xs :: "{v : ByteString | v == xs}"
763:25-763:27::ys :: "{VV : ByteString | VV == ys}"
763:29-763:31::zs :: "{VV : ByteString | VV == zs}"
763:35-763:43::_ :: "Word8\n-> x2:ByteString\n-> {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen x2}"
763:44-763:45::y :: "{v : Word8 | v == y}"
763:47-763:57::_ :: "x1:{v : ByteString | bLen v /= 0}\n-> {v : ByteString | bLen v == bLen x1 - 1}"
763:58-763:60::xs :: "{v : ByteString | v == xs}"
764:23-764:24::y :: "{v : Word8 | v == y}"
764:25-764:31::_ :: "Word8\n-> x2:ByteString\n-> {v : ByteString | bLen v == bLen x2 + 1 && bLen v /= 0}"
764:32-764:34::ys :: "{v : ByteString | v == ys && v == ys}"
764:36-764:37::_ :: "x1:{v : ByteString | v /= Memory.empty && bLen v /= 0}\n-> x2:[{v : ByteString | v /= Memory.empty && bLen v /= 0}]<\\_ VV -> v /= Memory.empty && bLen v /= 0>\n-> {v : [{v : ByteString | v /= Memory.empty && bLen v /= 0}]<\\_ VV -> v /= Memory.empty && bLen v /= 0> | null v <=> false && bLens v == bLen x1 + bLens x2 && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2}"
764:38-764:43::group :: "x1:ByteString\n-> {v : [{v : ByteString | bLen v /= 0}] | bLens v == bLen x1}"
764:44-764:46::zs :: "{v : ByteString | v == zs && v == zs}"
774:1-774:6::bLens :: "x1:[ByteString] -> {VV : Int | VV == bLens x1}"
774:16-774:17::I# :: "x1:Int# -> {v : Int | v == (x1  :  int)}"
775:16-775:20::_ :: "x1:ByteString -> {v : Int | v == bLen x1 && v >= 0}"
775:21-775:22::b :: "{v : ByteString | v == b}"
775:23-775:24::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
775:25-775:30::bLens :: "x1:[ByteString] -> {VV : Int | VV == bLens x1}"
775:31-775:33::bs :: "{v : [ByteString] | v == bs && len v >= 0}"
786:1-786:9::spanByte :: "Word8\n-> x2:ByteString\n-> {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen x2}"
786:10-786:11::c :: "Word8"
786:12-786:14::ps :: "ByteString"
786:28-786:43::lq_anf__d43f :: "(IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})\n-> {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps}"
786:44-786:45::_ :: "((IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})\n -> {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})\n-> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})\n-> {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps}"
786:46-786:60::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps}))\n-> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})"
786:61-786:62::x :: "{v : (ForeignPtr Word8) | v == x}"
786:63-786:64::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && s <= plen v && l <= plen v}\n  -> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps}))\n -> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps}))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && s <= plen v && l <= plen v}\n    -> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps}))\n-> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})"
786:66-786:67::p :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && s <= plen VV && l <= plen VV}"
787:5-787:7::_ :: "{v : (Ptr (Any *)) | l <= plen v}\n-> {v : Int | v == 0 && v == bLen Memory.empty && v >= 0 && v <= s && v <= l}\n-> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})"
787:10-787:11::p :: "{v : (Ptr Word8) | v == p && fplen x == plen v && 0 <= plen v && s <= plen v && l <= plen v}"
787:12-787:21::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr (Any *)) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
787:22-787:23::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
787:25-787:26::lq_anf__d43i :: "{v : Int | v == (0  :  int)}"
789:5-789:7::go :: "forall a.\n{VV : (Ptr a) | l <= plen VV}\n-> {VV : Int | VV == 0 && VV == bLen Memory.empty && VV >= 0 && VV <= s && VV <= l}\n-> (IO {VV : (ByteString, ByteString) | bLen first VV + bLen second VV == bLen ps})"
789:8-789:9::p :: "{VV : (Ptr a) | l <= plen VV}"
789:10-789:11::i :: "{VV : Int | VV >= 0 && VV <= l}"
789:14-789:15::i :: "{v : Int | v == i && v >= 0 && v <= l}"
789:16-789:18::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 >= v}"
789:19-789:20::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
789:26-789:32::_ :: "{v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps}\n-> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})"
789:33-789:44::lq_anf__d43e :: "{v : (ByteString, ByteString) | second v == Memory.empty && x_Tuple22 v == Memory.empty && snd v == Memory.empty}"
789:34-789:36::lq_anf__d432 :: "{v : ByteString | v == ps && v == Memory.BS x s l && bLen v == l && bOff v == s && bPtr v == x}"
789:38-789:43::empty :: "{v : ByteString | v == Memory.empty && bLen v == 0}"
790:29-790:31::c' :: "Word8"
790:35-790:46::_ :: "p:(Ptr a) -> {v : Int | v < plen p && 0 <= v} -> (IO Word8)"
790:47-790:48::p :: "{v : (Ptr a) | v == p && l <= plen v}"
790:49-790:50::i :: "{v : Int | v == i && v >= 0 && v <= l}"
791:32-791:33::c :: "{v : Word8 | v == c}"
791:34-791:36::_ :: "x1:Word8 -> x2:Word8 -> {v : Bool | Prop v <=> x1 /= v}"
791:37-791:39::c' :: "{v : Word8 | v == c'}"
792:38-792:44::_ :: "{v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps}\n-> (IO {v : (ByteString, ByteString) | bLen first v + bLen second v == bLen ps})"
792:45-792:79::lq_anf__d43c :: "(ByteString, ByteString)"
792:46-792:56::_ :: "x1:{v : Int | v >= 0}\n-> ByteString -> {v : ByteString | bLen v == x1}"
792:57-792:58::i :: "{v : Int | v == i && v >= 0 && v <= l}"
792:59-792:61::lq_anf__d432 :: "{v : ByteString | v == ps && v == Memory.BS x s l && bLen v == l && bOff v == s && bPtr v == x}"
792:63-792:73::_ :: "x1:{v : Int | v >= 0}\n-> x2:ByteString -> {v : ByteString | bLen v == bLen v - x1}"
792:74-792:75::i :: "{v : Int | v == i && v >= 0 && v <= l}"
792:76-792:78::lq_anf__d432 :: "{v : ByteString | v == ps && v == Memory.BS x s l && bLen v == l && bOff v == s && bPtr v == x}"
793:38-793:40::go :: "{VV : (Ptr a) | l <= plen VV}\n-> {VV : Int | VV >= 0 && VV <= l}\n-> (IO {VV : (ByteString, ByteString) | bLen first VV + bLen second VV == bLen ps})"
793:42-793:43::p :: "{v : (Ptr a) | v == p && l <= plen v}"
793:45-793:46::i :: "{v : Int | v == i && v >= 0 && v <= l}"
793:46-793:47::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
793:47-793:48::lq_anf__d438 :: "{v : Int | v == (1  :  int)}"
838:1-838:13::unsafeCreate :: "x1:{v : Int | v >= 0}\n-> ({VV : (Ptr Word8) | plen VV == x1 && 0 <= plen VV} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
838:14-838:15::n :: "{v : Int | v >= 0}"
838:16-838:17::f :: "{VV : (Ptr Word8) | plen VV == n && 0 <= plen VV} -> (IO ())"
838:20-838:27::_ :: "x1:{v : Int | v >= 0}\n-> ({v : (Ptr Word8) | plen v == x1 && 0 <= plen v} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
838:28-838:29::n :: "{v : Int | v == n && v >= 0}"
838:30-838:31::f :: "{v : (Ptr Word8) | plen v == n && 0 <= plen v} -> (IO ())"
848:1-848:5::cons :: "Word8\n-> x2:ByteString\n-> {v : ByteString | bLen v == bLen x2 + 1 && bLen v /= 0}"
848:6-848:7::c :: "Word8"
848:21-848:33::_ :: "x1:{v : Int | v >= 0}\n-> ({v : (Ptr Word8) | plen v == x1 && 0 <= plen v} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
848:35-848:36::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
848:36-848:37::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
848:37-848:38::lq_anf__d46G :: "{v : Int | v == (1  :  int)}"
848:40-848:41::_ :: "(({v : (Ptr Word8) | 0 <= plen v && l <= plen v} -> (IO ()))\n -> {v : ByteString | v /= Memory.empty && bLen v /= 0 && l <= bLen v})\n-> ({v : (Ptr Word8) | 0 <= plen v && l <= plen v} -> (IO ()))\n-> {v : ByteString | v /= Memory.empty && bLen v /= 0 && l <= bLen v}"
848:43-848:44::p :: "{VV : (Ptr Word8) | 0 <= plen VV && l <= plen VV}"
848:48-848:62::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO ()))\n-> (IO ())"
848:63-848:64::x :: "{v : (ForeignPtr Word8) | v == x}"
848:65-848:66::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n  -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n    -> (IO ()))\n-> (IO ())"
848:68-848:69::f :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && l <= plen VV && s <= plen VV}"
849:9-849:13::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
849:14-849:15::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v && l <= plen v}"
849:16-849:17::c :: "{v : Word8 | v == c}"
850:9-850:15::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : CSize | v <= plen x1 && v <= plen x2}\n-> (IO ())"
850:17-850:18::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v && l <= plen v}"
850:19-850:28::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
850:29-850:30::lq_anf__d46L :: "{v : Int | v == (1  :  int)}"
850:33-850:34::f :: "{v : (Ptr Word8) | v == f && fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}"
850:35-850:44::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
850:45-850:46::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
850:49-850:61::_ :: "x1:Int -> {v : CSize | v == x1}"
850:62-850:63::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
854:1-854:6::empty :: "{v : ByteString | bLen v == 0}"
854:9-854:11::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
854:12-854:26::nullForeignPtr :: "{v : (ForeignPtr Word8) | v == Memory.nullForeignPtr && fplen v == 0}"
854:27-854:28::lq_anf__d42N :: "{v : Int | v == (0  :  int)}"
854:29-854:30::lq_anf__d42O :: "{v : Int | v == (0  :  int)}"
859:1-859:7::malloc :: "forall a.\nx1:{v : Int | v >= 0}\n-> (IO {VV : (ForeignPtr a) | fplen VV == x1 && 0 <= fplen VV})"
859:10-859:31::mallocForeignPtrBytes :: "forall a.\nx1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
876:1-876:7::memcpy :: "x1:{VV : (Ptr Word8) | 0 <= plen VV}\n-> x2:{VV : (Ptr Word8) | 0 <= plen VV}\n-> {size : CSize | size <= plen x2 && size <= plen x1}\n-> (IO ())"
876:8-876:9::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
876:10-876:11::q :: "{VV : (Ptr Word8) | 0 <= plen VV}"
876:12-876:13::s :: "{size : CSize | size <= plen q && size <= plen p}"
876:16-876:24::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : CSize | v <= plen x1 && v <= plen x2}\n-> (IO (Ptr Word8))"
876:25-876:26::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
876:27-876:28::q :: "{v : (Ptr Word8) | v == q && 0 <= plen v}"
876:29-876:30::s :: "{v : CSize | v == s && v <= plen q && v <= plen p}"
876:31-876:33::_ :: "(IO (Ptr Word8)) -> (IO ()) -> (IO ())"
876:34-876:40::_ :: "() -> (IO ())"
876:41-876:43::() :: "{v : () | v == GHC.Tuple.()}"
880:1-880:15::nullForeignPtr :: "{v : (ForeignPtr Word8) | fplen v == 0}"
880:18-880:33::lq_anf__d42K :: "(IO (ForeignPtr Word8)) -> (ForeignPtr Word8)"
880:34-880:35::_ :: "((IO (ForeignPtr Word8)) -> (ForeignPtr Word8))\n-> (IO (ForeignPtr Word8)) -> (ForeignPtr Word8)"
880:36-880:50::_ :: "x1:(Ptr Word8)\n-> (IO {v : (ForeignPtr Word8) | fplen v == plen x1 && 0 <= fplen v})"
880:51-880:58::lq_anf__d42L :: "(Ptr Word8)"
884:1-884:8::create' :: "x1:{v : Int | v >= 0}\n-> ({VV : (Ptr Word8) | plen VV == x1 && 0 <= plen VV} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
884:9-884:10::n :: "{v : Int | v >= 0}"
884:11-884:15::fill :: "{VV : (Ptr Word8) | plen VV == n && 0 <= plen VV} -> (IO ())"
884:18-884:33::lq_anf__d460 :: "(IO {v : ByteString | bLen v == n})\n-> {v : ByteString | bLen v == n}"
884:34-884:35::_ :: "((IO {v : ByteString | bLen v == n})\n -> {v : ByteString | bLen v == n})\n-> (IO {v : ByteString | bLen v == n})\n-> {v : ByteString | bLen v == n}"
885:3-885:5::fp :: "{VV : (ForeignPtr Word8) | fplen VV == n && 0 <= fplen VV}"
885:10-885:31::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
885:32-885:33::n :: "{v : Int | v == n && v >= 0}"
886:3-886:17::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO ()))\n-> (IO ())"
886:18-886:20::fp :: "{v : (ForeignPtr Word8) | v == fp && fplen v == n && 0 <= fplen v}"
886:21-886:25::fill :: "{v : (Ptr Word8) | plen v == n && 0 <= plen v} -> (IO ())"
887:3-887:9::_ :: "{v : ByteString | bLen v == n}\n-> (IO {v : ByteString | bLen v == n})"
887:11-887:13::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
887:14-887:16::fp :: "{v : (ForeignPtr Word8) | v == fp && fplen v == n && 0 <= fplen v}"
887:17-887:18::lq_anf__d463 :: "{v : Int | v == (0  :  int)}"
887:19-887:20::n :: "{v : Int | v == n && v >= 0}"