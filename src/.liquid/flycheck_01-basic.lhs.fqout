UNSAT [65,64,44,41,38] 
 
 
 
solution: k_1039 := [((VV#1038 = GHC.Prim.void##0l), Cmp0(VV#1038, GHC.Prim.void##0l))] 

solution: k_1043 := [((VV#1042 >= 0), Auto3(VV#1042));((VV#1042 >= Intro.zero#rou), Cmp(VV#1042, Intro.zero#rou));((VV#1042 >= fix#Intro.one#39##35#rpy), Cmp(VV#1042, fix#Intro.one#39##35#rpy));((VV#1042 >= lq_anf__d1Hh), Cmp(VV#1042, lq_anf__d1Hh));((VV#1042 >= n#a1BS), Cmp(VV#1042, n#a1BS));((VV#1042 >= Intro.zero#rou), Cmp5(VV#1042, Intro.zero#rou));((VV#1042 >= fix#Intro.one#39##35#rpy), Cmp5(VV#1042, fix#Intro.one#39##35#rpy));((VV#1042 >= lq_anf__d1Hh), Cmp5(VV#1042, lq_anf__d1Hh));((VV#1042 >= n#a1BS), Cmp5(VV#1042, n#a1BS));((VV#1042 >= 0), CmpZ1(VV#1042))] 

solution: k_1113 := [((VV#1112 = GHC.Prim.void##0l), Cmp0(VV#1112, GHC.Prim.void##0l))] 

solution: k_624 := [((VV#623 = GHC.Prim.void##0l), Cmp0(VV#623, GHC.Prim.void##0l))] 

solution: k_815 := [((VV#814 = GHC.Prim.void##0l), Cmp0(VV#814, GHC.Prim.void##0l))] 

//QUALIFIERS 

qualif Auto(v:int):((v mod 2) = 0)

qualif Auto0(VV:FAppTy (List ) (GHC.Types.Char )):false

qualif Auto1(v:int):(v != 0)
qualif Auto2(v:int):(v = 0)

qualif Auto3(v:int):(v >= 0)
qualif Auto4(v:int):(v < 100)

qualif Auto5(v:GHC.Types.Bool , fix##126#A0:int):(Prop(v) <=> (fix##126#A0 > 0))

qualif Auto6(v:int):(0 <= v)
qualif Bot(v:@(0)):(0 = 1)

qualif Bot0(v:obj):(0 = 1)
qualif Bot1(v:bool):(0 = 1)

qualif Bot2(v:int):(0 = 1)
qualif Cmp(v:int, ~A:int):(v >= ~A)

qualif Cmp0(v:@(0), ~A:@(0)):(v = ~A)
qualif Cmp1(v:int, ~A:int):(v != ~A)

qualif Cmp10(v:@(0), ~A:@(0)):(v <= ~A)
qualif Cmp2(v:int, ~A:int):(v <= ~A)

qualif Cmp3(v:int, ~A:int):(v = ~A)
qualif Cmp4(v:int, ~A:int):(v < ~A)

qualif Cmp5(v:@(0), ~A:@(0)):(v >= ~A)
qualif Cmp6(v:@(0), ~A:@(0)):(v > ~A)

qualif Cmp7(v:@(0), ~A:@(0)):(v != ~A)
qualif Cmp8(v:@(0), ~A:@(0)):(v < ~A)

qualif Cmp9(v:int, ~A:int):(v > ~A)

qualif CmpLen(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) >= len([~A]))

qualif CmpLen0(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) = len([~A]))

qualif CmpLen1(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) < len([~A]))

qualif CmpLen2(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) <= len([~A]))

qualif CmpLen3(v:FAppTy (List ) @(0), ~A:FAppTy (List ) @(1)):(len([v]) > len([~A]))

qualif CmpZ(v:@(0)):(v < 0)
qualif CmpZ0(v:@(0)):(v != 0)

qualif CmpZ1(v:@(0)):(v >= 0)
qualif CmpZ2(v:@(0)):(v = 0)

qualif CmpZ3(v:@(0)):(v > 0)
qualif CmpZ4(v:@(0)):(v <= 0)

qualif EqLen(v:int, ~A:FAppTy (List ) @(0)):(v = len([~A]))

qualif False(v:bool):(~ ((Bexp v)))

qualif False1(v:GHC.Types.Bool ):(~ (Prop(v)))

qualif Fst(v:@(0), fix##126#Y:@(1)):(v = fst([fix##126#Y]))

qualif IsEmp(v:GHC.Types.Bool , ~A:FAppTy (List ) @(0)):(Prop(v) <=> (len([~A]) > 0))

qualif IsEmp0(v:GHC.Types.Bool , ~A:FAppTy (List ) @(0)):(Prop(v) <=> (len([~A]) = 0))

qualif LenAcc(v:int, ~A:FAppTy (List ) @(0), ~B:int):(v = (len([~A]) + ~B))

qualif LenDiff(v:FAppTy (List ) @(0), ~A:int):(len([v]) = (~A - 1))

qualif LenDiff0(v:FAppTy (List ) @(0), ~A:int):(len([v]) = (~A + 1))

qualif LenEq(v:FAppTy (List ) @(0), ~A:int):(~A = len([v]))

qualif ListZ(v:FAppTy (List ) @(0)):(len([v]) = 0)

qualif ListZ0(v:FAppTy (List ) @(0)):(len([v]) >= 0)

qualif ListZ1(v:FAppTy (List ) @(0)):(len([v]) > 0)

qualif One(v:int):(v = 1)

qualif Papp(v:@(0), ~P:FAppTy (Pred ) @(0)):papp1(~P, v)

qualif Papp2(v:@(0), ~X:@(1), ~P:FAppTy (FAppTy (Pred ) @(0)) @(1)):papp2(~P, v, ~X)

qualif Papp3(v:@(0), ~X:@(1), ~Y:@(2), ~P:FAppTy (FAppTy (FAppTy (Pred ) @(0)) @(1)) @(2)):papp3(~P, v, ~X, ~Y)

qualif Snd(v:@(0), fix##126#Y:@(1)):(v = snd([fix##126#Y]))

qualif True(v:bool):(Bexp v)

qualif True1(v:GHC.Types.Bool ):Prop(v) 

