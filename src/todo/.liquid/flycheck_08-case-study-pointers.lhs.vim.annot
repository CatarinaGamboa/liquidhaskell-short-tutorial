207:1-207:6::zero4 :: "forall a. (IO (ForeignPtr a))"
207:12-207:14::fp :: "{VV : (ForeignPtr a) | 0 <= fplen VV}"
207:18-207:24::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
207:25-207:26::lq_anf__d3Z7 :: "{v : Int | v == (4  :  int)}"
208:12-208:26::_ :: "x1:(ForeignPtr a)\n-> ({v : (Ptr a) | plen v == fplen x1 && 0 <= plen v} -> (IO ()))\n-> (IO ())"
208:27-208:29::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
208:30-208:31::_ :: "(({v : (Ptr a) | fplen fp == plen v && zero <= plen v} -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr a) | fplen fp == plen v && zero <= plen v}\n    -> (IO ()))\n-> (IO ())"
208:33-208:34::p :: "{VV : (Ptr a) | fplen fp == plen VV && zero <= plen VV}"
209:14-209:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
209:20-209:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
209:22-209:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
209:32-209:33::lq_anf__d3Za :: "{v : Int | v == (0  :  int)}"
209:35-209:39::zero :: "{v : Word8 | v == zero}"
210:14-210:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
210:20-210:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
210:22-210:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
210:32-210:33::lq_anf__d3Zd :: "{v : Int | v == (1  :  int)}"
210:35-210:39::zero :: "{v : Word8 | v == zero}"
211:14-211:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
211:20-211:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
211:22-211:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
211:32-211:33::lq_anf__d3Zg :: "{v : Int | v == (2  :  int)}"
211:35-211:39::zero :: "{v : Word8 | v == zero}"
212:14-212:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
212:20-212:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
212:22-212:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
212:32-212:33::lq_anf__d3Zj :: "{v : Int | v == (3  :  int)}"
212:35-212:39::zero :: "{v : Word8 | v == zero}"
213:12-213:18::_ :: "(ForeignPtr a) -> (IO (ForeignPtr a))"
213:19-213:21::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
215:12-215:16::zero :: "Word8"
215:19-215:20::_ :: "Word8"
338:1-338:6::exBad :: "forall a. (IO (ForeignPtr a))"
338:12-338:14::fp :: "{VV : (ForeignPtr a) | 0 <= fplen VV}"
338:18-338:24::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
338:25-338:26::lq_anf__d3YL :: "{v : Int | v == (4  :  int)}"
339:12-339:26::_ :: "x1:(ForeignPtr a)\n-> ({v : (Ptr a) | plen v == fplen x1 && 0 <= plen v} -> (IO ()))\n-> (IO ())"
339:27-339:29::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
339:30-339:31::_ :: "(({v : (Ptr a) | fplen fp == plen v && zero <= plen v} -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr a) | fplen fp == plen v && zero <= plen v}\n    -> (IO ()))\n-> (IO ())"
339:33-339:34::p :: "{VV : (Ptr a) | fplen fp == plen VV && zero <= plen VV}"
340:14-340:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
340:20-340:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
340:22-340:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
340:32-340:33::lq_anf__d3YO :: "{v : Int | v == (0  :  int)}"
340:35-340:39::zero :: "{v : Word8 | v == zero}"
341:14-341:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
341:20-341:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
341:22-341:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
341:32-341:33::lq_anf__d3YR :: "{v : Int | v == (1  :  int)}"
341:35-341:39::zero :: "{v : Word8 | v == zero}"
342:14-342:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
342:20-342:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
342:22-342:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
342:32-342:33::lq_anf__d3YU :: "{v : Int | v == (2  :  int)}"
342:35-342:39::zero :: "{v : Word8 | v == zero}"
343:14-343:18::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
343:20-343:21::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
343:22-343:31::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
343:32-343:33::lq_anf__d3YX :: "{v : Int | v == (5  :  int)}"
343:35-343:39::zero :: "{v : Word8 | v == zero}"
344:12-344:18::_ :: "(ForeignPtr a) -> (IO (ForeignPtr a))"
344:19-344:21::fp :: "{v : (ForeignPtr a) | v == fp && 0 <= fplen v}"
346:12-346:16::zero :: "Word8"
346:19-346:20::_ :: "Word8"
375:5-375:9::bPtr :: "ByteString -> (ForeignPtr Word8)"
376:5-376:9::bOff :: "ByteString -> Int"
377:5-377:9::bLen :: "ByteString -> Int"
419:1-419:6::good1 :: "(IO {v : ByteString | bLen v == 5})"
419:12-419:14::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr && 0 <= fplen VV}"
419:18-419:24::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
419:25-419:26::lq_anf__d3YE :: "{v : Int | v == (5  :  int)}"
420:12-420:18::_ :: "{v : ByteString | bLen v == 5 && v /= Memory.empty}\n-> (IO {v : ByteString | bLen v == 5 && v /= Memory.empty})"
420:20-420:22::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
420:23-420:25::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr && 0 <= fplen v}"
420:26-420:27::lq_anf__d3YG :: "{v : Int | v == (0  :  int)}"
420:28-420:29::lq_anf__d3YH :: "{v : Int | v == (5  :  int)}"
423:1-423:6::good2 :: "(IO {v : ByteString | bLen v == 3})"
423:12-423:14::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr && 0 <= fplen VV}"
423:18-423:24::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
423:25-423:26::lq_anf__d3Yy :: "{v : Int | v == (5  :  int)}"
424:12-424:18::_ :: "{v : ByteString | bLen v == 3 && v /= Memory.empty}\n-> (IO {v : ByteString | bLen v == 3 && v /= Memory.empty})"
424:20-424:22::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
424:23-424:25::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr && 0 <= fplen v}"
424:26-424:27::lq_anf__d3YA :: "{v : Int | v == (2  :  int)}"
424:28-424:29::lq_anf__d3YB :: "{v : Int | v == (3  :  int)}"
438:1-438:5::bad1 :: "(IO ByteString)"
438:11-438:13::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr && 0 <= fplen VV}"
438:17-438:23::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
438:24-438:25::lq_anf__d3Ys :: "{v : Int | v == (3  :  int)}"
439:11-439:17::_ :: "ByteString -> (IO ByteString)"
439:19-439:21::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
439:22-439:24::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr && 0 <= fplen v}"
439:25-439:26::lq_anf__d3Yu :: "{v : Int | v == (0  :  int)}"
439:27-439:29::lq_anf__d3Yv :: "{v : Int | v == (10  :  int)}"
441:1-441:5::bad2 :: "(IO ByteString)"
441:11-441:13::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr && 0 <= fplen VV}"
441:17-441:23::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
441:24-441:25::lq_anf__d3Ym :: "{v : Int | v == (3  :  int)}"
442:11-442:17::_ :: "ByteString -> (IO ByteString)"
442:19-442:21::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
442:22-442:24::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr && 0 <= fplen v}"
442:25-442:26::lq_anf__d3Yo :: "{v : Int | v == (2  :  int)}"
442:27-442:28::lq_anf__d3Yp :: "{v : Int | v == (2  :  int)}"
476:1-476:7::create :: "x1:{v : Int | v >= 0}\n-> ({VV : (Ptr Word8) | plen VV == x1 && 0 <= plen VV} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
476:8-476:9::n :: "{v : Int | v >= 0}"
476:10-476:14::fill :: "{VV : (Ptr Word8) | plen VV == n && 0 <= plen VV} -> (IO ())"
476:17-476:32::lq_anf__d40R :: "(IO {v : ByteString | bLen v == n})\n-> {v : ByteString | bLen v == n}"
476:33-476:34::_ :: "((IO {v : ByteString | bLen v == n})\n -> {v : ByteString | bLen v == n})\n-> (IO {v : ByteString | bLen v == n})\n-> {v : ByteString | bLen v == n}"
477:3-477:5::fp :: "{VV : (ForeignPtr Word8) | fplen VV == n && 0 <= fplen VV}"
477:10-477:16::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
477:17-477:18::n :: "{v : Int | v == n && v >= 0}"
478:3-478:17::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO ()))\n-> (IO ())"
478:18-478:20::fp :: "{v : (ForeignPtr Word8) | v == fp && fplen v == n && 0 <= fplen v}"
478:21-478:25::fill :: "{v : (Ptr Word8) | plen v == n && 0 <= plen v} -> (IO ())"
479:3-479:9::_ :: "{v : ByteString | bLen v == n}\n-> (IO {v : ByteString | bLen v == n})"
479:11-479:13::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
479:14-479:16::fp :: "{v : (ForeignPtr Word8) | v == fp && fplen v == n && 0 <= fplen v}"
479:17-479:18::lq_anf__d40U :: "{v : Int | v == (0  :  int)}"
479:19-479:20::n :: "{v : Int | v == n && v >= 0}"
504:1-504:5::pack :: "x1:[Char] -> {v : ByteString | bLen v == len x1}"
504:6-504:9::str :: "[Char]"
504:17-504:23::_ :: "x1:{v : Int | v >= 0}\n-> ({v : (Ptr Word8) | plen v == x1 && 0 <= plen v} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
504:24-504:25::n :: "{v : Int | v == n && v == len str}"
504:26-504:27::_ :: "(({v : (Ptr Word8) | plen v == n && plen v == len xs && plen v == len str && 0 <= plen v && n <= plen v}\n  -> (IO ()))\n -> {v : ByteString | bLen v == n && bLen v == len str})\n-> ({v : (Ptr Word8) | plen v == n && plen v == len xs && plen v == len str && 0 <= plen v && n <= plen v}\n    -> (IO ()))\n-> {v : ByteString | bLen v == n && bLen v == len str}"
504:28-504:41::lq_anf__d415 :: "{v : (Ptr Word8) | plen v == n && plen v == len xs && plen v == len str && 0 <= plen v && n <= plen v}\n-> (IO ())"
504:29-504:30::p :: "{VV : (Ptr Word8) | plen VV == n && plen VV == len xs && plen VV == len str && 0 <= plen VV && n <= plen VV}"
504:34-504:36::_ :: "x1:{v : (Ptr Word8) | plen v == len str}\n-> {v : [Word8] | len v == len str && len v >= 0 && len v <= plen x1}\n-> (IO ())"
504:37-504:38::p :: "{v : (Ptr Word8) | v == p && plen v == n && plen v == len xs && plen v == len str && 0 <= plen v && n <= plen v}"
504:39-504:41::xs :: "{v : [Word8] | v == xs && len v == len str && len v >= 0 && bLens v >= 0}"
506:3-506:4::n :: "{v : Int | v == len str}"
506:17-506:23::_ :: "x1:[Char] -> {v : Int | v == len x1}"
506:24-506:27::str :: "{v : [Char] | v == str && len v >= 0 && bLens v >= 0}"
507:3-507:5::xs :: "{v : [Word8] | len v == len str}"
507:17-507:20::_ :: "(Char -> Word8) -> x3:[Char] -> {v : [Word8] | len v == len x3}"
507:21-507:24::c2w :: "Char -> Word8"
507:25-507:28::str :: "{v : [Char] | v == str && len v >= 0 && bLens v >= 0}"
508:3-508:5::go :: "forall a.\n(Storable [Bivariant]\n[] a) =>\nx1:{VV : (Ptr a) | plen VV == len str}\n-> {VV : [a] | len VV == len str && len VV >= 0 && len VV <= plen x1}\n-> (IO ())"
508:6-508:7::p :: "(Ptr a)"
508:17-508:21::_ :: "{v : (Ptr a) | 0 < plen v} -> a -> (IO ())"
508:22-508:23::p :: "{v : (Ptr a) | v == p}"
508:24-508:25::x :: "{VV : a | VV == x}"
508:26-508:28::_ :: "(IO ()) -> (IO ()) -> (IO ())"
508:29-508:31::go :: "x1:(Ptr a)\n-> {VV : [a] | len VV >= 0 && len VV <= plen x1 && len VV <= len str}\n-> (IO ())"
508:33-508:40::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr a) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
508:41-508:42::p :: "{v : (Ptr a) | v == p}"
508:43-508:44::lq_anf__d411 :: "{v : Int | v == (1  :  int)}"
508:46-508:48::xs :: "{v : [a] | v == xs && len v >= 0 && bLens v >= 0}"
509:17-509:23::_ :: "() -> (IO ())"
509:25-509:27::() :: "{v : () | v == GHC.Tuple.()}"
539:1-539:11::unsafeTake :: "x1:{v : Int | v >= 0}\n-> {b : ByteString | x1 <= bLen b}\n-> {v : ByteString | bLen v == x1}"
539:12-539:13::n :: "{v : Int | v >= 0}"
539:27-539:29::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
539:30-539:31::x :: "{v : (ForeignPtr Word8) | v == x}"
539:32-539:33::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
539:34-539:35::n :: "{v : Int | v == n && v >= 0}"
568:1-568:7::unpack :: "x1:ByteString -> {VV : [Char] | len VV == bLen x1}"
568:23-568:25::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | null v <=> true && len v == 0 && bLens v == 0}"
569:23-569:38::lq_anf__d3ZT :: "(IO {v : [Char] | len v > 0}) -> {v : [Char] | len v > 0}"
569:39-569:40::_ :: "((IO {v : [Char] | len v > 0}) -> {v : [Char] | len v > 0})\n-> (IO {v : [Char] | len v > 0}) -> {v : [Char] | len v > 0}"
569:41-569:55::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO {v : [Char] | len v > 0}))\n-> (IO {v : [Char] | len v > 0})"
569:56-569:58::ds_d3Xn :: "(ForeignPtr Word8)"
569:59-569:60::_ :: "((x5:{v : (Ptr Word8) | 0 <= plen v}\n  -> (IO {v : [Char] | len v > 0 && len v <= plen x5}))\n -> (IO {v : [Char] | len v > 0}))\n-> (x5:{v : (Ptr Word8) | 0 <= plen v}\n    -> (IO {v : [Char] | len v > 0 && len v <= plen x5}))\n-> (IO {v : [Char] | len v > 0})"
569:62-569:63::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
570:4-570:6::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v >= 0 && v <= plen x1}\n-> x3:{v : [Char] | len v >= 0}\n-> (IO {v : [Char] | len v == 1 + x2 + len x3 && v /= x3 && len v > 0 && len v > len x3})"
570:8-570:9::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
570:10-570:19::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
570:20-570:21::ds_d3Xo :: "{v : Int | v >= 0}"
570:24-570:25::ds_d3Xp :: "{v : Int | v >= 0}"
570:26-570:27::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
570:28-570:29::lq_anf__d3ZW :: "{v : Int | v == (1  :  int)}"
570:32-570:34::lq_anf__d3ZY :: "{v : [Char] | null v <=> true && len v == 0 && bLens v == 0 && len v >= 0 && bLens v >= 0}"
572:4-572:6::go :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v >= 0 && v <= plen x1}\n-> x3:{v : [Char] | len v >= 0}\n-> (IO {v : [Char] | len v == 1 + x2 + len x3 && v /= x3 && len v > 0 && len v > len x3})"
572:7-572:8::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
572:11-572:14::acc :: "{VV : [Char] | len VV >= 0}"
572:17-572:21::_ :: "x1:{v : (Ptr Word8) | 0 < plen v}\n-> (IO {v : Word8 | v == deref x1})"
572:22-572:23::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
572:24-572:27::_ :: "(IO Word8)\n-> (Word8\n    -> (IO {v : [Char] | v /= acc && len v > 0 && len v > len acc}))\n-> (IO {v : [Char] | v /= acc && len v > 0 && len v > len acc})"
572:28-572:54::lq_anf__d3ZS :: "Word8\n-> (IO {v : [Char] | v /= acc && len v > 0 && len v > len acc})"
572:29-572:30::e :: "Word8"
572:34-572:40::_ :: "{v : [Char] | v /= acc && len v > 0 && len v > len acc}\n-> (IO {v : [Char] | v /= acc && len v > 0 && len v > len acc})"
572:42-572:45::_ :: "Word8 -> Char"
572:46-572:47::e :: "{v : Word8 | v == e}"
572:48-572:49::_ :: "x1:Char\n-> x2:[Char]\n-> {v : [Char] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2 && bLens v == bLen x1 + bLens x2}"
572:50-572:53::acc :: "{v : [Char] | v == acc && len v >= 0 && bLens v >= 0}"
573:17-573:21::_ :: "x1:{v : (Ptr Word8) | 0 < plen v}\n-> (IO {v : Word8 | v == deref x1})"
573:23-573:24::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
573:25-573:34::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
573:35-573:36::ds_d3Xr :: "{v : Int | v >= 0 && v <= plen p}"
573:38-573:41::_ :: "(IO Word8)\n-> (Word8\n    -> (IO {v : [Char] | v /= acc && len v > 0 && len v > len acc}))\n-> (IO {v : [Char] | v /= acc && len v > 0 && len v > len acc})"
573:44-573:74::lq_anf__d3ZO :: "Word8\n-> (IO {v : [Char] | v /= acc && len v > 0 && len v > len acc})"
573:45-573:46::e :: "Word8"
573:50-573:52::go :: "x1:{VV : (Ptr Word8) | 0 <= plen VV}\n-> x2:{VV : Int | VV >= 0 && VV <= plen x1}\n-> x3:{VV : [Char] | len VV >= 0}\n-> (IO {VV : [Char] | len VV == 1 + x2 + len x3 && VV /= x3 && len VV > 0 && len VV > len x3})"
573:53-573:54::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
573:56-573:57::ds_d3Xr :: "{v : Int | v >= 0 && v <= plen p}"
573:57-573:58::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
573:58-573:59::lq_anf__d3ZK :: "{v : Int | v == (1  :  int)}"
573:62-573:65::_ :: "Word8 -> Char"
573:66-573:67::e :: "{v : Word8 | v == e}"
573:68-573:69::_ :: "x1:Char\n-> x2:[Char]\n-> {v : [Char] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2 && bLens v == bLen x1 + bLens x2}"
573:70-573:73::acc :: "{v : [Char] | v == acc && len v >= 0 && bLens v >= 0}"
613:1-613:5::chop :: "x1:[Char]\n-> x2:{v : Int | v >= 0 && v <= len x1}\n-> {VV : [Char] | len VV == x2}"
613:6-613:7::s :: "[Char]"
613:8-613:9::n :: "{v : Int | v >= 0 && v <= len s}"
613:13-613:15::s' :: "{v : [Char] | v == s' && len v == bLen b' && len v >= 0 && bLens v >= 0}"
615:5-615:6::b :: "{v : ByteString | bLen v == len s}"
615:12-615:16::_ :: "x1:[Char] -> {v : ByteString | bLen v == len x1}"
615:17-615:18::s :: "{v : [Char] | v == s && len v >= 0 && bLens v >= 0}"
616:5-616:7::b' :: "{v : ByteString | bLen v == n}"
616:12-616:22::_ :: "x1:{v : Int | v >= 0}\n-> {v : ByteString | x1 <= bLen v}\n-> {v : ByteString | bLen v == x1}"
616:23-616:24::n :: "{v : Int | v == n && v >= 0 && v <= len s}"
616:25-616:26::b :: "{v : ByteString | v == b && bLen v == len s && bLen v >= 0}"
617:5-617:7::s' :: "{v : [Char] | len v == bLen b'}"
617:12-617:18::_ :: "x1:ByteString -> {v : [Char] | len v == bLen x1}"
617:19-617:21::b' :: "{v : ByteString | v == b' && bLen v == n && bLen v >= 0}"
651:1-651:5::demo :: "[[Char]]"
651:12-651:23::lq_anf__d41l :: "{v : [[Char]] | null v <=> false && xListSelector v == ex30 && len v >= 0 && bLens v >= 0}"
651:13-651:16::ex6 :: "{v : [Char] | v == ex6 && len v >= 0 && bLens v >= 0}"
651:18-651:22::ex30 :: "{v : [Char] | v == ex30 && len v >= 0 && bLens v >= 0}"
653:5-653:7::ex :: "{v : [Char] | null v <=> false}"
653:12-653:37::_ :: "{v : [Char] | null v <=> false}"
653:13-653:16::lq_anf__d416 :: "Char"
653:17-653:20::lq_anf__d417 :: "Char"
653:21-653:24::lq_anf__d418 :: "Char"
653:25-653:28::lq_anf__d419 :: "Char"
653:29-653:32::lq_anf__d41a :: "Char"
653:33-653:36::lq_anf__d41b :: "Char"
654:5-654:8::ex6 :: "[Char]"
654:12-654:16::_ :: "x1:[Char]\n-> x2:{v : Int | v >= 0 && v <= len x1}\n-> {v : [Char] | len v == v}"
654:17-654:19::ex :: "{v : [Char] | null v <=> false && v == ex && len v >= 0 && bLens v >= 0}"
654:20-654:21::lq_anf__d41i :: "{v : Int | v == (6  :  int)}"
655:5-655:9::ex30 :: "[Char]"
655:12-655:16::_ :: "x1:[Char]\n-> x2:{v : Int | v >= 0 && v <= len x1}\n-> {v : [Char] | len v == v}"
655:17-655:19::ex :: "{v : [Char] | null v <=> false && v == ex && len v >= 0 && bLens v >= 0}"
655:20-655:22::lq_anf__d41j :: "{v : Int | v == (30  :  int)}"
698:1-698:6::group :: "x1:ByteString\n-> {v : [{v : ByteString | bLen v > 0}] | bLens v == bLen x1}"
698:7-698:9::xs :: "ByteString"
699:7-699:11::_ :: "x1:ByteString -> {v : Bool | Prop v <=> bLen x1 == 0}"
699:12-699:14::xs :: "{v : ByteString | v == xs && bLen v >= 0}"
699:19-699:21::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | null v <=> true && len v == 0 && bLens v == 0}"
700:23-700:24::y :: "Word8"
700:27-700:37::_ :: "{v : ByteString | bLen v > 0} -> Word8"
700:38-700:40::xs :: "{v : ByteString | v == xs && bLen v >= 0}"
701:24-701:26::ys :: "{VV : ByteString | VV == ys && bLen Memory.empty + bLen VV == bLen ys && VV /= xs}"
701:28-701:30::zs :: "{VV : ByteString | VV == zs && bLen Memory.empty + bLen VV == bLen zs && VV /= xs}"
701:34-701:42::_ :: "Word8\n-> x2:ByteString\n-> (ByteString, ByteString)<\\x3 VV -> bLen x3 + bLen v == bLen x2>"
701:44-701:54::_ :: "{v : ByteString | bLen v > 0} -> Word8"
701:55-701:57::xs :: "{v : ByteString | v == xs && bLen v >= 0}"
701:60-701:70::_ :: "x1:{v : ByteString | bLen v > 0}\n-> {v : ByteString | bLen v == bLen x1 - 1}"
701:71-701:73::xs :: "{v : ByteString | v == xs && bLen v >= 0}"
702:23-702:24::y :: "{v : Word8 | v == y}"
702:25-702:31::_ :: "Word8 -> x2:ByteString -> {v : ByteString | bLen v == 1 + bLen v}"
702:32-702:34::ys :: "{v : ByteString | v == ys && v == ys && bLen Memory.empty + bLen v == bLen ys && v /= xs && bLen v >= 0}"
702:36-702:37::_ :: "x1:{v : ByteString | v /= Memory.empty && bLen v > 0}\n-> x2:[{v : ByteString | v /= Memory.empty && bLen v > 0}]<\\_ VV -> v /= Memory.empty && bLen v > 0>\n-> {v : [{v : ByteString | v /= Memory.empty && bLen v > 0}]<\\_ VV -> v /= Memory.empty && bLen v > 0> | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && xsListSelector v == x2 && bLens v == bLen x1 + bLens x2}"
702:38-702:43::group :: "x1:ByteString\n-> {v : [{v : ByteString | bLen v > 0}] | bLens v == bLen x1}"
702:44-702:46::zs :: "{v : ByteString | v == zs && v == zs && bLen Memory.empty + bLen v == bLen zs && v /= xs && bLen v >= 0}"
710:1-710:9::spanByte :: "Word8\n-> x2:ByteString\n-> (ByteString, ByteString)<\\x14 VV -> bLen x14 + bLen VV == bLen x2>"
710:10-710:11::c :: "Word8"
710:12-710:14::ps :: "ByteString"
710:28-710:43::lq_anf__d40L :: "(IO (ByteString, ByteString)<\\x10 VV -> bLen x10 + bLen v == bLen ps>)\n-> (ByteString, ByteString)<\\x3 VV -> bLen x3 + bLen v == bLen ps>"
710:44-710:45::_ :: "((IO (ByteString, ByteString)<\\x23 VV -> bLen x23 + bLen v == bLen ps>)\n -> (ByteString, ByteString)<\\x16 VV -> bLen x16 + bLen v == bLen ps>)\n-> (IO (ByteString, ByteString)<\\x23 VV -> bLen x23 + bLen v == bLen ps>)\n-> (ByteString, ByteString)<\\x16 VV -> bLen x16 + bLen v == bLen ps>"
710:46-710:60::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO (ByteString, ByteString)<\\x11 VV -> bLen x11 + bLen v == bLen ps>))\n-> (IO (ByteString, ByteString)<\\x11 VV -> bLen x11 + bLen v == bLen ps>)"
710:61-710:62::x :: "{v : (ForeignPtr Word8) | v == x}"
710:63-710:64::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n  -> (IO (ByteString, ByteString)<\\x33 VV -> bLen x33 + bLen v == bLen ps>))\n -> (IO (ByteString, ByteString)<\\x25 VV -> bLen x25 + bLen v == bLen ps>))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n    -> (IO (ByteString, ByteString)<\\x33 VV -> bLen x33 + bLen v == bLen ps>))\n-> (IO (ByteString, ByteString)<\\x25 VV -> bLen x25 + bLen v == bLen ps>)"
710:66-710:67::p :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && l <= plen VV && s <= plen VV}"
711:5-711:7::_ :: "{v : (Ptr (Any *)) | l <= plen v}\n-> x2:{v : Int | v == 0 && v >= 0 && v <= l && v <= s}\n-> (IO (ByteString, ByteString)<\\x4 VV -> bLen x4 + bLen v == bLen ps && x2 <= bLen v>)"
711:9-711:10::p :: "{v : (Ptr Word8) | v == p && fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}"
711:11-711:20::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr (Any *)) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
711:21-711:22::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
711:24-711:25::lq_anf__d40O :: "{v : Int | v == (0  :  int)}"
713:5-713:7::go :: "forall a.\n{VV : (Ptr a) | l <= plen VV}\n-> x2:{VV : Int | VV == 0 && VV >= 0 && VV <= l && VV <= s}\n-> (IO (ByteString, ByteString)<\\x1 VV -> bLen x1 + bLen VV == bLen ps && x2 <= bLen VV>)"
713:8-713:9::p :: "{VV : (Ptr a) | l <= plen VV}"
713:10-713:11::i :: "{VV : Int | VV >= 0 && VV <= l}"
713:14-713:15::i :: "{v : Int | v == i && v >= 0 && v <= l}"
713:16-713:18::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 >= v}"
713:19-713:20::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
713:26-713:32::_ :: "(ByteString, ByteString)<\\x42 VV -> v == Memory.empty && bLen v == 0 && bLen v == bLen ps - l && bLen v == bLen ps - i && bLen v == bLen x42 - l && bLen v == bLen x42 - i && bLen Memory.empty + bLen v == bLen Memory.empty && bLen ps + bLen v == bLen ps && bLen ps + bLen v == bLen x42 && bLen x42 + bLen v == bLen ps && bLen x42 + bLen v == bLen x42>\n-> (IO (ByteString, ByteString)<\\x42 VV -> v == Memory.empty && bLen v == 0 && bLen v == bLen ps - l && bLen v == bLen ps - i && bLen v == bLen x42 - l && bLen v == bLen x42 - i && bLen Memory.empty + bLen v == bLen Memory.empty && bLen ps + bLen v == bLen ps && bLen ps + bLen v == bLen x42 && bLen x42 + bLen v == bLen ps && bLen x42 + bLen v == bLen x42>)"
713:33-713:44::lq_anf__d40K :: "{v : (ByteString, {v : ByteString | v == Memory.empty && bLen v == 0 && bLen v == bLen ps - l && bLen v == bLen ps - i && bLen Memory.empty + bLen v == bLen Memory.empty && bLen ps + bLen v == bLen ps})<\\x21 VV -> v == Memory.empty && bLen v == 0 && bLen v == bLen ps - l && bLen v == bLen ps - i && bLen v == bLen x21 - l && bLen v == bLen x21 - i && bLen Memory.empty + bLen v == bLen Memory.empty && bLen ps + bLen v == bLen ps && bLen ps + bLen v == bLen x21 && bLen x21 + bLen v == bLen ps && bLen x21 + bLen v == bLen x21> | x_Tuple22 v == Memory.empty && snd v == Memory.empty}"
713:34-713:36::lq_anf__d40y :: "{v : ByteString | v == ps && v == Memory.PS x s l && bLen v == l && bOff v == s && bPtr v == x && bLen v >= 0}"
713:38-713:43::empty :: "{v : ByteString | v == Memory.empty && bLen v == 0 && bLen v >= 0}"
714:29-714:31::c' :: "Word8"
714:35-714:46::_ :: "p:(Ptr a) -> {v : Int | v < plen p && 0 <= v} -> (IO Word8)"
714:47-714:48::p :: "{v : (Ptr a) | v == p && l <= plen v}"
714:49-714:50::i :: "{v : Int | v == i && v >= 0 && v <= l}"
715:32-715:33::c :: "{v : Word8 | v == c}"
715:34-715:36::_ :: "x1:Word8 -> x2:Word8 -> {v : Bool | Prop v <=> x1 /= v}"
715:37-715:39::c' :: "{v : Word8 | v == c'}"
716:38-716:44::_ :: "(ByteString, ByteString)<\\x15 VV -> bLen v == bLen ps - i && bLen x15 + bLen v == bLen ps && v /= Memory.empty && bLen v > 0>\n-> (IO (ByteString, ByteString)<\\x15 VV -> bLen v == bLen ps - i && bLen x15 + bLen v == bLen ps && v /= Memory.empty && bLen v > 0>)"
716:45-716:79::lq_anf__d40I :: "(ByteString, {v : ByteString | bLen v == bLen ps - i && v /= Memory.empty && bLen v > 0})<\\x4 VV -> bLen v == bLen ps - i && bLen x4 + bLen v == bLen ps && v /= Memory.empty && bLen v > 0>"
716:46-716:56::_ :: "x1:{v : Int | v >= 0}\n-> {v : ByteString | x1 <= bLen v}\n-> {v : ByteString | bLen v == x1}"
716:57-716:58::i :: "{v : Int | v == i && v >= 0 && v <= l}"
716:59-716:61::lq_anf__d40y :: "{v : ByteString | v == ps && v == Memory.PS x s l && bLen v == l && bOff v == s && bPtr v == x && bLen v >= 0}"
716:63-716:73::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : ByteString | x1 <= bLen v}\n-> {v : ByteString | bLen v == bLen v - x1}"
716:74-716:75::i :: "{v : Int | v == i && v >= 0 && v <= l}"
716:76-716:78::lq_anf__d40y :: "{v : ByteString | v == ps && v == Memory.PS x s l && bLen v == l && bOff v == s && bPtr v == x && bLen v >= 0}"
717:38-717:40::go :: "{VV : (Ptr a) | l <= plen VV}\n-> {VV : Int | VV >= 0 && VV <= l}\n-> (IO (ByteString, ByteString)<\\x1 VV -> bLen x1 + bLen VV == bLen ps>)"
717:41-717:42::p :: "{v : (Ptr a) | v == p && l <= plen v}"
717:44-717:45::i :: "{v : Int | v == i && v >= 0 && v <= l}"
717:45-717:46::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
717:46-717:47::lq_anf__d40E :: "{v : Int | v == (1  :  int)}"
766:1-766:13::unsafeCreate :: "x1:{v : Int | v >= 0}\n-> ({VV : (Ptr Word8) | plen VV == x1 && 0 <= plen VV} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
766:14-766:15::n :: "{v : Int | v >= 0}"
766:16-766:17::f :: "{VV : (Ptr Word8) | plen VV == n && 0 <= plen VV} -> (IO ())"
766:20-766:26::_ :: "x1:{v : Int | v >= 0}\n-> ({v : (Ptr Word8) | plen v == x1 && 0 <= plen v} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
766:27-766:28::n :: "{v : Int | v == n && v >= 0}"
766:29-766:30::f :: "{v : (Ptr Word8) | plen v == n && 0 <= plen v} -> (IO ())"
780:1-780:11::unsafeHead :: "{v : ByteString | bLen v > 0} -> Word8"
780:25-780:37::_ :: "{v : Bool | Prop v} -> Word8 -> Word8"
780:39-780:40::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
780:41-780:42::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 > v}"
780:43-780:44::lq_anf__d40h :: "{v : Int | v == (0  :  int)}"
780:46-780:47::_ :: "(Word8 -> Word8) -> Word8 -> Word8"
781:3-781:18::lq_anf__d40k :: "(IO Word8) -> Word8"
781:20-781:21::_ :: "((IO Word8) -> Word8) -> (IO Word8) -> Word8"
781:23-781:37::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO Word8))\n-> (IO Word8)"
781:38-781:39::x :: "{v : (ForeignPtr Word8) | v == x}"
781:40-781:41::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n  -> (IO Word8))\n -> (IO Word8))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n    -> (IO Word8))\n-> (IO Word8)"
781:42-781:63::lq_anf__d40m :: "{v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n-> (IO Word8)"
781:43-781:44::p :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && l <= plen VV && s <= plen VV}"
781:48-781:59::_ :: "p:(Ptr Word8) -> {v : Int | v < plen p && 0 <= v} -> (IO Word8)"
781:60-781:61::p :: "{v : (Ptr Word8) | v == p && fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}"
781:62-781:63::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
786:1-786:11::unsafeTail :: "x1:{v : ByteString | bLen v > 0}\n-> {v : ByteString | bLen v == bLen x1 - 1}"
786:26-786:38::_ :: "{v : Bool | Prop v} -> ByteString -> ByteString"
786:40-786:41::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen ps}"
786:42-786:43::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 > v}"
786:44-786:45::lq_anf__d408 :: "{v : Int | v == (0  :  int)}"
786:47-786:48::_ :: "(ByteString -> ByteString) -> ByteString -> ByteString"
786:49-786:51::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
786:52-786:54::ps :: "{v : (ForeignPtr Word8) | v == ps}"
786:56-786:57::s :: "{v : Int | v == s && v >= 0 && v <= fplen ps}"
786:57-786:58::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
786:58-786:59::lq_anf__d40b :: "{v : Int | v == (1  :  int)}"
786:62-786:63::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen ps}"
786:63-786:64::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
786:64-786:65::lq_anf__d40d :: "{v : Int | v == (1  :  int)}"
790:1-790:5::null :: "x1:ByteString -> {v : Bool | Prop v <=> bLen x1 == 0}"
790:19-790:31::_ :: "{v : Bool | Prop v} -> Bool -> Bool"
790:33-790:34::l :: "{v : Int | v == l && v >= 0}"
790:35-790:37::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 >= v}"
790:38-790:39::lq_anf__d402 :: "{v : Int | v == (0  :  int)}"
790:41-790:42::_ :: "(Bool -> Bool) -> Bool -> Bool"
790:43-790:44::l :: "{v : Int | v == l && v >= 0}"
790:45-790:47::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 <= v}"
790:48-790:49::lq_anf__d405 :: "{v : Int | v == (0  :  int)}"
796:1-796:11::unsafeDrop :: "x1:{v : Int | v >= 0}\n-> x2:{v : ByteString | x1 <= bLen v}\n-> {v : ByteString | bLen v == bLen x2 - x1}"
796:12-796:13::n :: "{v : Int | v >= 0}"
796:27-796:39::_ :: "{v : Bool | Prop v} -> ByteString -> ByteString"
796:41-796:42::lq_anf__d40q :: "{v : Int | v == (0  :  int)}"
796:43-796:45::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 <= v}"
796:46-796:47::n :: "{v : Int | v == n && v >= 0}"
796:48-796:50::_ :: "x1:Bool -> x2:Bool -> {v : Bool | Prop v <=> Prop x1 && Prop v}"
796:51-796:52::n :: "{v : Int | v == n && v >= 0}"
796:53-796:55::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 <= v}"
796:56-796:57::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
796:59-796:60::_ :: "(ByteString -> ByteString) -> ByteString -> ByteString"
796:61-796:63::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
796:64-796:65::x :: "{v : (ForeignPtr Word8) | v == x}"
796:67-796:68::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
796:68-796:69::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
796:69-796:70::n :: "{v : Int | v == n && v >= 0}"
796:73-796:74::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
796:74-796:75::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
796:75-796:76::n :: "{v : Int | v == n && v >= 0}"
800:1-800:5::cons :: "Word8 -> x2:ByteString -> {v : ByteString | bLen v == 1 + bLen x2}"
800:6-800:7::c :: "Word8"
800:21-800:33::_ :: "x1:{v : Int | v >= 0}\n-> ({v : (Ptr Word8) | plen v == x1 && 0 <= plen v} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
800:35-800:36::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
800:36-800:37::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
800:37-800:38::lq_anf__d41p :: "{v : Int | v == (1  :  int)}"
800:40-800:41::_ :: "(({v : (Ptr Word8) | 0 <= plen v && l <= plen v} -> (IO ()))\n -> {v : ByteString | v /= Memory.empty && bLen v > 0 && l <= bLen v})\n-> ({v : (Ptr Word8) | 0 <= plen v && l <= plen v} -> (IO ()))\n-> {v : ByteString | v /= Memory.empty && bLen v > 0 && l <= bLen v}"
800:43-800:44::p :: "{VV : (Ptr Word8) | 0 <= plen VV && l <= plen VV}"
800:48-800:62::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO ()))\n-> (IO ())"
800:63-800:64::x :: "{v : (ForeignPtr Word8) | v == x}"
800:65-800:66::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n  -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n    -> (IO ()))\n-> (IO ())"
800:68-800:69::f :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && l <= plen VV && s <= plen VV}"
801:9-801:13::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
801:14-801:15::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v && l <= plen v}"
801:16-801:17::c :: "{v : Word8 | v == c}"
802:9-802:15::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : CSize | v <= plen x2 && v <= plen x1}\n-> (IO ())"
802:17-802:18::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v && l <= plen v}"
802:19-802:28::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
802:29-802:30::lq_anf__d41u :: "{v : Int | v == (1  :  int)}"
802:33-802:34::f :: "{v : (Ptr Word8) | v == f && fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}"
802:35-802:44::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
802:45-802:46::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
802:49-802:61::_ :: "x1:Int -> {v : CSize | v == x1}"
802:62-802:63::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
806:1-806:6::empty :: "{v : ByteString | bLen v == 0}"
806:9-806:11::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
806:12-806:26::nullForeignPtr :: "{v : (ForeignPtr Word8) | v == Memory.nullForeignPtr && fplen v == 0}"
806:27-806:28::lq_anf__d3Yj :: "{v : Int | v == (0  :  int)}"
806:29-806:30::lq_anf__d3Yk :: "{v : Int | v == (0  :  int)}"
811:1-811:7::malloc :: "forall a.\nx1:{v : Int | v >= 0}\n-> (IO {VV : (ForeignPtr a) | fplen VV == x1 && 0 <= fplen VV})"
811:10-811:31::mallocForeignPtrBytes :: "forall a.\nx1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
828:1-828:7::memcpy :: "x1:{VV : (Ptr Word8) | 0 <= plen VV}\n-> x2:{VV : (Ptr Word8) | 0 <= plen VV}\n-> {v : CSize | v <= plen x2 && v <= plen x1}\n-> (IO ())"
828:8-828:9::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
828:10-828:11::q :: "{VV : (Ptr Word8) | 0 <= plen VV}"
828:12-828:13::s :: "{v : CSize | v <= plen p && v <= plen q}"
828:16-828:24::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : CSize | v <= plen x1 && v <= plen x2}\n-> (IO (Ptr Word8))"
828:25-828:26::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
828:27-828:28::q :: "{v : (Ptr Word8) | v == q && 0 <= plen v}"
828:29-828:30::s :: "{v : CSize | v == s && v <= plen p && v <= plen q}"
828:31-828:33::_ :: "(IO (Ptr Word8)) -> (IO ()) -> (IO ())"
828:34-828:40::_ :: "() -> (IO ())"
828:41-828:43::() :: "{v : () | v == GHC.Tuple.()}"
832:1-832:15::nullForeignPtr :: "{v : (ForeignPtr Word8) | fplen v == 0}"
832:18-832:33::lq_anf__d3Yg :: "(IO (ForeignPtr Word8)) -> (ForeignPtr Word8)"
832:34-832:35::_ :: "((IO (ForeignPtr Word8)) -> (ForeignPtr Word8))\n-> (IO (ForeignPtr Word8)) -> (ForeignPtr Word8)"
832:36-832:50::_ :: "x1:(Ptr Word8)\n-> (IO {v : (ForeignPtr Word8) | fplen v == plen x1 && 0 <= fplen v})"
832:51-832:58::lq_anf__d3Yh :: "(Ptr Word8)"