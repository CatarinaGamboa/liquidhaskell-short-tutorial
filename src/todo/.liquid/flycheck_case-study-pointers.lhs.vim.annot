30:1-30:6::zero4 :: "forall a. (IO (ForeignPtr a))"
30:13-30:15::fp :: "(ForeignPtr a)"
30:19-30:40::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
30:41-30:42::lq_anf__d3Yz :: "{v : Int | v == (4  :  int)}"
31:13-31:27::_ :: "x1:(ForeignPtr a)\n-> ({v : (Ptr a) | plen v == fplen x1 && 0 <= plen v} -> (IO ()))\n-> (IO ())"
31:28-31:30::fp :: "{v : (ForeignPtr a) | v == fp}"
31:31-31:32::_ :: "(({v : (Ptr a) | fplen fp == plen v && zero <= plen v} -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr a) | fplen fp == plen v && zero <= plen v}\n    -> (IO ()))\n-> (IO ())"
31:34-31:35::p :: "{VV : (Ptr a) | fplen fp == plen VV && zero <= plen VV}"
32:15-32:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
32:21-32:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
32:23-32:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
32:33-32:34::lq_anf__d3YC :: "{v : Int | v == (0  :  int)}"
32:36-32:40::zero :: "{v : Word8 | v == zero}"
33:15-33:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
33:21-33:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
33:23-33:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
33:33-33:34::lq_anf__d3YF :: "{v : Int | v == (1  :  int)}"
33:36-33:40::zero :: "{v : Word8 | v == zero}"
34:15-34:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
34:21-34:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
34:23-34:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
34:33-34:34::lq_anf__d3YI :: "{v : Int | v == (2  :  int)}"
34:36-34:40::zero :: "{v : Word8 | v == zero}"
35:15-35:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
35:21-35:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
35:23-35:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
35:33-35:34::lq_anf__d3YL :: "{v : Int | v == (3  :  int)}"
35:36-35:40::zero :: "{v : Word8 | v == zero}"
36:13-36:19::_ :: "(ForeignPtr a) -> (IO (ForeignPtr a))"
36:20-36:22::fp :: "{v : (ForeignPtr a) | v == fp}"
38:13-38:17::zero :: "Word8"
38:20-38:21::_ :: "Word8"
84:1-84:7::zero4' :: "forall a. (IO (ForeignPtr a))"
84:13-84:15::fp :: "(ForeignPtr a)"
84:19-84:40::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr a) | fplen v == x1 && 0 <= fplen v})"
84:41-84:42::lq_anf__d3Yd :: "{v : Int | v == (4  :  int)}"
85:13-85:27::_ :: "x1:(ForeignPtr a)\n-> ({v : (Ptr a) | plen v == fplen x1 && 0 <= plen v} -> (IO ()))\n-> (IO ())"
85:28-85:30::fp :: "{v : (ForeignPtr a) | v == fp}"
85:31-85:32::_ :: "(({v : (Ptr a) | fplen fp == plen v && zero <= plen v} -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr a) | fplen fp == plen v && zero <= plen v}\n    -> (IO ()))\n-> (IO ())"
85:34-85:35::p :: "{VV : (Ptr a) | fplen fp == plen VV && zero <= plen VV}"
86:15-86:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
86:21-86:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
86:23-86:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
86:33-86:34::lq_anf__d3Yg :: "{v : Int | v == (0  :  int)}"
86:36-86:40::zero :: "{v : Word8 | v == zero}"
87:15-87:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
87:21-87:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
87:23-87:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
87:33-87:34::lq_anf__d3Yj :: "{v : Int | v == (1  :  int)}"
87:36-87:40::zero :: "{v : Word8 | v == zero}"
88:15-88:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
88:21-88:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
88:23-88:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
88:33-88:34::lq_anf__d3Ym :: "{v : Int | v == (2  :  int)}"
88:36-88:40::zero :: "{v : Word8 | v == zero}"
89:15-89:19::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
89:21-89:22::p :: "{v : (Ptr a) | v == p && fplen fp == plen v && zero <= plen v}"
89:23-89:32::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
89:33-89:34::lq_anf__d3Yp :: "{v : Int | v == (5  :  int)}"
89:36-89:40::zero :: "{v : Word8 | v == zero}"
90:13-90:19::_ :: "(ForeignPtr a) -> (IO (ForeignPtr a))"
90:20-90:22::fp :: "{v : (ForeignPtr a) | v == fp}"
92:13-92:17::zero :: "Word8"
92:20-92:21::_ :: "Word8"
101:5-101:9::bPtr :: "ByteString -> (ForeignPtr Word8)"
102:5-102:9::bOff :: "ByteString -> Int"
103:5-103:9::bLen :: "ByteString -> Int"
125:1-125:6::good1 :: "(IO {v : ByteString | bLen v == 5})"
125:12-125:14::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr}"
125:18-125:39::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
125:40-125:41::lq_anf__d3Y5 :: "{v : Int | v == (5  :  int)}"
126:12-126:18::lq_anf__d3Y7 :: "{v : ByteString | bLen v == 5 && v /= Memory.empty}\n-> (IO {v : ByteString | bLen v == 5 && v /= Memory.empty})"
126:19-126:20::_ :: "({v : ByteString | bLen v == 5 && v /= Memory.empty}\n -> (IO {v : ByteString | bLen v == 5 && v /= Memory.empty}))\n-> {v : ByteString | bLen v == 5 && v /= Memory.empty}\n-> (IO {v : ByteString | bLen v == 5 && v /= Memory.empty})"
126:21-126:23::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
126:24-126:26::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr}"
126:27-126:28::lq_anf__d3Y8 :: "{v : Int | v == (0  :  int)}"
126:29-126:30::lq_anf__d3Y9 :: "{v : Int | v == (5  :  int)}"
129:1-129:6::good2 :: "(IO {v : ByteString | bLen v == 3})"
129:12-129:14::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr}"
129:18-129:39::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
129:40-129:41::lq_anf__d3XY :: "{v : Int | v == (5  :  int)}"
130:12-130:18::lq_anf__d3Y0 :: "{v : ByteString | bLen v == 3 && v /= Memory.empty}\n-> (IO {v : ByteString | bLen v == 3 && v /= Memory.empty})"
130:19-130:20::_ :: "({v : ByteString | bLen v == 3 && v /= Memory.empty}\n -> (IO {v : ByteString | bLen v == 3 && v /= Memory.empty}))\n-> {v : ByteString | bLen v == 3 && v /= Memory.empty}\n-> (IO {v : ByteString | bLen v == 3 && v /= Memory.empty})"
130:21-130:23::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
130:24-130:26::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr}"
130:27-130:28::lq_anf__d3Y1 :: "{v : Int | v == (2  :  int)}"
130:29-130:30::lq_anf__d3Y2 :: "{v : Int | v == (3  :  int)}"
134:1-134:5::bad1 :: "(IO ByteString)"
134:11-134:13::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr}"
134:17-134:38::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
134:39-134:40::lq_anf__d3XR :: "{v : Int | v == (3  :  int)}"
135:11-135:17::lq_anf__d3XT :: "ByteString -> (IO ByteString)"
135:18-135:19::_ :: "(ByteString -> (IO ByteString)) -> ByteString -> (IO ByteString)"
135:20-135:22::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
135:23-135:25::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr}"
135:26-135:27::lq_anf__d3XU :: "{v : Int | v == (0  :  int)}"
135:28-135:30::lq_anf__d3XV :: "{v : Int | v == (10  :  int)}"
137:1-137:5::bad2 :: "(IO ByteString)"
137:11-137:13::fp :: "{VV : (ForeignPtr Word8) | VV /= Memory.nullForeignPtr}"
137:17-137:38::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
137:39-137:40::lq_anf__d3XK :: "{v : Int | v == (3  :  int)}"
138:11-138:17::lq_anf__d3XM :: "ByteString -> (IO ByteString)"
138:18-138:19::_ :: "(ByteString -> (IO ByteString)) -> ByteString -> (IO ByteString)"
138:20-138:22::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
138:23-138:25::fp :: "{v : (ForeignPtr Word8) | v == fp && v /= Memory.nullForeignPtr}"
138:26-138:27::lq_anf__d3XN :: "{v : Int | v == (2  :  int)}"
138:28-138:29::lq_anf__d3XO :: "{v : Int | v == (2  :  int)}"
146:1-146:7::create :: "Int -> ((Ptr Word8) -> (IO ())) -> ByteString"
146:8-146:9::n :: "Int"
146:10-146:14::fill :: "(Ptr Word8) -> (IO ())"
146:17-146:32::lq_anf__d40j :: "(IO ByteString) -> ByteString"
146:33-146:34::_ :: "((IO ByteString) -> ByteString) -> (IO ByteString) -> ByteString"
147:3-147:5::fp :: "{VV : (ForeignPtr Word8) | fplen VV == n}"
147:10-147:31::_ :: "x1:{v : Int | v >= 0}\n-> (IO {v : (ForeignPtr Word8) | fplen v == x1 && 0 <= fplen v})"
147:32-147:33::n :: "{v : Int | v == n}"
148:3-148:17::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO ()))\n-> (IO ())"
148:18-148:20::fp :: "{v : (ForeignPtr Word8) | v == fp && fplen v == n}"
148:21-148:25::fill :: "(Ptr Word8) -> (IO ())"
149:3-149:9::lq_anf__d40m :: "ByteString -> (IO ByteString)"
149:10-149:12::_ :: "(ByteString -> (IO ByteString)) -> ByteString -> (IO ByteString)"
149:13-149:15::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
149:16-149:18::fp :: "{v : (ForeignPtr Word8) | v == fp && fplen v == n}"
149:19-149:20::lq_anf__d40n :: "{v : Int | v == (0  :  int)}"
149:21-149:22::n :: "{v : Int | v == n}"
156:1-156:11::unsafeTake :: "Int -> ByteString -> ByteString"
156:12-156:13::n :: "Int"
156:27-156:29::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
156:30-156:31::x :: "{v : (ForeignPtr Word8) | v == x}"
156:32-156:33::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
156:34-156:35::n :: "{v : Int | v == n}"
163:1-163:5::pack :: "[Char] -> ByteString"
163:6-163:9::str :: "[Char]"
163:17-163:23::_ :: "Int -> ((Ptr Word8) -> (IO ())) -> ByteString"
163:24-163:25::n :: "{v : Int | v == n && v == len str}"
163:26-163:27::_ :: "(((Ptr Word8) -> (IO ())) -> ByteString)\n-> ((Ptr Word8) -> (IO ())) -> ByteString"
163:28-163:41::lq_anf__d40y :: "(Ptr Word8) -> (IO ())"
163:29-163:30::p :: "(Ptr Word8)"
163:34-163:36::_ :: "(Ptr Word8)\n-> {v : [Word8] | len v == len str && len v >= 0} -> (IO ())"
163:37-163:38::p :: "{v : (Ptr Word8) | v == p}"
163:39-163:41::xs :: "{v : [Word8] | v == xs && len v == len str && len v >= 0 && bLens v >= 0}"
165:3-165:4::n :: "{v : Int | v == len str}"
165:17-165:23::_ :: "x1:[Char] -> {v : Int | v == len x1}"
165:24-165:27::str :: "{v : [Char] | v == str && len v >= 0 && bLens v >= 0}"
166:3-166:5::xs :: "{v : [Word8] | len v == len str}"
166:17-166:20::_ :: "(Char -> Word8) -> x3:[Char] -> {v : [Word8] | len v == len x3}"
166:21-166:24::c2w :: "Char -> Word8"
166:25-166:28::str :: "{v : [Char] | v == str && len v >= 0 && bLens v >= 0}"
167:3-167:5::go :: "forall a.\n(Storable [Bivariant]\n[] a) =>\n(Ptr a) -> {VV : [a] | len VV == len str && len VV >= 0} -> (IO ())"
167:6-167:7::p :: "(Ptr a)"
167:17-167:21::_ :: "{v : (Ptr a) | 0 < plen v} -> a -> (IO ())"
167:22-167:23::p :: "{v : (Ptr a) | v == p}"
167:24-167:25::x :: "{VV : a | VV == x}"
167:26-167:28::_ :: "(IO ()) -> (IO ()) -> (IO ())"
167:29-167:31::go :: "(Ptr a) -> {VV : [a] | len VV >= 0 && len VV <= len str} -> (IO ())"
167:33-167:40::_ :: "x1:{v : (Ptr a) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr a) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
167:41-167:42::p :: "{v : (Ptr a) | v == p}"
167:43-167:44::lq_anf__d40u :: "{v : Int | v == (1  :  int)}"
167:46-167:48::xs :: "{v : [a] | v == xs && len v >= 0 && bLens v >= 0}"
168:17-168:23::_ :: "() -> (IO ())"
168:25-168:27::() :: "{v : () | v == GHC.Tuple.()}"
181:1-181:7::unpack :: "ByteString -> [Char]"
181:23-181:25::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | null v <=> true && len v == 0 && bLens v == 0}"
182:23-182:38::lq_anf__d3Zl :: "(IO [Char]) -> [Char]"
182:39-182:40::_ :: "((IO [Char]) -> [Char]) -> (IO [Char]) -> [Char]"
182:41-182:55::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO [Char]))\n-> (IO [Char])"
182:56-182:58::ds_d3WL :: "(ForeignPtr Word8)"
182:59-182:60::_ :: "(({v : (Ptr Word8) | 0 <= plen v} -> (IO [Char])) -> (IO [Char]))\n-> ({v : (Ptr Word8) | 0 <= plen v} -> (IO [Char])) -> (IO [Char])"
182:62-182:63::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
183:4-183:6::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : Int | v >= 0 && v <= plen x1}\n-> {v : [Char] | len v >= 0}\n-> (IO [Char])"
183:8-183:9::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
183:10-183:19::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
183:20-183:21::ds_d3WM :: "{v : Int | v >= 0}"
183:24-183:25::ds_d3WN :: "{v : Int | v >= 0}"
183:26-183:27::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
183:28-183:29::lq_anf__d3Zo :: "{v : Int | v == (1  :  int)}"
183:32-183:34::lq_anf__d3Zq :: "{v : [Char] | null v <=> true && len v == 0 && bLens v == 0 && len v >= 0 && bLens v >= 0}"
185:4-185:6::go :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : Int | v >= 0 && v <= plen x1}\n-> {v : [Char] | len v >= 0}\n-> (IO [Char])"
185:7-185:8::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
185:11-185:14::acc :: "{VV : [Char] | len VV >= 0}"
185:17-185:21::_ :: "x1:{v : (Ptr Word8) | 0 < plen v}\n-> (IO {v : Word8 | v == deref x1})"
185:22-185:23::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
185:24-185:27::_ :: "(IO Word8) -> (Word8 -> (IO [Char])) -> (IO [Char])"
185:28-185:54::lq_anf__d3Zk :: "Word8 -> (IO [Char])"
185:29-185:30::e :: "Word8"
185:34-185:40::_ :: "[Char] -> (IO [Char])"
185:42-185:45::_ :: "Word8 -> Char"
185:46-185:47::e :: "{v : Word8 | v == e}"
185:48-185:49::_ :: "x1:Char\n-> x2:[Char]\n-> {v : [Char] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && bLens v == bLen x1 + bLens x2 && xsListSelector v == x2}"
185:50-185:53::acc :: "{v : [Char] | v == acc && len v >= 0 && bLens v >= 0}"
186:17-186:21::_ :: "x1:{v : (Ptr Word8) | 0 < plen v}\n-> (IO {v : Word8 | v == deref x1})"
186:23-186:24::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
186:25-186:34::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
186:35-186:36::ds_d3WP :: "{v : Int | v >= 0 && v <= plen p}"
186:38-186:41::_ :: "(IO Word8) -> (Word8 -> (IO [Char])) -> (IO [Char])"
186:42-186:72::lq_anf__d3Zg :: "Word8 -> (IO [Char])"
186:43-186:44::e :: "Word8"
186:48-186:50::go :: "x1:{VV : (Ptr Word8) | 0 <= plen VV}\n-> {VV : Int | VV >= 0 && VV <= plen x1}\n-> {VV : [Char] | len VV >= 0}\n-> (IO [Char])"
186:51-186:52::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
186:54-186:55::ds_d3WP :: "{v : Int | v >= 0 && v <= plen p}"
186:55-186:56::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
186:56-186:57::lq_anf__d3Zc :: "{v : Int | v == (1  :  int)}"
186:60-186:63::_ :: "Word8 -> Char"
186:64-186:65::e :: "{v : Word8 | v == e}"
186:66-186:67::_ :: "x1:Char\n-> x2:[Char]\n-> {v : [Char] | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && bLens v == bLen x1 + bLens x2 && xsListSelector v == x2}"
186:68-186:71::acc :: "{v : [Char] | v == acc && len v >= 0 && bLens v >= 0}"
195:1-195:5::chop :: "[Char] -> Int -> [Char]"
195:6-195:7::s :: "[Char]"
195:8-195:9::n :: "Int"
195:13-195:15::s' :: "{v : [Char] | v == s' && len v >= 0 && bLens v >= 0}"
197:5-197:6::b :: "ByteString"
197:12-197:16::_ :: "[Char] -> ByteString"
197:17-197:18::s :: "{v : [Char] | v == s && len v >= 0 && bLens v >= 0}"
198:5-198:7::b' :: "ByteString"
198:12-198:22::_ :: "Int -> ByteString -> ByteString"
198:23-198:24::n :: "{v : Int | v == n}"
198:25-198:26::b :: "{v : ByteString | v == b && bLen v >= 0}"
199:5-199:7::s' :: "[Char]"
199:12-199:18::_ :: "ByteString -> [Char]"
199:19-199:21::b' :: "{v : ByteString | v == b' && bLen v >= 0}"
209:1-209:5::demo :: "[[Char]]"
209:12-209:23::lq_anf__d40O :: "{v : [[Char]] | null v <=> false && xListSelector v == ex30 && len v >= 0 && bLens v >= 0}"
209:13-209:16::ex6 :: "{v : [Char] | v == ex6 && len v >= 0 && bLens v >= 0}"
209:18-209:22::ex30 :: "{v : [Char] | v == ex30 && len v >= 0 && bLens v >= 0}"
211:5-211:7::ex :: "{v : [Char] | null v <=> false}"
211:12-211:37::_ :: "{v : [Char] | null v <=> false}"
211:13-211:16::lq_anf__d40z :: "Char"
211:17-211:20::lq_anf__d40A :: "Char"
211:21-211:24::lq_anf__d40B :: "Char"
211:25-211:28::lq_anf__d40C :: "Char"
211:29-211:32::lq_anf__d40D :: "Char"
211:33-211:36::lq_anf__d40E :: "Char"
212:5-212:8::ex6 :: "[Char]"
212:12-212:16::_ :: "[Char] -> Int -> [Char]"
212:17-212:19::ex :: "{v : [Char] | null v <=> false && v == ex && len v >= 0 && bLens v >= 0}"
212:20-212:21::lq_anf__d40L :: "{v : Int | v == (6  :  int)}"
213:5-213:9::ex30 :: "[Char]"
213:12-213:16::_ :: "[Char] -> Int -> [Char]"
213:17-213:19::ex :: "{v : [Char] | null v <=> false && v == ex && len v >= 0 && bLens v >= 0}"
213:20-213:22::lq_anf__d40M :: "{v : Int | v == (30  :  int)}"
250:1-250:6::group :: "x1:ByteString\n-> {v : [{v : ByteString | bLen v > 0}] | bLens v == bLen x1}"
250:7-250:9::xs :: "ByteString"
251:7-251:11::_ :: "x1:ByteString -> {v : Bool | Prop v <=> bLen x1 == 0}"
251:12-251:14::xs :: "{v : ByteString | v == xs && bLen v >= 0}"
251:19-251:21::[] :: "forall a <p :: a a -> Prop>.\n{v : [a]<\\x5 VV -> p x5> | null v <=> true && len v == 0 && bLens v == 0}"
252:23-252:24::y :: "Word8"
252:27-252:37::_ :: "{v : ByteString | bLen v > 0} -> Word8"
252:38-252:40::xs :: "{v : ByteString | v == xs && bLen v >= 0}"
253:24-253:26::ys :: "{VV : ByteString | VV == ys && bLen Memory.empty + bLen VV == bLen ys && VV /= xs}"
253:28-253:30::zs :: "{VV : ByteString | VV == zs && bLen Memory.empty + bLen VV == bLen zs && VV /= xs}"
253:34-253:42::_ :: "Word8\n-> x2:ByteString\n-> (ByteString, ByteString)<\\x3 VV -> bLen x3 + bLen v == bLen x2>"
253:44-253:54::_ :: "{v : ByteString | bLen v > 0} -> Word8"
253:55-253:57::xs :: "{v : ByteString | v == xs && bLen v >= 0}"
253:60-253:70::_ :: "x1:{v : ByteString | bLen v > 0}\n-> {v : ByteString | bLen v == bLen x1 - 1}"
253:71-253:73::xs :: "{v : ByteString | v == xs && bLen v >= 0}"
254:23-254:24::y :: "{v : Word8 | v == y}"
254:25-254:31::_ :: "Word8 -> x2:ByteString -> {v : ByteString | bLen v == 1 + bLen v}"
254:32-254:34::ys :: "{v : ByteString | v == ys && v == ys && bLen Memory.empty + bLen v == bLen ys && v /= xs && bLen v >= 0}"
254:36-254:37::_ :: "x1:{v : ByteString | v /= Memory.empty && bLen v > 0}\n-> x2:[{v : ByteString | v /= Memory.empty && bLen v > 0}]<\\_ VV -> v /= Memory.empty && bLen v > 0>\n-> {v : [{v : ByteString | v /= Memory.empty && bLen v > 0}]<\\_ VV -> v /= Memory.empty && bLen v > 0> | null v <=> false && xListSelector v == x1 && len v == 1 + len x2 && bLens v == bLen x1 + bLens x2 && xsListSelector v == x2}"
254:38-254:43::group :: "x1:ByteString\n-> {v : [{v : ByteString | bLen v > 0}] | bLens v == bLen x1}"
254:44-254:46::zs :: "{v : ByteString | v == zs && v == zs && bLen Memory.empty + bLen v == bLen zs && v /= xs && bLen v >= 0}"
261:1-261:9::spanByte :: "Word8\n-> x2:ByteString\n-> (ByteString, ByteString)<\\x12 VV -> bLen x12 + bLen VV == bLen x2>"
261:10-261:11::c :: "Word8"
261:12-261:14::ps :: "ByteString"
261:28-261:43::lq_anf__d40d :: "(IO (ByteString, ByteString)) -> (ByteString, ByteString)"
261:44-261:45::_ :: "((IO (ByteString, ByteString)) -> (ByteString, ByteString))\n-> (IO (ByteString, ByteString)) -> (ByteString, ByteString)"
261:46-261:60::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO (ByteString, ByteString)))\n-> (IO (ByteString, ByteString))"
261:61-261:62::x :: "{v : (ForeignPtr Word8) | v == x}"
261:63-261:64::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && s <= plen v && l <= plen v}\n  -> (IO (ByteString, ByteString)))\n -> (IO (ByteString, ByteString)))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && s <= plen v && l <= plen v}\n    -> (IO (ByteString, ByteString)))\n-> (IO (ByteString, ByteString))"
261:66-261:67::p :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && s <= plen VV && l <= plen VV}"
262:5-262:7::_ :: "{v : (Ptr (Any *)) | l <= plen v}\n-> {v : Int | v == 0 && v >= 0 && v <= s && v <= l}\n-> (IO (ByteString, ByteString))"
262:9-262:10::p :: "{v : (Ptr Word8) | v == p && fplen x == plen v && 0 <= plen v && s <= plen v && l <= plen v}"
262:11-262:20::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr (Any *)) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
262:21-262:22::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
262:24-262:25::lq_anf__d40g :: "{v : Int | v == (0  :  int)}"
264:5-264:7::go :: "forall a.\n{VV : (Ptr a) | l <= plen VV}\n-> {VV : Int | VV == 0 && VV >= 0 && VV <= s && VV <= l}\n-> (IO (ByteString, ByteString))"
264:8-264:9::p :: "{VV : (Ptr a) | l <= plen VV}"
264:10-264:11::i :: "{VV : Int | VV >= 0 && VV <= l}"
264:14-264:15::i :: "{v : Int | v == i && v >= 0 && v <= l}"
264:16-264:18::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 >= v}"
264:19-264:20::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
264:26-264:32::_ :: "(ByteString, ByteString)<\\x42 VV -> v == Memory.empty && bLen v == 0 && bLen v == bLen ps - i && bLen v == bLen ps - l && bLen v == bLen x42 - i && bLen v == bLen x42 - l && bLen Memory.empty + bLen v == bLen Memory.empty && bLen ps + bLen v == bLen ps && bLen ps + bLen v == bLen x42 && bLen x42 + bLen v == bLen ps && bLen x42 + bLen v == bLen x42>\n-> (IO (ByteString, ByteString)<\\x42 VV -> v == Memory.empty && bLen v == 0 && bLen v == bLen ps - i && bLen v == bLen ps - l && bLen v == bLen x42 - i && bLen v == bLen x42 - l && bLen Memory.empty + bLen v == bLen Memory.empty && bLen ps + bLen v == bLen ps && bLen ps + bLen v == bLen x42 && bLen x42 + bLen v == bLen ps && bLen x42 + bLen v == bLen x42>)"
264:33-264:44::lq_anf__d40c :: "{v : (ByteString, {v : ByteString | v == Memory.empty && bLen v == 0 && bLen v == bLen ps - i && bLen v == bLen ps - l && bLen Memory.empty + bLen v == bLen Memory.empty && bLen ps + bLen v == bLen ps})<\\x21 VV -> v == Memory.empty && bLen v == 0 && bLen v == bLen ps - i && bLen v == bLen ps - l && bLen v == bLen x21 - i && bLen v == bLen x21 - l && bLen Memory.empty + bLen v == bLen Memory.empty && bLen ps + bLen v == bLen ps && bLen ps + bLen v == bLen x21 && bLen x21 + bLen v == bLen ps && bLen x21 + bLen v == bLen x21> | x_Tuple22 v == Memory.empty && snd v == Memory.empty}"
264:34-264:36::lq_anf__d400 :: "{v : ByteString | v == ps && v == Memory.PS x s l && bLen v == l && bOff v == s && bPtr v == x && bLen v >= 0}"
264:38-264:43::empty :: "{v : ByteString | v == Memory.empty && bLen v == 0 && bLen v >= 0}"
265:29-265:31::c' :: "Word8"
265:35-265:46::_ :: "p:(Ptr a) -> {v : Int | v < plen p && 0 <= v} -> (IO Word8)"
265:47-265:48::p :: "{v : (Ptr a) | v == p && l <= plen v}"
265:49-265:50::i :: "{v : Int | v == i && v >= 0 && v <= l}"
266:32-266:33::c :: "{v : Word8 | v == c}"
266:34-266:36::_ :: "x1:Word8 -> x2:Word8 -> {v : Bool | Prop v <=> x1 /= v}"
266:37-266:39::c' :: "{v : Word8 | v == c'}"
267:38-267:44::_ :: "(ByteString, ByteString)<\\_ VV -> bLen v == bLen ps - i && v /= Memory.empty && bLen v > 0>\n-> (IO (ByteString, ByteString)<\\_ VV -> bLen v == bLen ps - i && v /= Memory.empty && bLen v > 0>)"
267:45-267:79::lq_anf__d40a :: "(ByteString, {v : ByteString | bLen v == bLen ps - i && v /= Memory.empty && bLen v > 0})<\\_ VV -> bLen v == bLen ps - i && v /= Memory.empty && bLen v > 0>"
267:46-267:56::_ :: "Int -> ByteString -> ByteString"
267:57-267:58::i :: "{v : Int | v == i && v >= 0 && v <= l}"
267:59-267:61::lq_anf__d400 :: "{v : ByteString | v == ps && v == Memory.PS x s l && bLen v == l && bOff v == s && bPtr v == x && bLen v >= 0}"
267:63-267:73::_ :: "x1:{v : Int | v >= 0}\n-> x2:{v : ByteString | x1 <= bLen v}\n-> {v : ByteString | bLen v == bLen v - x1}"
267:74-267:75::i :: "{v : Int | v == i && v >= 0 && v <= l}"
267:76-267:78::lq_anf__d400 :: "{v : ByteString | v == ps && v == Memory.PS x s l && bLen v == l && bOff v == s && bPtr v == x && bLen v >= 0}"
268:38-268:40::go :: "{VV : (Ptr a) | l <= plen VV}\n-> {VV : Int | VV >= 0 && VV <= l} -> (IO (ByteString, ByteString))"
268:41-268:42::p :: "{v : (Ptr a) | v == p && l <= plen v}"
268:44-268:45::i :: "{v : Int | v == i && v >= 0 && v <= l}"
268:45-268:46::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
268:46-268:47::lq_anf__d406 :: "{v : Int | v == (1  :  int)}"
329:1-329:13::unsafeCreate :: "x1:{v : Int | v >= 0}\n-> ({VV : (Ptr Word8) | plen VV == x1 && 0 <= plen VV} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
329:14-329:15::n :: "{v : Int | v >= 0}"
329:16-329:17::f :: "{VV : (Ptr Word8) | plen VV == n && 0 <= plen VV} -> (IO ())"
329:20-329:26::_ :: "Int -> ((Ptr Word8) -> (IO ())) -> ByteString"
329:27-329:28::n :: "{v : Int | v == n && v >= 0}"
329:29-329:30::f :: "{v : (Ptr Word8) | plen v == n && 0 <= plen v} -> (IO ())"
343:1-343:11::unsafeHead :: "{v : ByteString | bLen v > 0} -> Word8"
343:25-343:37::_ :: "{v : Bool | Prop v} -> Word8 -> Word8"
343:39-343:40::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
343:41-343:42::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 > v}"
343:43-343:44::lq_anf__d3ZJ :: "{v : Int | v == (0  :  int)}"
343:46-343:47::_ :: "(Word8 -> Word8) -> Word8 -> Word8"
344:3-344:18::lq_anf__d3ZM :: "(IO Word8) -> Word8"
344:20-344:21::_ :: "((IO Word8) -> Word8) -> (IO Word8) -> Word8"
344:23-344:37::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO Word8))\n-> (IO Word8)"
344:38-344:39::x :: "{v : (ForeignPtr Word8) | v == x}"
344:40-344:41::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n  -> (IO Word8))\n -> (IO Word8))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n    -> (IO Word8))\n-> (IO Word8)"
344:42-344:63::lq_anf__d3ZO :: "{v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n-> (IO Word8)"
344:43-344:44::p :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && l <= plen VV && s <= plen VV}"
344:48-344:59::_ :: "p:(Ptr Word8) -> {v : Int | v < plen p && 0 <= v} -> (IO Word8)"
344:60-344:61::p :: "{v : (Ptr Word8) | v == p && fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}"
344:62-344:63::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
349:1-349:11::unsafeTail :: "x1:{v : ByteString | bLen v > 0}\n-> {v : ByteString | bLen v == bLen x1 - 1}"
349:26-349:38::_ :: "{v : Bool | Prop v} -> ByteString -> ByteString"
349:40-349:41::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen ps}"
349:42-349:43::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 > v}"
349:44-349:45::lq_anf__d3ZA :: "{v : Int | v == (0  :  int)}"
349:47-349:48::_ :: "(ByteString -> ByteString) -> ByteString -> ByteString"
349:49-349:51::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
349:52-349:54::ps :: "{v : (ForeignPtr Word8) | v == ps}"
349:56-349:57::s :: "{v : Int | v == s && v >= 0 && v <= fplen ps}"
349:57-349:58::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
349:58-349:59::lq_anf__d3ZD :: "{v : Int | v == (1  :  int)}"
349:62-349:63::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen ps}"
349:63-349:64::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
349:64-349:65::lq_anf__d3ZF :: "{v : Int | v == (1  :  int)}"
353:1-353:5::null :: "x1:ByteString -> {v : Bool | Prop v <=> bLen x1 == 0}"
353:19-353:31::_ :: "{v : Bool | Prop v} -> Bool -> Bool"
353:33-353:34::l :: "{v : Int | v == l && v >= 0}"
353:35-353:37::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 >= v}"
353:38-353:39::lq_anf__d3Zu :: "{v : Int | v == (0  :  int)}"
353:41-353:42::_ :: "(Bool -> Bool) -> Bool -> Bool"
353:43-353:44::l :: "{v : Int | v == l && v >= 0}"
353:45-353:47::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 <= v}"
353:48-353:49::lq_anf__d3Zx :: "{v : Int | v == (0  :  int)}"
359:1-359:11::unsafeDrop :: "x1:{v : Int | v >= 0}\n-> x2:{v : ByteString | x1 <= bLen v}\n-> {v : ByteString | bLen v == bLen x2 - x1}"
359:12-359:13::n :: "{v : Int | v >= 0}"
359:27-359:39::_ :: "{v : Bool | Prop v} -> ByteString -> ByteString"
359:41-359:42::lq_anf__d3ZS :: "{v : Int | v == (0  :  int)}"
359:43-359:45::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 <= v}"
359:46-359:47::n :: "{v : Int | v == n && v >= 0}"
359:48-359:50::_ :: "x1:Bool -> x2:Bool -> {v : Bool | Prop v <=> Prop x1 && Prop v}"
359:51-359:52::n :: "{v : Int | v == n && v >= 0}"
359:53-359:55::_ :: "x1:Int -> x2:Int -> {v : Bool | Prop v <=> x1 <= v}"
359:56-359:57::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
359:59-359:60::_ :: "(ByteString -> ByteString) -> ByteString -> ByteString"
359:61-359:63::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
359:64-359:65::x :: "{v : (ForeignPtr Word8) | v == x}"
359:67-359:68::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
359:68-359:69::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
359:69-359:70::n :: "{v : Int | v == n && v >= 0}"
359:73-359:74::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
359:74-359:75::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 - x2}"
359:75-359:76::n :: "{v : Int | v == n && v >= 0}"
363:1-363:5::cons :: "Word8 -> x2:ByteString -> {v : ByteString | bLen v == 1 + bLen x2}"
363:6-363:7::c :: "Word8"
363:21-363:33::_ :: "x1:{v : Int | v >= 0}\n-> ({v : (Ptr Word8) | plen v == x1 && 0 <= plen v} -> (IO ()))\n-> {v : ByteString | bLen v == x1}"
363:35-363:36::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
363:36-363:37::_ :: "x1:Int -> x2:Int -> {v : Int | v == x1 + x2}"
363:37-363:38::lq_anf__d40S :: "{v : Int | v == (1  :  int)}"
363:40-363:41::_ :: "(({v : (Ptr Word8) | 0 <= plen v && l <= plen v} -> (IO ()))\n -> {v : ByteString | v /= Memory.empty && bLen v > 0 && l <= bLen v})\n-> ({v : (Ptr Word8) | 0 <= plen v && l <= plen v} -> (IO ()))\n-> {v : ByteString | v /= Memory.empty && bLen v > 0 && l <= bLen v}"
363:43-363:44::p :: "{VV : (Ptr Word8) | 0 <= plen VV && l <= plen VV}"
363:48-363:62::_ :: "x1:(ForeignPtr Word8)\n-> ({v : (Ptr Word8) | plen v == fplen x1 && 0 <= plen v}\n    -> (IO ()))\n-> (IO ())"
363:63-363:64::x :: "{v : (ForeignPtr Word8) | v == x}"
363:65-363:66::_ :: "(({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n  -> (IO ()))\n -> (IO ()))\n-> ({v : (Ptr Word8) | fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}\n    -> (IO ()))\n-> (IO ())"
363:68-363:69::f :: "{VV : (Ptr Word8) | fplen x == plen VV && 0 <= plen VV && l <= plen VV && s <= plen VV}"
364:9-364:13::_ :: "{v : (Ptr Word8) | 0 < plen v} -> Word8 -> (IO ())"
364:14-364:15::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v && l <= plen v}"
364:16-364:17::c :: "{v : Word8 | v == c}"
365:9-365:15::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : CSize | v <= plen x1 && v <= plen x2}\n-> (IO ())"
365:17-365:18::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v && l <= plen v}"
365:19-365:28::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
365:29-365:30::lq_anf__d40X :: "{v : Int | v == (1  :  int)}"
365:33-365:34::f :: "{v : (Ptr Word8) | v == f && fplen x == plen v && 0 <= plen v && l <= plen v && s <= plen v}"
365:35-365:44::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : Int | v <= plen x1}\n-> {v : (Ptr Word8) | pbase v == pbase x1 && plen v == plen x1 - x2 && 0 <= plen v}"
365:45-365:46::s :: "{v : Int | v == s && v >= 0 && v <= fplen x}"
365:49-365:61::_ :: "x1:Int -> {v : CSize | v == x1}"
365:62-365:63::l :: "{v : Int | v == l && v >= 0 && v + s <= fplen x}"
369:1-369:6::empty :: "{v : ByteString | bLen v == 0}"
369:9-369:11::_ :: "x1:(ForeignPtr Word8)\n-> x2:{v : Int | v >= 0 && v <= fplen x1}\n-> x3:{v : Int | v >= 0 && v + x2 <= fplen x1}\n-> {v : ByteString | bLen v == x3 && bOff v == x2 && bPtr v == x1}"
369:12-369:26::nullForeignPtr :: "{v : (ForeignPtr Word8) | v == Memory.nullForeignPtr && fplen v == 0}"
369:27-369:28::lq_anf__d3XH :: "{v : Int | v == (0  :  int)}"
369:29-369:30::lq_anf__d3XI :: "{v : Int | v == (0  :  int)}"
386:1-386:7::memcpy :: "x1:{VV : (Ptr Word8) | 0 <= plen VV}\n-> x2:{VV : (Ptr Word8) | 0 <= plen VV}\n-> {v : CSize | v <= plen x1 && v <= plen x2}\n-> (IO ())"
386:8-386:9::p :: "{VV : (Ptr Word8) | 0 <= plen VV}"
386:10-386:11::q :: "{VV : (Ptr Word8) | 0 <= plen VV}"
386:12-386:13::s :: "{v : CSize | v <= plen q && v <= plen p}"
386:16-386:24::_ :: "x1:{v : (Ptr Word8) | 0 <= plen v}\n-> x2:{v : (Ptr Word8) | 0 <= plen v}\n-> {v : CSize | v <= plen x1 && v <= plen x2}\n-> (IO (Ptr Word8))"
386:25-386:26::p :: "{v : (Ptr Word8) | v == p && 0 <= plen v}"
386:27-386:28::q :: "{v : (Ptr Word8) | v == q && 0 <= plen v}"
386:29-386:30::s :: "{v : CSize | v == s && v <= plen q && v <= plen p}"
386:31-386:33::_ :: "(IO (Ptr Word8)) -> (IO ()) -> (IO ())"
386:34-386:40::_ :: "() -> (IO ())"
386:41-386:43::() :: "{v : () | v == GHC.Tuple.()}"
390:1-390:15::nullForeignPtr :: "{v : (ForeignPtr Word8) | fplen v == 0}"
390:18-390:33::lq_anf__d3XE :: "(IO (ForeignPtr Word8)) -> (ForeignPtr Word8)"
390:34-390:35::_ :: "((IO (ForeignPtr Word8)) -> (ForeignPtr Word8))\n-> (IO (ForeignPtr Word8)) -> (ForeignPtr Word8)"
390:36-390:50::_ :: "x1:(Ptr Word8)\n-> (IO {v : (ForeignPtr Word8) | fplen v == plen x1 && 0 <= fplen v})"
390:51-390:58::lq_anf__d3XF :: "(Ptr Word8)"