10:1-10:5::InTex.main :: "(GHC.Types.IO ())"
10:8-10:20::_ :: "(Text.Pandoc.Definition.Inline -> Text.Pandoc.Definition.Inline)\n-> (GHC.Types.IO ())"
10:21-10:34::InTex.readFootnotes :: "Text.Pandoc.Definition.Inline -> Text.Pandoc.Definition.Inline"
13:1-13:6::InTex.gimme :: "[GHC.Types.Char] -> [GHC.Types.Char]"
13:7-13:8::s :: "[GHC.Types.Char]"
13:11-13:21::_ :: "Text.Pandoc.Options.WriterOptions\n-> Text.Pandoc.Definition.Pandoc -> [GHC.Types.Char]"
13:22-13:25::lq_anf__dnGy :: "Text.Pandoc.Options.WriterOptions"
13:26-13:27::_ :: "(Text.Pandoc.Definition.Pandoc -> [GHC.Types.Char])\n-> Text.Pandoc.Definition.Pandoc -> [GHC.Types.Char]"
13:28-13:40::_ :: "Text.Pandoc.Options.ReaderOptions\n-> [GHC.Types.Char] -> Text.Pandoc.Definition.Pandoc"
13:41-13:44::lq_anf__dnGA :: "Text.Pandoc.Options.ReaderOptions"
13:45-13:46::s :: "{v : [GHC.Types.Char] | v == s && len v >= 0}"
16:1-16:14::InTex.readFootnotes :: "Text.Pandoc.Definition.Inline -> Text.Pandoc.Definition.Inline"
16:16-16:28::_ :: "Text.Pandoc.Definition.Inline\n-> (Data.Maybe.Maybe [GHC.Types.Char])"
16:45-16:54::_ :: "Text.Pandoc.Definition.Format\n-> [GHC.Types.Char] -> Text.Pandoc.Definition.Inline"
16:56-16:62::_ :: "[GHC.Types.Char] -> Text.Pandoc.Definition.Format"
16:63-16:68::lq_anf__dnHm :: "{v : [GHC.Types.Char] | len v >= 0}"
16:70-16:73::res :: "{v : [GHC.Types.Char] | v == res && len v >= 0}"
18:5-18:11::parsed :: "[GHC.Types.Char]\n-> exists [Text.Pandoc.Definition.Pandoc].[GHC.Types.Char]"
18:16-18:26::_ :: "Text.Pandoc.Options.WriterOptions\n-> Text.Pandoc.Definition.Pandoc -> [GHC.Types.Char]"
18:27-18:30::lq_anf__dnHd :: "Text.Pandoc.Options.WriterOptions"
18:31-18:32::_ :: "(Text.Pandoc.Definition.Pandoc -> [GHC.Types.Char])\n-> ([GHC.Types.Char] -> Text.Pandoc.Definition.Pandoc)\n-> [GHC.Types.Char]\n-> exists [Text.Pandoc.Definition.Pandoc].[GHC.Types.Char]"
18:33-18:45::_ :: "Text.Pandoc.Options.ReaderOptions\n-> [GHC.Types.Char] -> Text.Pandoc.Definition.Pandoc"
18:46-18:49::lq_anf__dnHf :: "Text.Pandoc.Options.ReaderOptions"
19:5-19:8::res :: "[GHC.Types.Char]"
19:15-19:23::InTex.fnString :: "{v : [GHC.Types.Char] | v == InTex.fnString && len v >= 0}"
19:24-19:26::_ :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
19:27-19:33::_ :: "[GHC.Types.Char]\n-> exists [Text.Pandoc.Definition.Pandoc].[GHC.Types.Char]"
19:34-19:38::args :: "{v : [GHC.Types.Char] | v == args && len v >= 0}"
19:39-19:41::_ :: "x1:[GHC.Types.Char]\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | len v == len x1 + len v}"
19:42-19:45::lq_anf__dnHk :: "{v : [GHC.Types.Char] | null v <=> false && len v >= 0}"
23:19-23:20::_ :: "Text.Pandoc.Definition.Inline"
25:1-25:9::InTex.fnString :: "[GHC.Types.Char]"
25:12-25:29::GHC.CString.unpackCString# :: "GHC.Prim.Addr# -> [GHC.Types.Char]"
28:1-28:13::InTex.footnoteText :: "Text.Pandoc.Definition.Inline\n-> (Data.Maybe.Maybe [GHC.Types.Char])"
29:6-29:14::InTex.fnString :: "{v : [GHC.Types.Char] | v == InTex.fnString && len v >= 0}"
29:15-29:27::_ :: "[GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Types.Bool"
29:28-29:29::s :: "{v : [GHC.Types.Char] | v == s && len v >= 0}"
30:10-30:14::lq_anf__dnGJ :: "x1:[GHC.Types.Char]\n-> {v : (Data.Maybe.Maybe [GHC.Types.Char]) | isJust v <=> true && fromJust v == x1}"
30:15-30:16::_ :: "([GHC.Types.Char] -> (Data.Maybe.Maybe [GHC.Types.Char]))\n-> ({v : [GHC.Types.Char] | v == s && len v == len s && len v >= 0}\n    -> [GHC.Types.Char])\n-> {v : [GHC.Types.Char] | v == s && len v == len s && len v >= 0}\n-> exists [[GHC.Types.Char]].(Data.Maybe.Maybe [GHC.Types.Char])"
30:17-30:21::lq_anf__dnGK :: "x1:{v : [GHC.Types.Char] | len v > 0}\n-> {v : [GHC.Types.Char] | len v == len x1 - 1}"
30:22-30:23::_ :: "({v : [GHC.Types.Char] | len v >= 0 && len v <= len s}\n -> [GHC.Types.Char])\n-> (x4:{v : [GHC.Types.Char] | v == s && len v == len s && len v >= 0}\n    -> {v : [GHC.Types.Char] | len v >= 0 && len v <= len s && len v <= len x4})\n-> x5:{v : [GHC.Types.Char] | v == s && len v == len s && len v >= 0}\n-> exists [{v : [GHC.Types.Char] | len v >= 0 && len v <= len s && len v <= len x5}].[GHC.Types.Char]"
30:24-30:28::_ :: "x1:GHC.Types.Int\n-> x2:[GHC.Types.Char]\n-> {v : [GHC.Types.Char] | not (x1 >= 0) => len v == len x2 && x1 >= 0 => len v == if (len x2 < x1) then 0 else len x2 - x1}"
30:30-30:36::_ :: "x1:[GHC.Types.Char] -> {v : GHC.Types.Int | v == len x1}"
30:37-30:45::InTex.fnString :: "{v : [GHC.Types.Char] | v == InTex.fnString && len v >= 0}"
30:47-30:48::_ :: "({v : [GHC.Types.Char] | v == s && len v == len s && len v >= 0}\n -> (Data.Maybe.Maybe [GHC.Types.Char]))\n-> {v : [GHC.Types.Char] | v == s && len v == len s && len v >= 0}\n-> (Data.Maybe.Maybe [GHC.Types.Char])"
30:49-30:50::s :: "{v : [GHC.Types.Char] | v == s && len v >= 0}"
31:10-31:17::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"
32:18-32:25::Data.Maybe.Nothing :: "forall a. {v : (Data.Maybe.Maybe a) | isJust v <=> false}"